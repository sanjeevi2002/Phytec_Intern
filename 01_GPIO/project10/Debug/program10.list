
program10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002884  08002884  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800288c  0800288c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002890  08002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000070  08002904  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002904  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ea0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001492  00000000  00000000  00027f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  000293d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  00029ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002191f  00000000  00000000  0002a100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000823d  00000000  00000000  0004ba1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9520  00000000  00000000  00053c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d17c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  0011d1cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080027a0 	.word	0x080027a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080027a0 	.word	0x080027a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
static void MX_USART2_UART_Init(void);

/* Redirect printf to ITM */


int main(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
    HAL_Init();
 80005ba:	f000 fa83 	bl	8000ac4 <HAL_Init>
    SystemClock_Config();
 80005be:	f000 f855 	bl	800066c <SystemClock_Config>
    MX_GPIO_Init();
 80005c2:	f000 f85b 	bl	800067c <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80005c6:	f000 f8ab 	bl	8000720 <MX_USART2_UART_Init>

    uint8_t switch_count = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71fb      	strb	r3, [r7, #7]
    uint8_t led_state = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	71bb      	strb	r3, [r7, #6]

    while (1) {
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Switch pressed
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4820      	ldr	r0, [pc, #128]	; (8000658 <main+0xa4>)
 80005d8:	f000 fd84 	bl	80010e4 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d136      	bne.n	8000650 <main+0x9c>
            HAL_Delay(200); // Debounce delay
 80005e2:	20c8      	movs	r0, #200	; 0xc8
 80005e4:	f000 fae0 	bl	8000ba8 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Still pressed
 80005e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ec:	481a      	ldr	r0, [pc, #104]	; (8000658 <main+0xa4>)
 80005ee:	f000 fd79 	bl	80010e4 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d12b      	bne.n	8000650 <main+0x9c>
                switch_count++;
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	3301      	adds	r3, #1
 80005fc:	71fb      	strb	r3, [r7, #7]
                if (switch_count % 2 == 1) {
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d00a      	beq.n	8000620 <main+0x6c>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // LED ON
 800060a:	2201      	movs	r2, #1
 800060c:	2120      	movs	r1, #32
 800060e:	4813      	ldr	r0, [pc, #76]	; (800065c <main+0xa8>)
 8000610:	f000 fd80 	bl	8001114 <HAL_GPIO_WritePin>
                    led_state = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	71bb      	strb	r3, [r7, #6]
                    printf("LED ON\n");
 8000618:	4811      	ldr	r0, [pc, #68]	; (8000660 <main+0xac>)
 800061a:	f001 f943 	bl	80018a4 <puts>
 800061e:	e009      	b.n	8000634 <main+0x80>
                } else {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // LED OFF
 8000620:	2200      	movs	r2, #0
 8000622:	2120      	movs	r1, #32
 8000624:	480d      	ldr	r0, [pc, #52]	; (800065c <main+0xa8>)
 8000626:	f000 fd75 	bl	8001114 <HAL_GPIO_WritePin>
                    led_state = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	71bb      	strb	r3, [r7, #6]
                    printf("LED OFF\n");
 800062e:	480d      	ldr	r0, [pc, #52]	; (8000664 <main+0xb0>)
 8000630:	f001 f938 	bl	80018a4 <puts>
                }
                printf("Switch pressed %d times\n", switch_count);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	4619      	mov	r1, r3
 8000638:	480b      	ldr	r0, [pc, #44]	; (8000668 <main+0xb4>)
 800063a:	f001 f8ad 	bl	8001798 <iprintf>
                while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET); // Wait for release
 800063e:	bf00      	nop
 8000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <main+0xa4>)
 8000646:	f000 fd4d 	bl	80010e4 <HAL_GPIO_ReadPin>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f7      	beq.n	8000640 <main+0x8c>
            }
        }
        HAL_Delay(50); // Small delay
 8000650:	2032      	movs	r0, #50	; 0x32
 8000652:	f000 faa9 	bl	8000ba8 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) { // Switch pressed
 8000656:	e7bc      	b.n	80005d2 <main+0x1e>
 8000658:	40020800 	.word	0x40020800
 800065c:	40020000 	.word	0x40020000
 8000660:	080027b8 	.word	0x080027b8
 8000664:	080027c0 	.word	0x080027c0
 8000668:	080027c8 	.word	0x080027c8

0800066c <SystemClock_Config>:
    }
}

/* System Clock Configuration */
void SystemClock_Config(void) {
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
    // Your clock configuration code here
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <MX_GPIO_Init>:

/* GPIO Initialization */
static void MX_GPIO_Init(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_GPIO_Init+0x98>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <MX_GPIO_Init+0x98>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_GPIO_Init+0x98>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_GPIO_Init+0x98>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a17      	ldr	r2, [pc, #92]	; (8000714 <MX_GPIO_Init+0x98>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_GPIO_Init+0x98>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	4812      	ldr	r0, [pc, #72]	; (8000718 <MX_GPIO_Init+0x9c>)
 80006d0:	f000 fd20 	bl	8001114 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	480c      	ldr	r0, [pc, #48]	; (800071c <MX_GPIO_Init+0xa0>)
 80006ec:	f000 fb66 	bl	8000dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006f0:	2320      	movs	r3, #32
 80006f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0x9c>)
 8000708:	f000 fb58 	bl	8000dbc <HAL_GPIO_Init>
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000
 800071c:	40020800 	.word	0x40020800

08000720 <MX_USART2_UART_Init>:

/* USART2 Initialization Function */
static void MX_USART2_UART_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f000 fd2a 	bl	80011b0 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
        Error_Handler();
 8000762:	f000 f807 	bl	8000774 <Error_Handler>
    }
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000008c 	.word	0x2000008c
 8000770:	40004400 	.word	0x40004400

08000774 <Error_Handler>:

/* Error Handler */
void Error_Handler(void) {
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
    __disable_irq();
    while (1) {
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <HAL_MspInit+0x4c>)
 8000790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000794:	6453      	str	r3, [r2, #68]	; 0x44
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_MspInit+0x4c>)
 8000798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x4c>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x4c>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x4c>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007be:	2007      	movs	r0, #7
 80007c0:	f000 fac8 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <HAL_UART_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12b      	bne.n	800084a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_UART_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_UART_MspInit+0x88>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800082a:	230c      	movs	r3, #12
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800083a:	2307      	movs	r3, #7
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_UART_MspInit+0x8c>)
 8000846:	f000 fab9 	bl	8000dbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	; 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40004400 	.word	0x40004400
 8000858:	40023800 	.word	0x40023800
 800085c:	40020000 	.word	0x40020000

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ac:	f000 f95c 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <ITM_SendChar+0x48>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <ITM_SendChar+0x48>)
 80008c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008c8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <ITM_SendChar+0x4c>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a0c      	ldr	r2, [pc, #48]	; (8000900 <ITM_SendChar+0x4c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80008d6:	bf00      	nop
 80008d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f8      	beq.n	80008d8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80008e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	6013      	str	r3, [r2, #0]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000edfc 	.word	0xe000edfc
 8000900:	e0000e00 	.word	0xe0000e00

08000904 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e00a      	b.n	800092c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000916:	f3af 8000 	nop.w
 800091a:	4601      	mov	r1, r0
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	60ba      	str	r2, [r7, #8]
 8000922:	b2ca      	uxtb	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3301      	adds	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	dbf0      	blt.n	8000916 <_read+0x12>
  }

  return len;
 8000934:	687b      	ldr	r3, [r7, #4]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	e009      	b.n	8000964 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ffab 	bl	80008b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbf1      	blt.n	8000950 <_write+0x12>
  }
  return len;
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_close>:

int _close(int file)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099e:	605a      	str	r2, [r3, #4]
  return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <_isatty>:

int _isatty(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f000 fe90 	bl	8001734 <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20020000 	.word	0x20020000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	200000d0 	.word	0x200000d0
 8000a48:	200000e8 	.word	0x200000e8

08000a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a76:	490e      	ldr	r1, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a78:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a7c:	e002      	b.n	8000a84 <LoopCopyDataInit>

08000a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a82:	3304      	adds	r3, #4

08000a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a88:	d3f9      	bcc.n	8000a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a8c:	4c0b      	ldr	r4, [pc, #44]	; (8000abc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a90:	e001      	b.n	8000a96 <LoopFillZerobss>

08000a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a94:	3204      	adds	r2, #4

08000a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a98:	d3fb      	bcc.n	8000a92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a9a:	f7ff ffd7 	bl	8000a4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f000 fe4f 	bl	8001740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa2:	f7ff fd87 	bl	80005b4 <main>
  bx  lr    
 8000aa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ab4:	08002894 	.word	0x08002894
  ldr r2, =_sbss
 8000ab8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000abc:	200000e8 	.word	0x200000e8

08000ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <HAL_Init+0x40>)
 8000ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <HAL_Init+0x40>)
 8000ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x40>)
 8000ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aec:	2003      	movs	r0, #3
 8000aee:	f000 f931 	bl	8000d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af2:	2000      	movs	r0, #0
 8000af4:	f000 f808 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fe42 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023c00 	.word	0x40023c00

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_InitTick+0x54>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x58>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 f93b 	bl	8000da2 <HAL_SYSTICK_Config>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00e      	b.n	8000b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2b0f      	cmp	r3, #15
 8000b3a:	d80a      	bhi.n	8000b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b44:	f000 f911 	bl	8000d6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4a06      	ldr	r2, [pc, #24]	; (8000b64 <HAL_InitTick+0x5c>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e000      	b.n	8000b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000004 	.word	0x20000004

08000b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_IncTick+0x20>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x24>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4413      	add	r3, r2
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_IncTick+0x24>)
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	200000d4 	.word	0x200000d4

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b03      	ldr	r3, [pc, #12]	; (8000ba4 <HAL_GetTick+0x14>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000d4 	.word	0x200000d4

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb0:	f7ff ffee 	bl	8000b90 <HAL_GetTick>
 8000bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bc0:	d005      	beq.n	8000bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_Delay+0x44>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4413      	add	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bce:	bf00      	nop
 8000bd0:	f7ff ffde 	bl	8000b90 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8f7      	bhi.n	8000bd0 <HAL_Delay+0x28>
  {
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	6039      	str	r1, [r7, #0]
 8000c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	db0a      	blt.n	8000c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	490c      	ldr	r1, [pc, #48]	; (8000ca0 <__NVIC_SetPriority+0x4c>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	b2d2      	uxtb	r2, r2
 8000c76:	440b      	add	r3, r1
 8000c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c7c:	e00a      	b.n	8000c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4908      	ldr	r1, [pc, #32]	; (8000ca4 <__NVIC_SetPriority+0x50>)
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	f003 030f 	and.w	r3, r3, #15
 8000c8a:	3b04      	subs	r3, #4
 8000c8c:	0112      	lsls	r2, r2, #4
 8000c8e:	b2d2      	uxtb	r2, r2
 8000c90:	440b      	add	r3, r1
 8000c92:	761a      	strb	r2, [r3, #24]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000e100 	.word	0xe000e100
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60f8      	str	r0, [r7, #12]
 8000cb0:	60b9      	str	r1, [r7, #8]
 8000cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1c3 0307 	rsb	r3, r3, #7
 8000cc2:	2b04      	cmp	r3, #4
 8000cc4:	bf28      	it	cs
 8000cc6:	2304      	movcs	r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3304      	adds	r3, #4
 8000cce:	2b06      	cmp	r3, #6
 8000cd0:	d902      	bls.n	8000cd8 <NVIC_EncodePriority+0x30>
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3b03      	subs	r3, #3
 8000cd6:	e000      	b.n	8000cda <NVIC_EncodePriority+0x32>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43da      	mvns	r2, r3
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	401a      	ands	r2, r3
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfa:	43d9      	mvns	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d00:	4313      	orrs	r3, r2
         );
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3724      	adds	r7, #36	; 0x24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d20:	d301      	bcc.n	8000d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00f      	b.n	8000d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <SysTick_Config+0x40>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2e:	210f      	movs	r1, #15
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d34:	f7ff ff8e 	bl	8000c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d38:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <SysTick_Config+0x40>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <SysTick_Config+0x40>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	e000e010 	.word	0xe000e010

08000d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f7ff ff47 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
 8000d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d7c:	f7ff ff5c 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000d80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	68b9      	ldr	r1, [r7, #8]
 8000d86:	6978      	ldr	r0, [r7, #20]
 8000d88:	f7ff ff8e 	bl	8000ca8 <NVIC_EncodePriority>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d92:	4611      	mov	r1, r2
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5d 	bl	8000c54 <__NVIC_SetPriority>
}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffb0 	bl	8000d10 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b089      	sub	sp, #36	; 0x24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	e165      	b.n	80010a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	697a      	ldr	r2, [r7, #20]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f040 8154 	bne.w	800109e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d005      	beq.n	8000e0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d130      	bne.n	8000e70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f003 0201 	and.w	r2, r3, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d017      	beq.n	8000eac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	689a      	ldr	r2, [r3, #8]
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d123      	bne.n	8000f00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	f003 0307 	and.w	r3, r3, #7
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	691a      	ldr	r2, [r3, #16]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	69b9      	ldr	r1, [r7, #24]
 8000efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0203 	and.w	r2, r3, #3
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	f000 80ae 	beq.w	800109e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b5d      	ldr	r3, [pc, #372]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	4a5c      	ldr	r2, [pc, #368]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	; 0x44
 8000f52:	4b5a      	ldr	r3, [pc, #360]	; (80010bc <HAL_GPIO_Init+0x300>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5e:	4a58      	ldr	r2, [pc, #352]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	089b      	lsrs	r3, r3, #2
 8000f64:	3302      	adds	r3, #2
 8000f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	220f      	movs	r2, #15
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x308>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d025      	beq.n	8000fd6 <HAL_GPIO_Init+0x21a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x30c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01f      	beq.n	8000fd2 <HAL_GPIO_Init+0x216>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x310>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x212>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x314>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x20e>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_GPIO_Init+0x318>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x20a>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_GPIO_Init+0x31c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x206>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a49      	ldr	r2, [pc, #292]	; (80010dc <HAL_GPIO_Init+0x320>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x202>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e00c      	b.n	8000fd8 <HAL_GPIO_Init+0x21c>
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	e00a      	b.n	8000fd8 <HAL_GPIO_Init+0x21c>
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	e008      	b.n	8000fd8 <HAL_GPIO_Init+0x21c>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x21c>
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e004      	b.n	8000fd8 <HAL_GPIO_Init+0x21c>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e002      	b.n	8000fd8 <HAL_GPIO_Init+0x21c>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e000      	b.n	8000fd8 <HAL_GPIO_Init+0x21c>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	f002 0203 	and.w	r2, r2, #3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4093      	lsls	r3, r2
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe8:	4935      	ldr	r1, [pc, #212]	; (80010c0 <HAL_GPIO_Init+0x304>)
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ff6:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <HAL_GPIO_Init+0x324>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d003      	beq.n	800101a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800101a:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <HAL_GPIO_Init+0x324>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <HAL_GPIO_Init+0x324>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <HAL_GPIO_Init+0x324>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800104a:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_GPIO_Init+0x324>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <HAL_GPIO_Init+0x324>)
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_GPIO_Init+0x324>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001098:	4a11      	ldr	r2, [pc, #68]	; (80010e0 <HAL_GPIO_Init+0x324>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	f67f ae96 	bls.w	8000dd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40020000 	.word	0x40020000
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40020800 	.word	0x40020800
 80010d0:	40020c00 	.word	0x40020c00
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40021400 	.word	0x40021400
 80010dc:	40021800 	.word	0x40021800
 80010e0:	40013c00 	.word	0x40013c00

080010e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	887b      	ldrh	r3, [r7, #2]
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e001      	b.n	8001106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	807b      	strh	r3, [r7, #2]
 8001120:	4613      	mov	r3, r2
 8001122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001124:	787b      	ldrb	r3, [r7, #1]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001130:	e003      	b.n	800113a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_RCC_GetHCLKFreq+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000

08001160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001164:	f7ff fff0 	bl	8001148 <HAL_RCC_GetHCLKFreq>
 8001168:	4602      	mov	r2, r0
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	0a9b      	lsrs	r3, r3, #10
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	4903      	ldr	r1, [pc, #12]	; (8001184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001176:	5ccb      	ldrb	r3, [r1, r3]
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	080027e4 	.word	0x080027e4

08001188 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800118c:	f7ff ffdc 	bl	8001148 <HAL_RCC_GetHCLKFreq>
 8001190:	4602      	mov	r2, r0
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	0b5b      	lsrs	r3, r3, #13
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	4903      	ldr	r1, [pc, #12]	; (80011ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800119e:	5ccb      	ldrb	r3, [r1, r3]
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	080027e4 	.word	0x080027e4

080011b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e03f      	b.n	8001242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fafa 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2224      	movs	r2, #36	; 0x24
 80011e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f829 	bl	800124c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2220      	movs	r2, #32
 8001234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2220      	movs	r2, #32
 800123c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800124c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001250:	b0c0      	sub	sp, #256	; 0x100
 8001252:	af00      	add	r7, sp, #0
 8001254:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001268:	68d9      	ldr	r1, [r3, #12]
 800126a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	ea40 0301 	orr.w	r3, r0, r1
 8001274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800127a:	689a      	ldr	r2, [r3, #8]
 800127c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	431a      	orrs	r2, r3
 8001284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	431a      	orrs	r2, r3
 800128c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	4313      	orrs	r3, r2
 8001294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80012a4:	f021 010c 	bic.w	r1, r1, #12
 80012a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80012b2:	430b      	orrs	r3, r1
 80012b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80012c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012c6:	6999      	ldr	r1, [r3, #24]
 80012c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	ea40 0301 	orr.w	r3, r0, r1
 80012d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80012d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b8f      	ldr	r3, [pc, #572]	; (8001518 <UART_SetConfig+0x2cc>)
 80012dc:	429a      	cmp	r2, r3
 80012de:	d005      	beq.n	80012ec <UART_SetConfig+0xa0>
 80012e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b8d      	ldr	r3, [pc, #564]	; (800151c <UART_SetConfig+0x2d0>)
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d104      	bne.n	80012f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80012ec:	f7ff ff4c 	bl	8001188 <HAL_RCC_GetPCLK2Freq>
 80012f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80012f4:	e003      	b.n	80012fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80012f6:	f7ff ff33 	bl	8001160 <HAL_RCC_GetPCLK1Freq>
 80012fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001302:	69db      	ldr	r3, [r3, #28]
 8001304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001308:	f040 810c 	bne.w	8001524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800130c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001310:	2200      	movs	r2, #0
 8001312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001316:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800131a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800131e:	4622      	mov	r2, r4
 8001320:	462b      	mov	r3, r5
 8001322:	1891      	adds	r1, r2, r2
 8001324:	65b9      	str	r1, [r7, #88]	; 0x58
 8001326:	415b      	adcs	r3, r3
 8001328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800132a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800132e:	4621      	mov	r1, r4
 8001330:	eb12 0801 	adds.w	r8, r2, r1
 8001334:	4629      	mov	r1, r5
 8001336:	eb43 0901 	adc.w	r9, r3, r1
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800134a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800134e:	4690      	mov	r8, r2
 8001350:	4699      	mov	r9, r3
 8001352:	4623      	mov	r3, r4
 8001354:	eb18 0303 	adds.w	r3, r8, r3
 8001358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800135c:	462b      	mov	r3, r5
 800135e:	eb49 0303 	adc.w	r3, r9, r3
 8001362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001372:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800137a:	460b      	mov	r3, r1
 800137c:	18db      	adds	r3, r3, r3
 800137e:	653b      	str	r3, [r7, #80]	; 0x50
 8001380:	4613      	mov	r3, r2
 8001382:	eb42 0303 	adc.w	r3, r2, r3
 8001386:	657b      	str	r3, [r7, #84]	; 0x54
 8001388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800138c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001390:	f7fe ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4b61      	ldr	r3, [pc, #388]	; (8001520 <UART_SetConfig+0x2d4>)
 800139a:	fba3 2302 	umull	r2, r3, r3, r2
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	011c      	lsls	r4, r3, #4
 80013a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80013a6:	2200      	movs	r2, #0
 80013a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80013ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80013b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80013b4:	4642      	mov	r2, r8
 80013b6:	464b      	mov	r3, r9
 80013b8:	1891      	adds	r1, r2, r2
 80013ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80013bc:	415b      	adcs	r3, r3
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80013c4:	4641      	mov	r1, r8
 80013c6:	eb12 0a01 	adds.w	sl, r2, r1
 80013ca:	4649      	mov	r1, r9
 80013cc:	eb43 0b01 	adc.w	fp, r3, r1
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013e4:	4692      	mov	sl, r2
 80013e6:	469b      	mov	fp, r3
 80013e8:	4643      	mov	r3, r8
 80013ea:	eb1a 0303 	adds.w	r3, sl, r3
 80013ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80013f2:	464b      	mov	r3, r9
 80013f4:	eb4b 0303 	adc.w	r3, fp, r3
 80013f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80013fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001408:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800140c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001410:	460b      	mov	r3, r1
 8001412:	18db      	adds	r3, r3, r3
 8001414:	643b      	str	r3, [r7, #64]	; 0x40
 8001416:	4613      	mov	r3, r2
 8001418:	eb42 0303 	adc.w	r3, r2, r3
 800141c:	647b      	str	r3, [r7, #68]	; 0x44
 800141e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001426:	f7fe ff43 	bl	80002b0 <__aeabi_uldivmod>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	4611      	mov	r1, r2
 8001430:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <UART_SetConfig+0x2d4>)
 8001432:	fba3 2301 	umull	r2, r3, r3, r1
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	2264      	movs	r2, #100	; 0x64
 800143a:	fb02 f303 	mul.w	r3, r2, r3
 800143e:	1acb      	subs	r3, r1, r3
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <UART_SetConfig+0x2d4>)
 8001448:	fba3 2302 	umull	r2, r3, r3, r2
 800144c:	095b      	lsrs	r3, r3, #5
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001454:	441c      	add	r4, r3
 8001456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800145a:	2200      	movs	r2, #0
 800145c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001460:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001468:	4642      	mov	r2, r8
 800146a:	464b      	mov	r3, r9
 800146c:	1891      	adds	r1, r2, r2
 800146e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001470:	415b      	adcs	r3, r3
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001478:	4641      	mov	r1, r8
 800147a:	1851      	adds	r1, r2, r1
 800147c:	6339      	str	r1, [r7, #48]	; 0x30
 800147e:	4649      	mov	r1, r9
 8001480:	414b      	adcs	r3, r1
 8001482:	637b      	str	r3, [r7, #52]	; 0x34
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001490:	4659      	mov	r1, fp
 8001492:	00cb      	lsls	r3, r1, #3
 8001494:	4651      	mov	r1, sl
 8001496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800149a:	4651      	mov	r1, sl
 800149c:	00ca      	lsls	r2, r1, #3
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	4642      	mov	r2, r8
 80014a6:	189b      	adds	r3, r3, r2
 80014a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014ac:	464b      	mov	r3, r9
 80014ae:	460a      	mov	r2, r1
 80014b0:	eb42 0303 	adc.w	r3, r2, r3
 80014b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80014c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80014c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80014cc:	460b      	mov	r3, r1
 80014ce:	18db      	adds	r3, r3, r3
 80014d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80014d2:	4613      	mov	r3, r2
 80014d4:	eb42 0303 	adc.w	r3, r2, r3
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80014e2:	f7fe fee5 	bl	80002b0 <__aeabi_uldivmod>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <UART_SetConfig+0x2d4>)
 80014ec:	fba3 1302 	umull	r1, r3, r3, r2
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	2164      	movs	r1, #100	; 0x64
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	3332      	adds	r3, #50	; 0x32
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <UART_SetConfig+0x2d4>)
 8001500:	fba2 2303 	umull	r2, r3, r2, r3
 8001504:	095b      	lsrs	r3, r3, #5
 8001506:	f003 0207 	and.w	r2, r3, #7
 800150a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4422      	add	r2, r4
 8001512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001514:	e105      	b.n	8001722 <UART_SetConfig+0x4d6>
 8001516:	bf00      	nop
 8001518:	40011000 	.word	0x40011000
 800151c:	40011400 	.word	0x40011400
 8001520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001528:	2200      	movs	r2, #0
 800152a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800152e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001536:	4642      	mov	r2, r8
 8001538:	464b      	mov	r3, r9
 800153a:	1891      	adds	r1, r2, r2
 800153c:	6239      	str	r1, [r7, #32]
 800153e:	415b      	adcs	r3, r3
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
 8001542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001546:	4641      	mov	r1, r8
 8001548:	1854      	adds	r4, r2, r1
 800154a:	4649      	mov	r1, r9
 800154c:	eb43 0501 	adc.w	r5, r3, r1
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	00eb      	lsls	r3, r5, #3
 800155a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800155e:	00e2      	lsls	r2, r4, #3
 8001560:	4614      	mov	r4, r2
 8001562:	461d      	mov	r5, r3
 8001564:	4643      	mov	r3, r8
 8001566:	18e3      	adds	r3, r4, r3
 8001568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800156c:	464b      	mov	r3, r9
 800156e:	eb45 0303 	adc.w	r3, r5, r3
 8001572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001592:	4629      	mov	r1, r5
 8001594:	008b      	lsls	r3, r1, #2
 8001596:	4621      	mov	r1, r4
 8001598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800159c:	4621      	mov	r1, r4
 800159e:	008a      	lsls	r2, r1, #2
 80015a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80015a4:	f7fe fe84 	bl	80002b0 <__aeabi_uldivmod>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4b60      	ldr	r3, [pc, #384]	; (8001730 <UART_SetConfig+0x4e4>)
 80015ae:	fba3 2302 	umull	r2, r3, r3, r2
 80015b2:	095b      	lsrs	r3, r3, #5
 80015b4:	011c      	lsls	r4, r3, #4
 80015b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80015ba:	2200      	movs	r2, #0
 80015bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80015c8:	4642      	mov	r2, r8
 80015ca:	464b      	mov	r3, r9
 80015cc:	1891      	adds	r1, r2, r2
 80015ce:	61b9      	str	r1, [r7, #24]
 80015d0:	415b      	adcs	r3, r3
 80015d2:	61fb      	str	r3, [r7, #28]
 80015d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015d8:	4641      	mov	r1, r8
 80015da:	1851      	adds	r1, r2, r1
 80015dc:	6139      	str	r1, [r7, #16]
 80015de:	4649      	mov	r1, r9
 80015e0:	414b      	adcs	r3, r1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015f0:	4659      	mov	r1, fp
 80015f2:	00cb      	lsls	r3, r1, #3
 80015f4:	4651      	mov	r1, sl
 80015f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015fa:	4651      	mov	r1, sl
 80015fc:	00ca      	lsls	r2, r1, #3
 80015fe:	4610      	mov	r0, r2
 8001600:	4619      	mov	r1, r3
 8001602:	4603      	mov	r3, r0
 8001604:	4642      	mov	r2, r8
 8001606:	189b      	adds	r3, r3, r2
 8001608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800160c:	464b      	mov	r3, r9
 800160e:	460a      	mov	r2, r1
 8001610:	eb42 0303 	adc.w	r3, r2, r3
 8001614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	67bb      	str	r3, [r7, #120]	; 0x78
 8001622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001630:	4649      	mov	r1, r9
 8001632:	008b      	lsls	r3, r1, #2
 8001634:	4641      	mov	r1, r8
 8001636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800163a:	4641      	mov	r1, r8
 800163c:	008a      	lsls	r2, r1, #2
 800163e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001642:	f7fe fe35 	bl	80002b0 <__aeabi_uldivmod>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4b39      	ldr	r3, [pc, #228]	; (8001730 <UART_SetConfig+0x4e4>)
 800164c:	fba3 1302 	umull	r1, r3, r3, r2
 8001650:	095b      	lsrs	r3, r3, #5
 8001652:	2164      	movs	r1, #100	; 0x64
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	3332      	adds	r3, #50	; 0x32
 800165e:	4a34      	ldr	r2, [pc, #208]	; (8001730 <UART_SetConfig+0x4e4>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	095b      	lsrs	r3, r3, #5
 8001666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800166a:	441c      	add	r4, r3
 800166c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001670:	2200      	movs	r2, #0
 8001672:	673b      	str	r3, [r7, #112]	; 0x70
 8001674:	677a      	str	r2, [r7, #116]	; 0x74
 8001676:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800167a:	4642      	mov	r2, r8
 800167c:	464b      	mov	r3, r9
 800167e:	1891      	adds	r1, r2, r2
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	415b      	adcs	r3, r3
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800168a:	4641      	mov	r1, r8
 800168c:	1851      	adds	r1, r2, r1
 800168e:	6039      	str	r1, [r7, #0]
 8001690:	4649      	mov	r1, r9
 8001692:	414b      	adcs	r3, r1
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80016a2:	4659      	mov	r1, fp
 80016a4:	00cb      	lsls	r3, r1, #3
 80016a6:	4651      	mov	r1, sl
 80016a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ac:	4651      	mov	r1, sl
 80016ae:	00ca      	lsls	r2, r1, #3
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	4603      	mov	r3, r0
 80016b6:	4642      	mov	r2, r8
 80016b8:	189b      	adds	r3, r3, r2
 80016ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80016bc:	464b      	mov	r3, r9
 80016be:	460a      	mov	r2, r1
 80016c0:	eb42 0303 	adc.w	r3, r2, r3
 80016c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80016c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	663b      	str	r3, [r7, #96]	; 0x60
 80016d0:	667a      	str	r2, [r7, #100]	; 0x64
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	f04f 0300 	mov.w	r3, #0
 80016da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80016de:	4649      	mov	r1, r9
 80016e0:	008b      	lsls	r3, r1, #2
 80016e2:	4641      	mov	r1, r8
 80016e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80016e8:	4641      	mov	r1, r8
 80016ea:	008a      	lsls	r2, r1, #2
 80016ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80016f0:	f7fe fdde 	bl	80002b0 <__aeabi_uldivmod>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <UART_SetConfig+0x4e4>)
 80016fa:	fba3 1302 	umull	r1, r3, r3, r2
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	2164      	movs	r1, #100	; 0x64
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	011b      	lsls	r3, r3, #4
 800170a:	3332      	adds	r3, #50	; 0x32
 800170c:	4a08      	ldr	r2, [pc, #32]	; (8001730 <UART_SetConfig+0x4e4>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	095b      	lsrs	r3, r3, #5
 8001714:	f003 020f 	and.w	r2, r3, #15
 8001718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4422      	add	r2, r4
 8001720:	609a      	str	r2, [r3, #8]
}
 8001722:	bf00      	nop
 8001724:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001728:	46bd      	mov	sp, r7
 800172a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800172e:	bf00      	nop
 8001730:	51eb851f 	.word	0x51eb851f

08001734 <__errno>:
 8001734:	4b01      	ldr	r3, [pc, #4]	; (800173c <__errno+0x8>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000000c 	.word	0x2000000c

08001740 <__libc_init_array>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	4d0d      	ldr	r5, [pc, #52]	; (8001778 <__libc_init_array+0x38>)
 8001744:	4c0d      	ldr	r4, [pc, #52]	; (800177c <__libc_init_array+0x3c>)
 8001746:	1b64      	subs	r4, r4, r5
 8001748:	10a4      	asrs	r4, r4, #2
 800174a:	2600      	movs	r6, #0
 800174c:	42a6      	cmp	r6, r4
 800174e:	d109      	bne.n	8001764 <__libc_init_array+0x24>
 8001750:	4d0b      	ldr	r5, [pc, #44]	; (8001780 <__libc_init_array+0x40>)
 8001752:	4c0c      	ldr	r4, [pc, #48]	; (8001784 <__libc_init_array+0x44>)
 8001754:	f001 f824 	bl	80027a0 <_init>
 8001758:	1b64      	subs	r4, r4, r5
 800175a:	10a4      	asrs	r4, r4, #2
 800175c:	2600      	movs	r6, #0
 800175e:	42a6      	cmp	r6, r4
 8001760:	d105      	bne.n	800176e <__libc_init_array+0x2e>
 8001762:	bd70      	pop	{r4, r5, r6, pc}
 8001764:	f855 3b04 	ldr.w	r3, [r5], #4
 8001768:	4798      	blx	r3
 800176a:	3601      	adds	r6, #1
 800176c:	e7ee      	b.n	800174c <__libc_init_array+0xc>
 800176e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001772:	4798      	blx	r3
 8001774:	3601      	adds	r6, #1
 8001776:	e7f2      	b.n	800175e <__libc_init_array+0x1e>
 8001778:	0800288c 	.word	0x0800288c
 800177c:	0800288c 	.word	0x0800288c
 8001780:	0800288c 	.word	0x0800288c
 8001784:	08002890 	.word	0x08002890

08001788 <memset>:
 8001788:	4402      	add	r2, r0
 800178a:	4603      	mov	r3, r0
 800178c:	4293      	cmp	r3, r2
 800178e:	d100      	bne.n	8001792 <memset+0xa>
 8001790:	4770      	bx	lr
 8001792:	f803 1b01 	strb.w	r1, [r3], #1
 8001796:	e7f9      	b.n	800178c <memset+0x4>

08001798 <iprintf>:
 8001798:	b40f      	push	{r0, r1, r2, r3}
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <iprintf+0x2c>)
 800179c:	b513      	push	{r0, r1, r4, lr}
 800179e:	681c      	ldr	r4, [r3, #0]
 80017a0:	b124      	cbz	r4, 80017ac <iprintf+0x14>
 80017a2:	69a3      	ldr	r3, [r4, #24]
 80017a4:	b913      	cbnz	r3, 80017ac <iprintf+0x14>
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 fa5e 	bl	8001c68 <__sinit>
 80017ac:	ab05      	add	r3, sp, #20
 80017ae:	9a04      	ldr	r2, [sp, #16]
 80017b0:	68a1      	ldr	r1, [r4, #8]
 80017b2:	9301      	str	r3, [sp, #4]
 80017b4:	4620      	mov	r0, r4
 80017b6:	f000 fc67 	bl	8002088 <_vfiprintf_r>
 80017ba:	b002      	add	sp, #8
 80017bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017c0:	b004      	add	sp, #16
 80017c2:	4770      	bx	lr
 80017c4:	2000000c 	.word	0x2000000c

080017c8 <_puts_r>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	460e      	mov	r6, r1
 80017cc:	4605      	mov	r5, r0
 80017ce:	b118      	cbz	r0, 80017d8 <_puts_r+0x10>
 80017d0:	6983      	ldr	r3, [r0, #24]
 80017d2:	b90b      	cbnz	r3, 80017d8 <_puts_r+0x10>
 80017d4:	f000 fa48 	bl	8001c68 <__sinit>
 80017d8:	69ab      	ldr	r3, [r5, #24]
 80017da:	68ac      	ldr	r4, [r5, #8]
 80017dc:	b913      	cbnz	r3, 80017e4 <_puts_r+0x1c>
 80017de:	4628      	mov	r0, r5
 80017e0:	f000 fa42 	bl	8001c68 <__sinit>
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <_puts_r+0xd0>)
 80017e6:	429c      	cmp	r4, r3
 80017e8:	d120      	bne.n	800182c <_puts_r+0x64>
 80017ea:	686c      	ldr	r4, [r5, #4]
 80017ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017ee:	07db      	lsls	r3, r3, #31
 80017f0:	d405      	bmi.n	80017fe <_puts_r+0x36>
 80017f2:	89a3      	ldrh	r3, [r4, #12]
 80017f4:	0598      	lsls	r0, r3, #22
 80017f6:	d402      	bmi.n	80017fe <_puts_r+0x36>
 80017f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017fa:	f000 fad3 	bl	8001da4 <__retarget_lock_acquire_recursive>
 80017fe:	89a3      	ldrh	r3, [r4, #12]
 8001800:	0719      	lsls	r1, r3, #28
 8001802:	d51d      	bpl.n	8001840 <_puts_r+0x78>
 8001804:	6923      	ldr	r3, [r4, #16]
 8001806:	b1db      	cbz	r3, 8001840 <_puts_r+0x78>
 8001808:	3e01      	subs	r6, #1
 800180a:	68a3      	ldr	r3, [r4, #8]
 800180c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001810:	3b01      	subs	r3, #1
 8001812:	60a3      	str	r3, [r4, #8]
 8001814:	bb39      	cbnz	r1, 8001866 <_puts_r+0x9e>
 8001816:	2b00      	cmp	r3, #0
 8001818:	da38      	bge.n	800188c <_puts_r+0xc4>
 800181a:	4622      	mov	r2, r4
 800181c:	210a      	movs	r1, #10
 800181e:	4628      	mov	r0, r5
 8001820:	f000 f848 	bl	80018b4 <__swbuf_r>
 8001824:	3001      	adds	r0, #1
 8001826:	d011      	beq.n	800184c <_puts_r+0x84>
 8001828:	250a      	movs	r5, #10
 800182a:	e011      	b.n	8001850 <_puts_r+0x88>
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <_puts_r+0xd4>)
 800182e:	429c      	cmp	r4, r3
 8001830:	d101      	bne.n	8001836 <_puts_r+0x6e>
 8001832:	68ac      	ldr	r4, [r5, #8]
 8001834:	e7da      	b.n	80017ec <_puts_r+0x24>
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <_puts_r+0xd8>)
 8001838:	429c      	cmp	r4, r3
 800183a:	bf08      	it	eq
 800183c:	68ec      	ldreq	r4, [r5, #12]
 800183e:	e7d5      	b.n	80017ec <_puts_r+0x24>
 8001840:	4621      	mov	r1, r4
 8001842:	4628      	mov	r0, r5
 8001844:	f000 f888 	bl	8001958 <__swsetup_r>
 8001848:	2800      	cmp	r0, #0
 800184a:	d0dd      	beq.n	8001808 <_puts_r+0x40>
 800184c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001852:	07da      	lsls	r2, r3, #31
 8001854:	d405      	bmi.n	8001862 <_puts_r+0x9a>
 8001856:	89a3      	ldrh	r3, [r4, #12]
 8001858:	059b      	lsls	r3, r3, #22
 800185a:	d402      	bmi.n	8001862 <_puts_r+0x9a>
 800185c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800185e:	f000 faa2 	bl	8001da6 <__retarget_lock_release_recursive>
 8001862:	4628      	mov	r0, r5
 8001864:	bd70      	pop	{r4, r5, r6, pc}
 8001866:	2b00      	cmp	r3, #0
 8001868:	da04      	bge.n	8001874 <_puts_r+0xac>
 800186a:	69a2      	ldr	r2, [r4, #24]
 800186c:	429a      	cmp	r2, r3
 800186e:	dc06      	bgt.n	800187e <_puts_r+0xb6>
 8001870:	290a      	cmp	r1, #10
 8001872:	d004      	beq.n	800187e <_puts_r+0xb6>
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	6022      	str	r2, [r4, #0]
 800187a:	7019      	strb	r1, [r3, #0]
 800187c:	e7c5      	b.n	800180a <_puts_r+0x42>
 800187e:	4622      	mov	r2, r4
 8001880:	4628      	mov	r0, r5
 8001882:	f000 f817 	bl	80018b4 <__swbuf_r>
 8001886:	3001      	adds	r0, #1
 8001888:	d1bf      	bne.n	800180a <_puts_r+0x42>
 800188a:	e7df      	b.n	800184c <_puts_r+0x84>
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	250a      	movs	r5, #10
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	6022      	str	r2, [r4, #0]
 8001894:	701d      	strb	r5, [r3, #0]
 8001896:	e7db      	b.n	8001850 <_puts_r+0x88>
 8001898:	08002810 	.word	0x08002810
 800189c:	08002830 	.word	0x08002830
 80018a0:	080027f0 	.word	0x080027f0

080018a4 <puts>:
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <puts+0xc>)
 80018a6:	4601      	mov	r1, r0
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	f7ff bf8d 	b.w	80017c8 <_puts_r>
 80018ae:	bf00      	nop
 80018b0:	2000000c 	.word	0x2000000c

080018b4 <__swbuf_r>:
 80018b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b6:	460e      	mov	r6, r1
 80018b8:	4614      	mov	r4, r2
 80018ba:	4605      	mov	r5, r0
 80018bc:	b118      	cbz	r0, 80018c6 <__swbuf_r+0x12>
 80018be:	6983      	ldr	r3, [r0, #24]
 80018c0:	b90b      	cbnz	r3, 80018c6 <__swbuf_r+0x12>
 80018c2:	f000 f9d1 	bl	8001c68 <__sinit>
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <__swbuf_r+0x98>)
 80018c8:	429c      	cmp	r4, r3
 80018ca:	d12b      	bne.n	8001924 <__swbuf_r+0x70>
 80018cc:	686c      	ldr	r4, [r5, #4]
 80018ce:	69a3      	ldr	r3, [r4, #24]
 80018d0:	60a3      	str	r3, [r4, #8]
 80018d2:	89a3      	ldrh	r3, [r4, #12]
 80018d4:	071a      	lsls	r2, r3, #28
 80018d6:	d52f      	bpl.n	8001938 <__swbuf_r+0x84>
 80018d8:	6923      	ldr	r3, [r4, #16]
 80018da:	b36b      	cbz	r3, 8001938 <__swbuf_r+0x84>
 80018dc:	6923      	ldr	r3, [r4, #16]
 80018de:	6820      	ldr	r0, [r4, #0]
 80018e0:	1ac0      	subs	r0, r0, r3
 80018e2:	6963      	ldr	r3, [r4, #20]
 80018e4:	b2f6      	uxtb	r6, r6
 80018e6:	4283      	cmp	r3, r0
 80018e8:	4637      	mov	r7, r6
 80018ea:	dc04      	bgt.n	80018f6 <__swbuf_r+0x42>
 80018ec:	4621      	mov	r1, r4
 80018ee:	4628      	mov	r0, r5
 80018f0:	f000 f926 	bl	8001b40 <_fflush_r>
 80018f4:	bb30      	cbnz	r0, 8001944 <__swbuf_r+0x90>
 80018f6:	68a3      	ldr	r3, [r4, #8]
 80018f8:	3b01      	subs	r3, #1
 80018fa:	60a3      	str	r3, [r4, #8]
 80018fc:	6823      	ldr	r3, [r4, #0]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	6022      	str	r2, [r4, #0]
 8001902:	701e      	strb	r6, [r3, #0]
 8001904:	6963      	ldr	r3, [r4, #20]
 8001906:	3001      	adds	r0, #1
 8001908:	4283      	cmp	r3, r0
 800190a:	d004      	beq.n	8001916 <__swbuf_r+0x62>
 800190c:	89a3      	ldrh	r3, [r4, #12]
 800190e:	07db      	lsls	r3, r3, #31
 8001910:	d506      	bpl.n	8001920 <__swbuf_r+0x6c>
 8001912:	2e0a      	cmp	r6, #10
 8001914:	d104      	bne.n	8001920 <__swbuf_r+0x6c>
 8001916:	4621      	mov	r1, r4
 8001918:	4628      	mov	r0, r5
 800191a:	f000 f911 	bl	8001b40 <_fflush_r>
 800191e:	b988      	cbnz	r0, 8001944 <__swbuf_r+0x90>
 8001920:	4638      	mov	r0, r7
 8001922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <__swbuf_r+0x9c>)
 8001926:	429c      	cmp	r4, r3
 8001928:	d101      	bne.n	800192e <__swbuf_r+0x7a>
 800192a:	68ac      	ldr	r4, [r5, #8]
 800192c:	e7cf      	b.n	80018ce <__swbuf_r+0x1a>
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <__swbuf_r+0xa0>)
 8001930:	429c      	cmp	r4, r3
 8001932:	bf08      	it	eq
 8001934:	68ec      	ldreq	r4, [r5, #12]
 8001936:	e7ca      	b.n	80018ce <__swbuf_r+0x1a>
 8001938:	4621      	mov	r1, r4
 800193a:	4628      	mov	r0, r5
 800193c:	f000 f80c 	bl	8001958 <__swsetup_r>
 8001940:	2800      	cmp	r0, #0
 8001942:	d0cb      	beq.n	80018dc <__swbuf_r+0x28>
 8001944:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001948:	e7ea      	b.n	8001920 <__swbuf_r+0x6c>
 800194a:	bf00      	nop
 800194c:	08002810 	.word	0x08002810
 8001950:	08002830 	.word	0x08002830
 8001954:	080027f0 	.word	0x080027f0

08001958 <__swsetup_r>:
 8001958:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <__swsetup_r+0xcc>)
 800195a:	b570      	push	{r4, r5, r6, lr}
 800195c:	681d      	ldr	r5, [r3, #0]
 800195e:	4606      	mov	r6, r0
 8001960:	460c      	mov	r4, r1
 8001962:	b125      	cbz	r5, 800196e <__swsetup_r+0x16>
 8001964:	69ab      	ldr	r3, [r5, #24]
 8001966:	b913      	cbnz	r3, 800196e <__swsetup_r+0x16>
 8001968:	4628      	mov	r0, r5
 800196a:	f000 f97d 	bl	8001c68 <__sinit>
 800196e:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <__swsetup_r+0xd0>)
 8001970:	429c      	cmp	r4, r3
 8001972:	d10f      	bne.n	8001994 <__swsetup_r+0x3c>
 8001974:	686c      	ldr	r4, [r5, #4]
 8001976:	89a3      	ldrh	r3, [r4, #12]
 8001978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800197c:	0719      	lsls	r1, r3, #28
 800197e:	d42c      	bmi.n	80019da <__swsetup_r+0x82>
 8001980:	06dd      	lsls	r5, r3, #27
 8001982:	d411      	bmi.n	80019a8 <__swsetup_r+0x50>
 8001984:	2309      	movs	r3, #9
 8001986:	6033      	str	r3, [r6, #0]
 8001988:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800198c:	81a3      	strh	r3, [r4, #12]
 800198e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001992:	e03e      	b.n	8001a12 <__swsetup_r+0xba>
 8001994:	4b25      	ldr	r3, [pc, #148]	; (8001a2c <__swsetup_r+0xd4>)
 8001996:	429c      	cmp	r4, r3
 8001998:	d101      	bne.n	800199e <__swsetup_r+0x46>
 800199a:	68ac      	ldr	r4, [r5, #8]
 800199c:	e7eb      	b.n	8001976 <__swsetup_r+0x1e>
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <__swsetup_r+0xd8>)
 80019a0:	429c      	cmp	r4, r3
 80019a2:	bf08      	it	eq
 80019a4:	68ec      	ldreq	r4, [r5, #12]
 80019a6:	e7e6      	b.n	8001976 <__swsetup_r+0x1e>
 80019a8:	0758      	lsls	r0, r3, #29
 80019aa:	d512      	bpl.n	80019d2 <__swsetup_r+0x7a>
 80019ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80019ae:	b141      	cbz	r1, 80019c2 <__swsetup_r+0x6a>
 80019b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019b4:	4299      	cmp	r1, r3
 80019b6:	d002      	beq.n	80019be <__swsetup_r+0x66>
 80019b8:	4630      	mov	r0, r6
 80019ba:	f000 fa5b 	bl	8001e74 <_free_r>
 80019be:	2300      	movs	r3, #0
 80019c0:	6363      	str	r3, [r4, #52]	; 0x34
 80019c2:	89a3      	ldrh	r3, [r4, #12]
 80019c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019c8:	81a3      	strh	r3, [r4, #12]
 80019ca:	2300      	movs	r3, #0
 80019cc:	6063      	str	r3, [r4, #4]
 80019ce:	6923      	ldr	r3, [r4, #16]
 80019d0:	6023      	str	r3, [r4, #0]
 80019d2:	89a3      	ldrh	r3, [r4, #12]
 80019d4:	f043 0308 	orr.w	r3, r3, #8
 80019d8:	81a3      	strh	r3, [r4, #12]
 80019da:	6923      	ldr	r3, [r4, #16]
 80019dc:	b94b      	cbnz	r3, 80019f2 <__swsetup_r+0x9a>
 80019de:	89a3      	ldrh	r3, [r4, #12]
 80019e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e8:	d003      	beq.n	80019f2 <__swsetup_r+0x9a>
 80019ea:	4621      	mov	r1, r4
 80019ec:	4630      	mov	r0, r6
 80019ee:	f000 fa01 	bl	8001df4 <__smakebuf_r>
 80019f2:	89a0      	ldrh	r0, [r4, #12]
 80019f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80019f8:	f010 0301 	ands.w	r3, r0, #1
 80019fc:	d00a      	beq.n	8001a14 <__swsetup_r+0xbc>
 80019fe:	2300      	movs	r3, #0
 8001a00:	60a3      	str	r3, [r4, #8]
 8001a02:	6963      	ldr	r3, [r4, #20]
 8001a04:	425b      	negs	r3, r3
 8001a06:	61a3      	str	r3, [r4, #24]
 8001a08:	6923      	ldr	r3, [r4, #16]
 8001a0a:	b943      	cbnz	r3, 8001a1e <__swsetup_r+0xc6>
 8001a0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001a10:	d1ba      	bne.n	8001988 <__swsetup_r+0x30>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	0781      	lsls	r1, r0, #30
 8001a16:	bf58      	it	pl
 8001a18:	6963      	ldrpl	r3, [r4, #20]
 8001a1a:	60a3      	str	r3, [r4, #8]
 8001a1c:	e7f4      	b.n	8001a08 <__swsetup_r+0xb0>
 8001a1e:	2000      	movs	r0, #0
 8001a20:	e7f7      	b.n	8001a12 <__swsetup_r+0xba>
 8001a22:	bf00      	nop
 8001a24:	2000000c 	.word	0x2000000c
 8001a28:	08002810 	.word	0x08002810
 8001a2c:	08002830 	.word	0x08002830
 8001a30:	080027f0 	.word	0x080027f0

08001a34 <__sflush_r>:
 8001a34:	898a      	ldrh	r2, [r1, #12]
 8001a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	0710      	lsls	r0, r2, #28
 8001a3e:	460c      	mov	r4, r1
 8001a40:	d458      	bmi.n	8001af4 <__sflush_r+0xc0>
 8001a42:	684b      	ldr	r3, [r1, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	dc05      	bgt.n	8001a54 <__sflush_r+0x20>
 8001a48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	dc02      	bgt.n	8001a54 <__sflush_r+0x20>
 8001a4e:	2000      	movs	r0, #0
 8001a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a56:	2e00      	cmp	r6, #0
 8001a58:	d0f9      	beq.n	8001a4e <__sflush_r+0x1a>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a60:	682f      	ldr	r7, [r5, #0]
 8001a62:	602b      	str	r3, [r5, #0]
 8001a64:	d032      	beq.n	8001acc <__sflush_r+0x98>
 8001a66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a68:	89a3      	ldrh	r3, [r4, #12]
 8001a6a:	075a      	lsls	r2, r3, #29
 8001a6c:	d505      	bpl.n	8001a7a <__sflush_r+0x46>
 8001a6e:	6863      	ldr	r3, [r4, #4]
 8001a70:	1ac0      	subs	r0, r0, r3
 8001a72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a74:	b10b      	cbz	r3, 8001a7a <__sflush_r+0x46>
 8001a76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a78:	1ac0      	subs	r0, r0, r3
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a80:	6a21      	ldr	r1, [r4, #32]
 8001a82:	4628      	mov	r0, r5
 8001a84:	47b0      	blx	r6
 8001a86:	1c43      	adds	r3, r0, #1
 8001a88:	89a3      	ldrh	r3, [r4, #12]
 8001a8a:	d106      	bne.n	8001a9a <__sflush_r+0x66>
 8001a8c:	6829      	ldr	r1, [r5, #0]
 8001a8e:	291d      	cmp	r1, #29
 8001a90:	d82c      	bhi.n	8001aec <__sflush_r+0xb8>
 8001a92:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <__sflush_r+0x108>)
 8001a94:	40ca      	lsrs	r2, r1
 8001a96:	07d6      	lsls	r6, r2, #31
 8001a98:	d528      	bpl.n	8001aec <__sflush_r+0xb8>
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	6062      	str	r2, [r4, #4]
 8001a9e:	04d9      	lsls	r1, r3, #19
 8001aa0:	6922      	ldr	r2, [r4, #16]
 8001aa2:	6022      	str	r2, [r4, #0]
 8001aa4:	d504      	bpl.n	8001ab0 <__sflush_r+0x7c>
 8001aa6:	1c42      	adds	r2, r0, #1
 8001aa8:	d101      	bne.n	8001aae <__sflush_r+0x7a>
 8001aaa:	682b      	ldr	r3, [r5, #0]
 8001aac:	b903      	cbnz	r3, 8001ab0 <__sflush_r+0x7c>
 8001aae:	6560      	str	r0, [r4, #84]	; 0x54
 8001ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001ab2:	602f      	str	r7, [r5, #0]
 8001ab4:	2900      	cmp	r1, #0
 8001ab6:	d0ca      	beq.n	8001a4e <__sflush_r+0x1a>
 8001ab8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001abc:	4299      	cmp	r1, r3
 8001abe:	d002      	beq.n	8001ac6 <__sflush_r+0x92>
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f000 f9d7 	bl	8001e74 <_free_r>
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	6360      	str	r0, [r4, #52]	; 0x34
 8001aca:	e7c1      	b.n	8001a50 <__sflush_r+0x1c>
 8001acc:	6a21      	ldr	r1, [r4, #32]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	4628      	mov	r0, r5
 8001ad2:	47b0      	blx	r6
 8001ad4:	1c41      	adds	r1, r0, #1
 8001ad6:	d1c7      	bne.n	8001a68 <__sflush_r+0x34>
 8001ad8:	682b      	ldr	r3, [r5, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0c4      	beq.n	8001a68 <__sflush_r+0x34>
 8001ade:	2b1d      	cmp	r3, #29
 8001ae0:	d001      	beq.n	8001ae6 <__sflush_r+0xb2>
 8001ae2:	2b16      	cmp	r3, #22
 8001ae4:	d101      	bne.n	8001aea <__sflush_r+0xb6>
 8001ae6:	602f      	str	r7, [r5, #0]
 8001ae8:	e7b1      	b.n	8001a4e <__sflush_r+0x1a>
 8001aea:	89a3      	ldrh	r3, [r4, #12]
 8001aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af0:	81a3      	strh	r3, [r4, #12]
 8001af2:	e7ad      	b.n	8001a50 <__sflush_r+0x1c>
 8001af4:	690f      	ldr	r7, [r1, #16]
 8001af6:	2f00      	cmp	r7, #0
 8001af8:	d0a9      	beq.n	8001a4e <__sflush_r+0x1a>
 8001afa:	0793      	lsls	r3, r2, #30
 8001afc:	680e      	ldr	r6, [r1, #0]
 8001afe:	bf08      	it	eq
 8001b00:	694b      	ldreq	r3, [r1, #20]
 8001b02:	600f      	str	r7, [r1, #0]
 8001b04:	bf18      	it	ne
 8001b06:	2300      	movne	r3, #0
 8001b08:	eba6 0807 	sub.w	r8, r6, r7
 8001b0c:	608b      	str	r3, [r1, #8]
 8001b0e:	f1b8 0f00 	cmp.w	r8, #0
 8001b12:	dd9c      	ble.n	8001a4e <__sflush_r+0x1a>
 8001b14:	6a21      	ldr	r1, [r4, #32]
 8001b16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b18:	4643      	mov	r3, r8
 8001b1a:	463a      	mov	r2, r7
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	47b0      	blx	r6
 8001b20:	2800      	cmp	r0, #0
 8001b22:	dc06      	bgt.n	8001b32 <__sflush_r+0xfe>
 8001b24:	89a3      	ldrh	r3, [r4, #12]
 8001b26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b2a:	81a3      	strh	r3, [r4, #12]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b30:	e78e      	b.n	8001a50 <__sflush_r+0x1c>
 8001b32:	4407      	add	r7, r0
 8001b34:	eba8 0800 	sub.w	r8, r8, r0
 8001b38:	e7e9      	b.n	8001b0e <__sflush_r+0xda>
 8001b3a:	bf00      	nop
 8001b3c:	20400001 	.word	0x20400001

08001b40 <_fflush_r>:
 8001b40:	b538      	push	{r3, r4, r5, lr}
 8001b42:	690b      	ldr	r3, [r1, #16]
 8001b44:	4605      	mov	r5, r0
 8001b46:	460c      	mov	r4, r1
 8001b48:	b913      	cbnz	r3, 8001b50 <_fflush_r+0x10>
 8001b4a:	2500      	movs	r5, #0
 8001b4c:	4628      	mov	r0, r5
 8001b4e:	bd38      	pop	{r3, r4, r5, pc}
 8001b50:	b118      	cbz	r0, 8001b5a <_fflush_r+0x1a>
 8001b52:	6983      	ldr	r3, [r0, #24]
 8001b54:	b90b      	cbnz	r3, 8001b5a <_fflush_r+0x1a>
 8001b56:	f000 f887 	bl	8001c68 <__sinit>
 8001b5a:	4b14      	ldr	r3, [pc, #80]	; (8001bac <_fflush_r+0x6c>)
 8001b5c:	429c      	cmp	r4, r3
 8001b5e:	d11b      	bne.n	8001b98 <_fflush_r+0x58>
 8001b60:	686c      	ldr	r4, [r5, #4]
 8001b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0ef      	beq.n	8001b4a <_fflush_r+0xa>
 8001b6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001b6c:	07d0      	lsls	r0, r2, #31
 8001b6e:	d404      	bmi.n	8001b7a <_fflush_r+0x3a>
 8001b70:	0599      	lsls	r1, r3, #22
 8001b72:	d402      	bmi.n	8001b7a <_fflush_r+0x3a>
 8001b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b76:	f000 f915 	bl	8001da4 <__retarget_lock_acquire_recursive>
 8001b7a:	4628      	mov	r0, r5
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	f7ff ff59 	bl	8001a34 <__sflush_r>
 8001b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b84:	07da      	lsls	r2, r3, #31
 8001b86:	4605      	mov	r5, r0
 8001b88:	d4e0      	bmi.n	8001b4c <_fflush_r+0xc>
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	059b      	lsls	r3, r3, #22
 8001b8e:	d4dd      	bmi.n	8001b4c <_fflush_r+0xc>
 8001b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b92:	f000 f908 	bl	8001da6 <__retarget_lock_release_recursive>
 8001b96:	e7d9      	b.n	8001b4c <_fflush_r+0xc>
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <_fflush_r+0x70>)
 8001b9a:	429c      	cmp	r4, r3
 8001b9c:	d101      	bne.n	8001ba2 <_fflush_r+0x62>
 8001b9e:	68ac      	ldr	r4, [r5, #8]
 8001ba0:	e7df      	b.n	8001b62 <_fflush_r+0x22>
 8001ba2:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <_fflush_r+0x74>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	bf08      	it	eq
 8001ba8:	68ec      	ldreq	r4, [r5, #12]
 8001baa:	e7da      	b.n	8001b62 <_fflush_r+0x22>
 8001bac:	08002810 	.word	0x08002810
 8001bb0:	08002830 	.word	0x08002830
 8001bb4:	080027f0 	.word	0x080027f0

08001bb8 <std>:
 8001bb8:	2300      	movs	r3, #0
 8001bba:	b510      	push	{r4, lr}
 8001bbc:	4604      	mov	r4, r0
 8001bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8001bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001bc6:	6083      	str	r3, [r0, #8]
 8001bc8:	8181      	strh	r1, [r0, #12]
 8001bca:	6643      	str	r3, [r0, #100]	; 0x64
 8001bcc:	81c2      	strh	r2, [r0, #14]
 8001bce:	6183      	str	r3, [r0, #24]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	2208      	movs	r2, #8
 8001bd4:	305c      	adds	r0, #92	; 0x5c
 8001bd6:	f7ff fdd7 	bl	8001788 <memset>
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <std+0x38>)
 8001bdc:	6263      	str	r3, [r4, #36]	; 0x24
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <std+0x3c>)
 8001be0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <std+0x40>)
 8001be4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <std+0x44>)
 8001be8:	6224      	str	r4, [r4, #32]
 8001bea:	6323      	str	r3, [r4, #48]	; 0x30
 8001bec:	bd10      	pop	{r4, pc}
 8001bee:	bf00      	nop
 8001bf0:	08002631 	.word	0x08002631
 8001bf4:	08002653 	.word	0x08002653
 8001bf8:	0800268b 	.word	0x0800268b
 8001bfc:	080026af 	.word	0x080026af

08001c00 <_cleanup_r>:
 8001c00:	4901      	ldr	r1, [pc, #4]	; (8001c08 <_cleanup_r+0x8>)
 8001c02:	f000 b8af 	b.w	8001d64 <_fwalk_reent>
 8001c06:	bf00      	nop
 8001c08:	08001b41 	.word	0x08001b41

08001c0c <__sfmoreglue>:
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	2268      	movs	r2, #104	; 0x68
 8001c10:	1e4d      	subs	r5, r1, #1
 8001c12:	4355      	muls	r5, r2
 8001c14:	460e      	mov	r6, r1
 8001c16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001c1a:	f000 f997 	bl	8001f4c <_malloc_r>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b140      	cbz	r0, 8001c34 <__sfmoreglue+0x28>
 8001c22:	2100      	movs	r1, #0
 8001c24:	e9c0 1600 	strd	r1, r6, [r0]
 8001c28:	300c      	adds	r0, #12
 8001c2a:	60a0      	str	r0, [r4, #8]
 8001c2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001c30:	f7ff fdaa 	bl	8001788 <memset>
 8001c34:	4620      	mov	r0, r4
 8001c36:	bd70      	pop	{r4, r5, r6, pc}

08001c38 <__sfp_lock_acquire>:
 8001c38:	4801      	ldr	r0, [pc, #4]	; (8001c40 <__sfp_lock_acquire+0x8>)
 8001c3a:	f000 b8b3 	b.w	8001da4 <__retarget_lock_acquire_recursive>
 8001c3e:	bf00      	nop
 8001c40:	200000d9 	.word	0x200000d9

08001c44 <__sfp_lock_release>:
 8001c44:	4801      	ldr	r0, [pc, #4]	; (8001c4c <__sfp_lock_release+0x8>)
 8001c46:	f000 b8ae 	b.w	8001da6 <__retarget_lock_release_recursive>
 8001c4a:	bf00      	nop
 8001c4c:	200000d9 	.word	0x200000d9

08001c50 <__sinit_lock_acquire>:
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <__sinit_lock_acquire+0x8>)
 8001c52:	f000 b8a7 	b.w	8001da4 <__retarget_lock_acquire_recursive>
 8001c56:	bf00      	nop
 8001c58:	200000da 	.word	0x200000da

08001c5c <__sinit_lock_release>:
 8001c5c:	4801      	ldr	r0, [pc, #4]	; (8001c64 <__sinit_lock_release+0x8>)
 8001c5e:	f000 b8a2 	b.w	8001da6 <__retarget_lock_release_recursive>
 8001c62:	bf00      	nop
 8001c64:	200000da 	.word	0x200000da

08001c68 <__sinit>:
 8001c68:	b510      	push	{r4, lr}
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	f7ff fff0 	bl	8001c50 <__sinit_lock_acquire>
 8001c70:	69a3      	ldr	r3, [r4, #24]
 8001c72:	b11b      	cbz	r3, 8001c7c <__sinit+0x14>
 8001c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c78:	f7ff bff0 	b.w	8001c5c <__sinit_lock_release>
 8001c7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001c80:	6523      	str	r3, [r4, #80]	; 0x50
 8001c82:	4b13      	ldr	r3, [pc, #76]	; (8001cd0 <__sinit+0x68>)
 8001c84:	4a13      	ldr	r2, [pc, #76]	; (8001cd4 <__sinit+0x6c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	62a2      	str	r2, [r4, #40]	; 0x28
 8001c8a:	42a3      	cmp	r3, r4
 8001c8c:	bf04      	itt	eq
 8001c8e:	2301      	moveq	r3, #1
 8001c90:	61a3      	streq	r3, [r4, #24]
 8001c92:	4620      	mov	r0, r4
 8001c94:	f000 f820 	bl	8001cd8 <__sfp>
 8001c98:	6060      	str	r0, [r4, #4]
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	f000 f81c 	bl	8001cd8 <__sfp>
 8001ca0:	60a0      	str	r0, [r4, #8]
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f000 f818 	bl	8001cd8 <__sfp>
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60e0      	str	r0, [r4, #12]
 8001cac:	2104      	movs	r1, #4
 8001cae:	6860      	ldr	r0, [r4, #4]
 8001cb0:	f7ff ff82 	bl	8001bb8 <std>
 8001cb4:	68a0      	ldr	r0, [r4, #8]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	2109      	movs	r1, #9
 8001cba:	f7ff ff7d 	bl	8001bb8 <std>
 8001cbe:	68e0      	ldr	r0, [r4, #12]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	2112      	movs	r1, #18
 8001cc4:	f7ff ff78 	bl	8001bb8 <std>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61a3      	str	r3, [r4, #24]
 8001ccc:	e7d2      	b.n	8001c74 <__sinit+0xc>
 8001cce:	bf00      	nop
 8001cd0:	080027ec 	.word	0x080027ec
 8001cd4:	08001c01 	.word	0x08001c01

08001cd8 <__sfp>:
 8001cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cda:	4607      	mov	r7, r0
 8001cdc:	f7ff ffac 	bl	8001c38 <__sfp_lock_acquire>
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <__sfp+0x84>)
 8001ce2:	681e      	ldr	r6, [r3, #0]
 8001ce4:	69b3      	ldr	r3, [r6, #24]
 8001ce6:	b913      	cbnz	r3, 8001cee <__sfp+0x16>
 8001ce8:	4630      	mov	r0, r6
 8001cea:	f7ff ffbd 	bl	8001c68 <__sinit>
 8001cee:	3648      	adds	r6, #72	; 0x48
 8001cf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	d503      	bpl.n	8001d00 <__sfp+0x28>
 8001cf8:	6833      	ldr	r3, [r6, #0]
 8001cfa:	b30b      	cbz	r3, 8001d40 <__sfp+0x68>
 8001cfc:	6836      	ldr	r6, [r6, #0]
 8001cfe:	e7f7      	b.n	8001cf0 <__sfp+0x18>
 8001d00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001d04:	b9d5      	cbnz	r5, 8001d3c <__sfp+0x64>
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <__sfp+0x88>)
 8001d08:	60e3      	str	r3, [r4, #12]
 8001d0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001d0e:	6665      	str	r5, [r4, #100]	; 0x64
 8001d10:	f000 f847 	bl	8001da2 <__retarget_lock_init_recursive>
 8001d14:	f7ff ff96 	bl	8001c44 <__sfp_lock_release>
 8001d18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001d1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001d20:	6025      	str	r5, [r4, #0]
 8001d22:	61a5      	str	r5, [r4, #24]
 8001d24:	2208      	movs	r2, #8
 8001d26:	4629      	mov	r1, r5
 8001d28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001d2c:	f7ff fd2c 	bl	8001788 <memset>
 8001d30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001d34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001d38:	4620      	mov	r0, r4
 8001d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d3c:	3468      	adds	r4, #104	; 0x68
 8001d3e:	e7d9      	b.n	8001cf4 <__sfp+0x1c>
 8001d40:	2104      	movs	r1, #4
 8001d42:	4638      	mov	r0, r7
 8001d44:	f7ff ff62 	bl	8001c0c <__sfmoreglue>
 8001d48:	4604      	mov	r4, r0
 8001d4a:	6030      	str	r0, [r6, #0]
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	d1d5      	bne.n	8001cfc <__sfp+0x24>
 8001d50:	f7ff ff78 	bl	8001c44 <__sfp_lock_release>
 8001d54:	230c      	movs	r3, #12
 8001d56:	603b      	str	r3, [r7, #0]
 8001d58:	e7ee      	b.n	8001d38 <__sfp+0x60>
 8001d5a:	bf00      	nop
 8001d5c:	080027ec 	.word	0x080027ec
 8001d60:	ffff0001 	.word	0xffff0001

08001d64 <_fwalk_reent>:
 8001d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d68:	4606      	mov	r6, r0
 8001d6a:	4688      	mov	r8, r1
 8001d6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001d70:	2700      	movs	r7, #0
 8001d72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d76:	f1b9 0901 	subs.w	r9, r9, #1
 8001d7a:	d505      	bpl.n	8001d88 <_fwalk_reent+0x24>
 8001d7c:	6824      	ldr	r4, [r4, #0]
 8001d7e:	2c00      	cmp	r4, #0
 8001d80:	d1f7      	bne.n	8001d72 <_fwalk_reent+0xe>
 8001d82:	4638      	mov	r0, r7
 8001d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d88:	89ab      	ldrh	r3, [r5, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d907      	bls.n	8001d9e <_fwalk_reent+0x3a>
 8001d8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d92:	3301      	adds	r3, #1
 8001d94:	d003      	beq.n	8001d9e <_fwalk_reent+0x3a>
 8001d96:	4629      	mov	r1, r5
 8001d98:	4630      	mov	r0, r6
 8001d9a:	47c0      	blx	r8
 8001d9c:	4307      	orrs	r7, r0
 8001d9e:	3568      	adds	r5, #104	; 0x68
 8001da0:	e7e9      	b.n	8001d76 <_fwalk_reent+0x12>

08001da2 <__retarget_lock_init_recursive>:
 8001da2:	4770      	bx	lr

08001da4 <__retarget_lock_acquire_recursive>:
 8001da4:	4770      	bx	lr

08001da6 <__retarget_lock_release_recursive>:
 8001da6:	4770      	bx	lr

08001da8 <__swhatbuf_r>:
 8001da8:	b570      	push	{r4, r5, r6, lr}
 8001daa:	460e      	mov	r6, r1
 8001dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db0:	2900      	cmp	r1, #0
 8001db2:	b096      	sub	sp, #88	; 0x58
 8001db4:	4614      	mov	r4, r2
 8001db6:	461d      	mov	r5, r3
 8001db8:	da08      	bge.n	8001dcc <__swhatbuf_r+0x24>
 8001dba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	602a      	str	r2, [r5, #0]
 8001dc2:	061a      	lsls	r2, r3, #24
 8001dc4:	d410      	bmi.n	8001de8 <__swhatbuf_r+0x40>
 8001dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dca:	e00e      	b.n	8001dea <__swhatbuf_r+0x42>
 8001dcc:	466a      	mov	r2, sp
 8001dce:	f000 fc95 	bl	80026fc <_fstat_r>
 8001dd2:	2800      	cmp	r0, #0
 8001dd4:	dbf1      	blt.n	8001dba <__swhatbuf_r+0x12>
 8001dd6:	9a01      	ldr	r2, [sp, #4]
 8001dd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ddc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001de0:	425a      	negs	r2, r3
 8001de2:	415a      	adcs	r2, r3
 8001de4:	602a      	str	r2, [r5, #0]
 8001de6:	e7ee      	b.n	8001dc6 <__swhatbuf_r+0x1e>
 8001de8:	2340      	movs	r3, #64	; 0x40
 8001dea:	2000      	movs	r0, #0
 8001dec:	6023      	str	r3, [r4, #0]
 8001dee:	b016      	add	sp, #88	; 0x58
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001df4 <__smakebuf_r>:
 8001df4:	898b      	ldrh	r3, [r1, #12]
 8001df6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001df8:	079d      	lsls	r5, r3, #30
 8001dfa:	4606      	mov	r6, r0
 8001dfc:	460c      	mov	r4, r1
 8001dfe:	d507      	bpl.n	8001e10 <__smakebuf_r+0x1c>
 8001e00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e04:	6023      	str	r3, [r4, #0]
 8001e06:	6123      	str	r3, [r4, #16]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	6163      	str	r3, [r4, #20]
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}
 8001e10:	ab01      	add	r3, sp, #4
 8001e12:	466a      	mov	r2, sp
 8001e14:	f7ff ffc8 	bl	8001da8 <__swhatbuf_r>
 8001e18:	9900      	ldr	r1, [sp, #0]
 8001e1a:	4605      	mov	r5, r0
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f000 f895 	bl	8001f4c <_malloc_r>
 8001e22:	b948      	cbnz	r0, 8001e38 <__smakebuf_r+0x44>
 8001e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e28:	059a      	lsls	r2, r3, #22
 8001e2a:	d4ef      	bmi.n	8001e0c <__smakebuf_r+0x18>
 8001e2c:	f023 0303 	bic.w	r3, r3, #3
 8001e30:	f043 0302 	orr.w	r3, r3, #2
 8001e34:	81a3      	strh	r3, [r4, #12]
 8001e36:	e7e3      	b.n	8001e00 <__smakebuf_r+0xc>
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <__smakebuf_r+0x7c>)
 8001e3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e3c:	89a3      	ldrh	r3, [r4, #12]
 8001e3e:	6020      	str	r0, [r4, #0]
 8001e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e44:	81a3      	strh	r3, [r4, #12]
 8001e46:	9b00      	ldr	r3, [sp, #0]
 8001e48:	6163      	str	r3, [r4, #20]
 8001e4a:	9b01      	ldr	r3, [sp, #4]
 8001e4c:	6120      	str	r0, [r4, #16]
 8001e4e:	b15b      	cbz	r3, 8001e68 <__smakebuf_r+0x74>
 8001e50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e54:	4630      	mov	r0, r6
 8001e56:	f000 fc63 	bl	8002720 <_isatty_r>
 8001e5a:	b128      	cbz	r0, 8001e68 <__smakebuf_r+0x74>
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	81a3      	strh	r3, [r4, #12]
 8001e68:	89a0      	ldrh	r0, [r4, #12]
 8001e6a:	4305      	orrs	r5, r0
 8001e6c:	81a5      	strh	r5, [r4, #12]
 8001e6e:	e7cd      	b.n	8001e0c <__smakebuf_r+0x18>
 8001e70:	08001c01 	.word	0x08001c01

08001e74 <_free_r>:
 8001e74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001e76:	2900      	cmp	r1, #0
 8001e78:	d044      	beq.n	8001f04 <_free_r+0x90>
 8001e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e7e:	9001      	str	r0, [sp, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f1a1 0404 	sub.w	r4, r1, #4
 8001e86:	bfb8      	it	lt
 8001e88:	18e4      	addlt	r4, r4, r3
 8001e8a:	f000 fc6b 	bl	8002764 <__malloc_lock>
 8001e8e:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <_free_r+0x94>)
 8001e90:	9801      	ldr	r0, [sp, #4]
 8001e92:	6813      	ldr	r3, [r2, #0]
 8001e94:	b933      	cbnz	r3, 8001ea4 <_free_r+0x30>
 8001e96:	6063      	str	r3, [r4, #4]
 8001e98:	6014      	str	r4, [r2, #0]
 8001e9a:	b003      	add	sp, #12
 8001e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ea0:	f000 bc66 	b.w	8002770 <__malloc_unlock>
 8001ea4:	42a3      	cmp	r3, r4
 8001ea6:	d908      	bls.n	8001eba <_free_r+0x46>
 8001ea8:	6825      	ldr	r5, [r4, #0]
 8001eaa:	1961      	adds	r1, r4, r5
 8001eac:	428b      	cmp	r3, r1
 8001eae:	bf01      	itttt	eq
 8001eb0:	6819      	ldreq	r1, [r3, #0]
 8001eb2:	685b      	ldreq	r3, [r3, #4]
 8001eb4:	1949      	addeq	r1, r1, r5
 8001eb6:	6021      	streq	r1, [r4, #0]
 8001eb8:	e7ed      	b.n	8001e96 <_free_r+0x22>
 8001eba:	461a      	mov	r2, r3
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	b10b      	cbz	r3, 8001ec4 <_free_r+0x50>
 8001ec0:	42a3      	cmp	r3, r4
 8001ec2:	d9fa      	bls.n	8001eba <_free_r+0x46>
 8001ec4:	6811      	ldr	r1, [r2, #0]
 8001ec6:	1855      	adds	r5, r2, r1
 8001ec8:	42a5      	cmp	r5, r4
 8001eca:	d10b      	bne.n	8001ee4 <_free_r+0x70>
 8001ecc:	6824      	ldr	r4, [r4, #0]
 8001ece:	4421      	add	r1, r4
 8001ed0:	1854      	adds	r4, r2, r1
 8001ed2:	42a3      	cmp	r3, r4
 8001ed4:	6011      	str	r1, [r2, #0]
 8001ed6:	d1e0      	bne.n	8001e9a <_free_r+0x26>
 8001ed8:	681c      	ldr	r4, [r3, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	6053      	str	r3, [r2, #4]
 8001ede:	4421      	add	r1, r4
 8001ee0:	6011      	str	r1, [r2, #0]
 8001ee2:	e7da      	b.n	8001e9a <_free_r+0x26>
 8001ee4:	d902      	bls.n	8001eec <_free_r+0x78>
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	6003      	str	r3, [r0, #0]
 8001eea:	e7d6      	b.n	8001e9a <_free_r+0x26>
 8001eec:	6825      	ldr	r5, [r4, #0]
 8001eee:	1961      	adds	r1, r4, r5
 8001ef0:	428b      	cmp	r3, r1
 8001ef2:	bf04      	itt	eq
 8001ef4:	6819      	ldreq	r1, [r3, #0]
 8001ef6:	685b      	ldreq	r3, [r3, #4]
 8001ef8:	6063      	str	r3, [r4, #4]
 8001efa:	bf04      	itt	eq
 8001efc:	1949      	addeq	r1, r1, r5
 8001efe:	6021      	streq	r1, [r4, #0]
 8001f00:	6054      	str	r4, [r2, #4]
 8001f02:	e7ca      	b.n	8001e9a <_free_r+0x26>
 8001f04:	b003      	add	sp, #12
 8001f06:	bd30      	pop	{r4, r5, pc}
 8001f08:	200000dc 	.word	0x200000dc

08001f0c <sbrk_aligned>:
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	4e0e      	ldr	r6, [pc, #56]	; (8001f48 <sbrk_aligned+0x3c>)
 8001f10:	460c      	mov	r4, r1
 8001f12:	6831      	ldr	r1, [r6, #0]
 8001f14:	4605      	mov	r5, r0
 8001f16:	b911      	cbnz	r1, 8001f1e <sbrk_aligned+0x12>
 8001f18:	f000 fb7a 	bl	8002610 <_sbrk_r>
 8001f1c:	6030      	str	r0, [r6, #0]
 8001f1e:	4621      	mov	r1, r4
 8001f20:	4628      	mov	r0, r5
 8001f22:	f000 fb75 	bl	8002610 <_sbrk_r>
 8001f26:	1c43      	adds	r3, r0, #1
 8001f28:	d00a      	beq.n	8001f40 <sbrk_aligned+0x34>
 8001f2a:	1cc4      	adds	r4, r0, #3
 8001f2c:	f024 0403 	bic.w	r4, r4, #3
 8001f30:	42a0      	cmp	r0, r4
 8001f32:	d007      	beq.n	8001f44 <sbrk_aligned+0x38>
 8001f34:	1a21      	subs	r1, r4, r0
 8001f36:	4628      	mov	r0, r5
 8001f38:	f000 fb6a 	bl	8002610 <_sbrk_r>
 8001f3c:	3001      	adds	r0, #1
 8001f3e:	d101      	bne.n	8001f44 <sbrk_aligned+0x38>
 8001f40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f44:	4620      	mov	r0, r4
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	200000e0 	.word	0x200000e0

08001f4c <_malloc_r>:
 8001f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f50:	1ccd      	adds	r5, r1, #3
 8001f52:	f025 0503 	bic.w	r5, r5, #3
 8001f56:	3508      	adds	r5, #8
 8001f58:	2d0c      	cmp	r5, #12
 8001f5a:	bf38      	it	cc
 8001f5c:	250c      	movcc	r5, #12
 8001f5e:	2d00      	cmp	r5, #0
 8001f60:	4607      	mov	r7, r0
 8001f62:	db01      	blt.n	8001f68 <_malloc_r+0x1c>
 8001f64:	42a9      	cmp	r1, r5
 8001f66:	d905      	bls.n	8001f74 <_malloc_r+0x28>
 8001f68:	230c      	movs	r3, #12
 8001f6a:	603b      	str	r3, [r7, #0]
 8001f6c:	2600      	movs	r6, #0
 8001f6e:	4630      	mov	r0, r6
 8001f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f74:	4e2e      	ldr	r6, [pc, #184]	; (8002030 <_malloc_r+0xe4>)
 8001f76:	f000 fbf5 	bl	8002764 <__malloc_lock>
 8001f7a:	6833      	ldr	r3, [r6, #0]
 8001f7c:	461c      	mov	r4, r3
 8001f7e:	bb34      	cbnz	r4, 8001fce <_malloc_r+0x82>
 8001f80:	4629      	mov	r1, r5
 8001f82:	4638      	mov	r0, r7
 8001f84:	f7ff ffc2 	bl	8001f0c <sbrk_aligned>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	d14d      	bne.n	800202a <_malloc_r+0xde>
 8001f8e:	6834      	ldr	r4, [r6, #0]
 8001f90:	4626      	mov	r6, r4
 8001f92:	2e00      	cmp	r6, #0
 8001f94:	d140      	bne.n	8002018 <_malloc_r+0xcc>
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	4631      	mov	r1, r6
 8001f9a:	4638      	mov	r0, r7
 8001f9c:	eb04 0803 	add.w	r8, r4, r3
 8001fa0:	f000 fb36 	bl	8002610 <_sbrk_r>
 8001fa4:	4580      	cmp	r8, r0
 8001fa6:	d13a      	bne.n	800201e <_malloc_r+0xd2>
 8001fa8:	6821      	ldr	r1, [r4, #0]
 8001faa:	3503      	adds	r5, #3
 8001fac:	1a6d      	subs	r5, r5, r1
 8001fae:	f025 0503 	bic.w	r5, r5, #3
 8001fb2:	3508      	adds	r5, #8
 8001fb4:	2d0c      	cmp	r5, #12
 8001fb6:	bf38      	it	cc
 8001fb8:	250c      	movcc	r5, #12
 8001fba:	4629      	mov	r1, r5
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	f7ff ffa5 	bl	8001f0c <sbrk_aligned>
 8001fc2:	3001      	adds	r0, #1
 8001fc4:	d02b      	beq.n	800201e <_malloc_r+0xd2>
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	442b      	add	r3, r5
 8001fca:	6023      	str	r3, [r4, #0]
 8001fcc:	e00e      	b.n	8001fec <_malloc_r+0xa0>
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	1b52      	subs	r2, r2, r5
 8001fd2:	d41e      	bmi.n	8002012 <_malloc_r+0xc6>
 8001fd4:	2a0b      	cmp	r2, #11
 8001fd6:	d916      	bls.n	8002006 <_malloc_r+0xba>
 8001fd8:	1961      	adds	r1, r4, r5
 8001fda:	42a3      	cmp	r3, r4
 8001fdc:	6025      	str	r5, [r4, #0]
 8001fde:	bf18      	it	ne
 8001fe0:	6059      	strne	r1, [r3, #4]
 8001fe2:	6863      	ldr	r3, [r4, #4]
 8001fe4:	bf08      	it	eq
 8001fe6:	6031      	streq	r1, [r6, #0]
 8001fe8:	5162      	str	r2, [r4, r5]
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	4638      	mov	r0, r7
 8001fee:	f104 060b 	add.w	r6, r4, #11
 8001ff2:	f000 fbbd 	bl	8002770 <__malloc_unlock>
 8001ff6:	f026 0607 	bic.w	r6, r6, #7
 8001ffa:	1d23      	adds	r3, r4, #4
 8001ffc:	1af2      	subs	r2, r6, r3
 8001ffe:	d0b6      	beq.n	8001f6e <_malloc_r+0x22>
 8002000:	1b9b      	subs	r3, r3, r6
 8002002:	50a3      	str	r3, [r4, r2]
 8002004:	e7b3      	b.n	8001f6e <_malloc_r+0x22>
 8002006:	6862      	ldr	r2, [r4, #4]
 8002008:	42a3      	cmp	r3, r4
 800200a:	bf0c      	ite	eq
 800200c:	6032      	streq	r2, [r6, #0]
 800200e:	605a      	strne	r2, [r3, #4]
 8002010:	e7ec      	b.n	8001fec <_malloc_r+0xa0>
 8002012:	4623      	mov	r3, r4
 8002014:	6864      	ldr	r4, [r4, #4]
 8002016:	e7b2      	b.n	8001f7e <_malloc_r+0x32>
 8002018:	4634      	mov	r4, r6
 800201a:	6876      	ldr	r6, [r6, #4]
 800201c:	e7b9      	b.n	8001f92 <_malloc_r+0x46>
 800201e:	230c      	movs	r3, #12
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4638      	mov	r0, r7
 8002024:	f000 fba4 	bl	8002770 <__malloc_unlock>
 8002028:	e7a1      	b.n	8001f6e <_malloc_r+0x22>
 800202a:	6025      	str	r5, [r4, #0]
 800202c:	e7de      	b.n	8001fec <_malloc_r+0xa0>
 800202e:	bf00      	nop
 8002030:	200000dc 	.word	0x200000dc

08002034 <__sfputc_r>:
 8002034:	6893      	ldr	r3, [r2, #8]
 8002036:	3b01      	subs	r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	b410      	push	{r4}
 800203c:	6093      	str	r3, [r2, #8]
 800203e:	da08      	bge.n	8002052 <__sfputc_r+0x1e>
 8002040:	6994      	ldr	r4, [r2, #24]
 8002042:	42a3      	cmp	r3, r4
 8002044:	db01      	blt.n	800204a <__sfputc_r+0x16>
 8002046:	290a      	cmp	r1, #10
 8002048:	d103      	bne.n	8002052 <__sfputc_r+0x1e>
 800204a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800204e:	f7ff bc31 	b.w	80018b4 <__swbuf_r>
 8002052:	6813      	ldr	r3, [r2, #0]
 8002054:	1c58      	adds	r0, r3, #1
 8002056:	6010      	str	r0, [r2, #0]
 8002058:	7019      	strb	r1, [r3, #0]
 800205a:	4608      	mov	r0, r1
 800205c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002060:	4770      	bx	lr

08002062 <__sfputs_r>:
 8002062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002064:	4606      	mov	r6, r0
 8002066:	460f      	mov	r7, r1
 8002068:	4614      	mov	r4, r2
 800206a:	18d5      	adds	r5, r2, r3
 800206c:	42ac      	cmp	r4, r5
 800206e:	d101      	bne.n	8002074 <__sfputs_r+0x12>
 8002070:	2000      	movs	r0, #0
 8002072:	e007      	b.n	8002084 <__sfputs_r+0x22>
 8002074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002078:	463a      	mov	r2, r7
 800207a:	4630      	mov	r0, r6
 800207c:	f7ff ffda 	bl	8002034 <__sfputc_r>
 8002080:	1c43      	adds	r3, r0, #1
 8002082:	d1f3      	bne.n	800206c <__sfputs_r+0xa>
 8002084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002088 <_vfiprintf_r>:
 8002088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208c:	460d      	mov	r5, r1
 800208e:	b09d      	sub	sp, #116	; 0x74
 8002090:	4614      	mov	r4, r2
 8002092:	4698      	mov	r8, r3
 8002094:	4606      	mov	r6, r0
 8002096:	b118      	cbz	r0, 80020a0 <_vfiprintf_r+0x18>
 8002098:	6983      	ldr	r3, [r0, #24]
 800209a:	b90b      	cbnz	r3, 80020a0 <_vfiprintf_r+0x18>
 800209c:	f7ff fde4 	bl	8001c68 <__sinit>
 80020a0:	4b89      	ldr	r3, [pc, #548]	; (80022c8 <_vfiprintf_r+0x240>)
 80020a2:	429d      	cmp	r5, r3
 80020a4:	d11b      	bne.n	80020de <_vfiprintf_r+0x56>
 80020a6:	6875      	ldr	r5, [r6, #4]
 80020a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020aa:	07d9      	lsls	r1, r3, #31
 80020ac:	d405      	bmi.n	80020ba <_vfiprintf_r+0x32>
 80020ae:	89ab      	ldrh	r3, [r5, #12]
 80020b0:	059a      	lsls	r2, r3, #22
 80020b2:	d402      	bmi.n	80020ba <_vfiprintf_r+0x32>
 80020b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020b6:	f7ff fe75 	bl	8001da4 <__retarget_lock_acquire_recursive>
 80020ba:	89ab      	ldrh	r3, [r5, #12]
 80020bc:	071b      	lsls	r3, r3, #28
 80020be:	d501      	bpl.n	80020c4 <_vfiprintf_r+0x3c>
 80020c0:	692b      	ldr	r3, [r5, #16]
 80020c2:	b9eb      	cbnz	r3, 8002100 <_vfiprintf_r+0x78>
 80020c4:	4629      	mov	r1, r5
 80020c6:	4630      	mov	r0, r6
 80020c8:	f7ff fc46 	bl	8001958 <__swsetup_r>
 80020cc:	b1c0      	cbz	r0, 8002100 <_vfiprintf_r+0x78>
 80020ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020d0:	07dc      	lsls	r4, r3, #31
 80020d2:	d50e      	bpl.n	80020f2 <_vfiprintf_r+0x6a>
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020d8:	b01d      	add	sp, #116	; 0x74
 80020da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020de:	4b7b      	ldr	r3, [pc, #492]	; (80022cc <_vfiprintf_r+0x244>)
 80020e0:	429d      	cmp	r5, r3
 80020e2:	d101      	bne.n	80020e8 <_vfiprintf_r+0x60>
 80020e4:	68b5      	ldr	r5, [r6, #8]
 80020e6:	e7df      	b.n	80020a8 <_vfiprintf_r+0x20>
 80020e8:	4b79      	ldr	r3, [pc, #484]	; (80022d0 <_vfiprintf_r+0x248>)
 80020ea:	429d      	cmp	r5, r3
 80020ec:	bf08      	it	eq
 80020ee:	68f5      	ldreq	r5, [r6, #12]
 80020f0:	e7da      	b.n	80020a8 <_vfiprintf_r+0x20>
 80020f2:	89ab      	ldrh	r3, [r5, #12]
 80020f4:	0598      	lsls	r0, r3, #22
 80020f6:	d4ed      	bmi.n	80020d4 <_vfiprintf_r+0x4c>
 80020f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020fa:	f7ff fe54 	bl	8001da6 <__retarget_lock_release_recursive>
 80020fe:	e7e9      	b.n	80020d4 <_vfiprintf_r+0x4c>
 8002100:	2300      	movs	r3, #0
 8002102:	9309      	str	r3, [sp, #36]	; 0x24
 8002104:	2320      	movs	r3, #32
 8002106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800210a:	f8cd 800c 	str.w	r8, [sp, #12]
 800210e:	2330      	movs	r3, #48	; 0x30
 8002110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80022d4 <_vfiprintf_r+0x24c>
 8002114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002118:	f04f 0901 	mov.w	r9, #1
 800211c:	4623      	mov	r3, r4
 800211e:	469a      	mov	sl, r3
 8002120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002124:	b10a      	cbz	r2, 800212a <_vfiprintf_r+0xa2>
 8002126:	2a25      	cmp	r2, #37	; 0x25
 8002128:	d1f9      	bne.n	800211e <_vfiprintf_r+0x96>
 800212a:	ebba 0b04 	subs.w	fp, sl, r4
 800212e:	d00b      	beq.n	8002148 <_vfiprintf_r+0xc0>
 8002130:	465b      	mov	r3, fp
 8002132:	4622      	mov	r2, r4
 8002134:	4629      	mov	r1, r5
 8002136:	4630      	mov	r0, r6
 8002138:	f7ff ff93 	bl	8002062 <__sfputs_r>
 800213c:	3001      	adds	r0, #1
 800213e:	f000 80aa 	beq.w	8002296 <_vfiprintf_r+0x20e>
 8002142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002144:	445a      	add	r2, fp
 8002146:	9209      	str	r2, [sp, #36]	; 0x24
 8002148:	f89a 3000 	ldrb.w	r3, [sl]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a2 	beq.w	8002296 <_vfiprintf_r+0x20e>
 8002152:	2300      	movs	r3, #0
 8002154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800215c:	f10a 0a01 	add.w	sl, sl, #1
 8002160:	9304      	str	r3, [sp, #16]
 8002162:	9307      	str	r3, [sp, #28]
 8002164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002168:	931a      	str	r3, [sp, #104]	; 0x68
 800216a:	4654      	mov	r4, sl
 800216c:	2205      	movs	r2, #5
 800216e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002172:	4858      	ldr	r0, [pc, #352]	; (80022d4 <_vfiprintf_r+0x24c>)
 8002174:	f7fe f84c 	bl	8000210 <memchr>
 8002178:	9a04      	ldr	r2, [sp, #16]
 800217a:	b9d8      	cbnz	r0, 80021b4 <_vfiprintf_r+0x12c>
 800217c:	06d1      	lsls	r1, r2, #27
 800217e:	bf44      	itt	mi
 8002180:	2320      	movmi	r3, #32
 8002182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002186:	0713      	lsls	r3, r2, #28
 8002188:	bf44      	itt	mi
 800218a:	232b      	movmi	r3, #43	; 0x2b
 800218c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002190:	f89a 3000 	ldrb.w	r3, [sl]
 8002194:	2b2a      	cmp	r3, #42	; 0x2a
 8002196:	d015      	beq.n	80021c4 <_vfiprintf_r+0x13c>
 8002198:	9a07      	ldr	r2, [sp, #28]
 800219a:	4654      	mov	r4, sl
 800219c:	2000      	movs	r0, #0
 800219e:	f04f 0c0a 	mov.w	ip, #10
 80021a2:	4621      	mov	r1, r4
 80021a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021a8:	3b30      	subs	r3, #48	; 0x30
 80021aa:	2b09      	cmp	r3, #9
 80021ac:	d94e      	bls.n	800224c <_vfiprintf_r+0x1c4>
 80021ae:	b1b0      	cbz	r0, 80021de <_vfiprintf_r+0x156>
 80021b0:	9207      	str	r2, [sp, #28]
 80021b2:	e014      	b.n	80021de <_vfiprintf_r+0x156>
 80021b4:	eba0 0308 	sub.w	r3, r0, r8
 80021b8:	fa09 f303 	lsl.w	r3, r9, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	9304      	str	r3, [sp, #16]
 80021c0:	46a2      	mov	sl, r4
 80021c2:	e7d2      	b.n	800216a <_vfiprintf_r+0xe2>
 80021c4:	9b03      	ldr	r3, [sp, #12]
 80021c6:	1d19      	adds	r1, r3, #4
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	9103      	str	r1, [sp, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bfbb      	ittet	lt
 80021d0:	425b      	neglt	r3, r3
 80021d2:	f042 0202 	orrlt.w	r2, r2, #2
 80021d6:	9307      	strge	r3, [sp, #28]
 80021d8:	9307      	strlt	r3, [sp, #28]
 80021da:	bfb8      	it	lt
 80021dc:	9204      	strlt	r2, [sp, #16]
 80021de:	7823      	ldrb	r3, [r4, #0]
 80021e0:	2b2e      	cmp	r3, #46	; 0x2e
 80021e2:	d10c      	bne.n	80021fe <_vfiprintf_r+0x176>
 80021e4:	7863      	ldrb	r3, [r4, #1]
 80021e6:	2b2a      	cmp	r3, #42	; 0x2a
 80021e8:	d135      	bne.n	8002256 <_vfiprintf_r+0x1ce>
 80021ea:	9b03      	ldr	r3, [sp, #12]
 80021ec:	1d1a      	adds	r2, r3, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	9203      	str	r2, [sp, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bfb8      	it	lt
 80021f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80021fa:	3402      	adds	r4, #2
 80021fc:	9305      	str	r3, [sp, #20]
 80021fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80022e4 <_vfiprintf_r+0x25c>
 8002202:	7821      	ldrb	r1, [r4, #0]
 8002204:	2203      	movs	r2, #3
 8002206:	4650      	mov	r0, sl
 8002208:	f7fe f802 	bl	8000210 <memchr>
 800220c:	b140      	cbz	r0, 8002220 <_vfiprintf_r+0x198>
 800220e:	2340      	movs	r3, #64	; 0x40
 8002210:	eba0 000a 	sub.w	r0, r0, sl
 8002214:	fa03 f000 	lsl.w	r0, r3, r0
 8002218:	9b04      	ldr	r3, [sp, #16]
 800221a:	4303      	orrs	r3, r0
 800221c:	3401      	adds	r4, #1
 800221e:	9304      	str	r3, [sp, #16]
 8002220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002224:	482c      	ldr	r0, [pc, #176]	; (80022d8 <_vfiprintf_r+0x250>)
 8002226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800222a:	2206      	movs	r2, #6
 800222c:	f7fd fff0 	bl	8000210 <memchr>
 8002230:	2800      	cmp	r0, #0
 8002232:	d03f      	beq.n	80022b4 <_vfiprintf_r+0x22c>
 8002234:	4b29      	ldr	r3, [pc, #164]	; (80022dc <_vfiprintf_r+0x254>)
 8002236:	bb1b      	cbnz	r3, 8002280 <_vfiprintf_r+0x1f8>
 8002238:	9b03      	ldr	r3, [sp, #12]
 800223a:	3307      	adds	r3, #7
 800223c:	f023 0307 	bic.w	r3, r3, #7
 8002240:	3308      	adds	r3, #8
 8002242:	9303      	str	r3, [sp, #12]
 8002244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002246:	443b      	add	r3, r7
 8002248:	9309      	str	r3, [sp, #36]	; 0x24
 800224a:	e767      	b.n	800211c <_vfiprintf_r+0x94>
 800224c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002250:	460c      	mov	r4, r1
 8002252:	2001      	movs	r0, #1
 8002254:	e7a5      	b.n	80021a2 <_vfiprintf_r+0x11a>
 8002256:	2300      	movs	r3, #0
 8002258:	3401      	adds	r4, #1
 800225a:	9305      	str	r3, [sp, #20]
 800225c:	4619      	mov	r1, r3
 800225e:	f04f 0c0a 	mov.w	ip, #10
 8002262:	4620      	mov	r0, r4
 8002264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002268:	3a30      	subs	r2, #48	; 0x30
 800226a:	2a09      	cmp	r2, #9
 800226c:	d903      	bls.n	8002276 <_vfiprintf_r+0x1ee>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0c5      	beq.n	80021fe <_vfiprintf_r+0x176>
 8002272:	9105      	str	r1, [sp, #20]
 8002274:	e7c3      	b.n	80021fe <_vfiprintf_r+0x176>
 8002276:	fb0c 2101 	mla	r1, ip, r1, r2
 800227a:	4604      	mov	r4, r0
 800227c:	2301      	movs	r3, #1
 800227e:	e7f0      	b.n	8002262 <_vfiprintf_r+0x1da>
 8002280:	ab03      	add	r3, sp, #12
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	462a      	mov	r2, r5
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <_vfiprintf_r+0x258>)
 8002288:	a904      	add	r1, sp, #16
 800228a:	4630      	mov	r0, r6
 800228c:	f3af 8000 	nop.w
 8002290:	4607      	mov	r7, r0
 8002292:	1c78      	adds	r0, r7, #1
 8002294:	d1d6      	bne.n	8002244 <_vfiprintf_r+0x1bc>
 8002296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002298:	07d9      	lsls	r1, r3, #31
 800229a:	d405      	bmi.n	80022a8 <_vfiprintf_r+0x220>
 800229c:	89ab      	ldrh	r3, [r5, #12]
 800229e:	059a      	lsls	r2, r3, #22
 80022a0:	d402      	bmi.n	80022a8 <_vfiprintf_r+0x220>
 80022a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022a4:	f7ff fd7f 	bl	8001da6 <__retarget_lock_release_recursive>
 80022a8:	89ab      	ldrh	r3, [r5, #12]
 80022aa:	065b      	lsls	r3, r3, #25
 80022ac:	f53f af12 	bmi.w	80020d4 <_vfiprintf_r+0x4c>
 80022b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022b2:	e711      	b.n	80020d8 <_vfiprintf_r+0x50>
 80022b4:	ab03      	add	r3, sp, #12
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	462a      	mov	r2, r5
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <_vfiprintf_r+0x258>)
 80022bc:	a904      	add	r1, sp, #16
 80022be:	4630      	mov	r0, r6
 80022c0:	f000 f880 	bl	80023c4 <_printf_i>
 80022c4:	e7e4      	b.n	8002290 <_vfiprintf_r+0x208>
 80022c6:	bf00      	nop
 80022c8:	08002810 	.word	0x08002810
 80022cc:	08002830 	.word	0x08002830
 80022d0:	080027f0 	.word	0x080027f0
 80022d4:	08002850 	.word	0x08002850
 80022d8:	0800285a 	.word	0x0800285a
 80022dc:	00000000 	.word	0x00000000
 80022e0:	08002063 	.word	0x08002063
 80022e4:	08002856 	.word	0x08002856

080022e8 <_printf_common>:
 80022e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022ec:	4616      	mov	r6, r2
 80022ee:	4699      	mov	r9, r3
 80022f0:	688a      	ldr	r2, [r1, #8]
 80022f2:	690b      	ldr	r3, [r1, #16]
 80022f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022f8:	4293      	cmp	r3, r2
 80022fa:	bfb8      	it	lt
 80022fc:	4613      	movlt	r3, r2
 80022fe:	6033      	str	r3, [r6, #0]
 8002300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002304:	4607      	mov	r7, r0
 8002306:	460c      	mov	r4, r1
 8002308:	b10a      	cbz	r2, 800230e <_printf_common+0x26>
 800230a:	3301      	adds	r3, #1
 800230c:	6033      	str	r3, [r6, #0]
 800230e:	6823      	ldr	r3, [r4, #0]
 8002310:	0699      	lsls	r1, r3, #26
 8002312:	bf42      	ittt	mi
 8002314:	6833      	ldrmi	r3, [r6, #0]
 8002316:	3302      	addmi	r3, #2
 8002318:	6033      	strmi	r3, [r6, #0]
 800231a:	6825      	ldr	r5, [r4, #0]
 800231c:	f015 0506 	ands.w	r5, r5, #6
 8002320:	d106      	bne.n	8002330 <_printf_common+0x48>
 8002322:	f104 0a19 	add.w	sl, r4, #25
 8002326:	68e3      	ldr	r3, [r4, #12]
 8002328:	6832      	ldr	r2, [r6, #0]
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	42ab      	cmp	r3, r5
 800232e:	dc26      	bgt.n	800237e <_printf_common+0x96>
 8002330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002334:	1e13      	subs	r3, r2, #0
 8002336:	6822      	ldr	r2, [r4, #0]
 8002338:	bf18      	it	ne
 800233a:	2301      	movne	r3, #1
 800233c:	0692      	lsls	r2, r2, #26
 800233e:	d42b      	bmi.n	8002398 <_printf_common+0xb0>
 8002340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002344:	4649      	mov	r1, r9
 8002346:	4638      	mov	r0, r7
 8002348:	47c0      	blx	r8
 800234a:	3001      	adds	r0, #1
 800234c:	d01e      	beq.n	800238c <_printf_common+0xa4>
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	68e5      	ldr	r5, [r4, #12]
 8002352:	6832      	ldr	r2, [r6, #0]
 8002354:	f003 0306 	and.w	r3, r3, #6
 8002358:	2b04      	cmp	r3, #4
 800235a:	bf08      	it	eq
 800235c:	1aad      	subeq	r5, r5, r2
 800235e:	68a3      	ldr	r3, [r4, #8]
 8002360:	6922      	ldr	r2, [r4, #16]
 8002362:	bf0c      	ite	eq
 8002364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002368:	2500      	movne	r5, #0
 800236a:	4293      	cmp	r3, r2
 800236c:	bfc4      	itt	gt
 800236e:	1a9b      	subgt	r3, r3, r2
 8002370:	18ed      	addgt	r5, r5, r3
 8002372:	2600      	movs	r6, #0
 8002374:	341a      	adds	r4, #26
 8002376:	42b5      	cmp	r5, r6
 8002378:	d11a      	bne.n	80023b0 <_printf_common+0xc8>
 800237a:	2000      	movs	r0, #0
 800237c:	e008      	b.n	8002390 <_printf_common+0xa8>
 800237e:	2301      	movs	r3, #1
 8002380:	4652      	mov	r2, sl
 8002382:	4649      	mov	r1, r9
 8002384:	4638      	mov	r0, r7
 8002386:	47c0      	blx	r8
 8002388:	3001      	adds	r0, #1
 800238a:	d103      	bne.n	8002394 <_printf_common+0xac>
 800238c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002394:	3501      	adds	r5, #1
 8002396:	e7c6      	b.n	8002326 <_printf_common+0x3e>
 8002398:	18e1      	adds	r1, r4, r3
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	2030      	movs	r0, #48	; 0x30
 800239e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023a2:	4422      	add	r2, r4
 80023a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023ac:	3302      	adds	r3, #2
 80023ae:	e7c7      	b.n	8002340 <_printf_common+0x58>
 80023b0:	2301      	movs	r3, #1
 80023b2:	4622      	mov	r2, r4
 80023b4:	4649      	mov	r1, r9
 80023b6:	4638      	mov	r0, r7
 80023b8:	47c0      	blx	r8
 80023ba:	3001      	adds	r0, #1
 80023bc:	d0e6      	beq.n	800238c <_printf_common+0xa4>
 80023be:	3601      	adds	r6, #1
 80023c0:	e7d9      	b.n	8002376 <_printf_common+0x8e>
	...

080023c4 <_printf_i>:
 80023c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023c8:	7e0f      	ldrb	r7, [r1, #24]
 80023ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023cc:	2f78      	cmp	r7, #120	; 0x78
 80023ce:	4691      	mov	r9, r2
 80023d0:	4680      	mov	r8, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	469a      	mov	sl, r3
 80023d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023da:	d807      	bhi.n	80023ec <_printf_i+0x28>
 80023dc:	2f62      	cmp	r7, #98	; 0x62
 80023de:	d80a      	bhi.n	80023f6 <_printf_i+0x32>
 80023e0:	2f00      	cmp	r7, #0
 80023e2:	f000 80d8 	beq.w	8002596 <_printf_i+0x1d2>
 80023e6:	2f58      	cmp	r7, #88	; 0x58
 80023e8:	f000 80a3 	beq.w	8002532 <_printf_i+0x16e>
 80023ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023f4:	e03a      	b.n	800246c <_printf_i+0xa8>
 80023f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023fa:	2b15      	cmp	r3, #21
 80023fc:	d8f6      	bhi.n	80023ec <_printf_i+0x28>
 80023fe:	a101      	add	r1, pc, #4	; (adr r1, 8002404 <_printf_i+0x40>)
 8002400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002404:	0800245d 	.word	0x0800245d
 8002408:	08002471 	.word	0x08002471
 800240c:	080023ed 	.word	0x080023ed
 8002410:	080023ed 	.word	0x080023ed
 8002414:	080023ed 	.word	0x080023ed
 8002418:	080023ed 	.word	0x080023ed
 800241c:	08002471 	.word	0x08002471
 8002420:	080023ed 	.word	0x080023ed
 8002424:	080023ed 	.word	0x080023ed
 8002428:	080023ed 	.word	0x080023ed
 800242c:	080023ed 	.word	0x080023ed
 8002430:	0800257d 	.word	0x0800257d
 8002434:	080024a1 	.word	0x080024a1
 8002438:	0800255f 	.word	0x0800255f
 800243c:	080023ed 	.word	0x080023ed
 8002440:	080023ed 	.word	0x080023ed
 8002444:	0800259f 	.word	0x0800259f
 8002448:	080023ed 	.word	0x080023ed
 800244c:	080024a1 	.word	0x080024a1
 8002450:	080023ed 	.word	0x080023ed
 8002454:	080023ed 	.word	0x080023ed
 8002458:	08002567 	.word	0x08002567
 800245c:	682b      	ldr	r3, [r5, #0]
 800245e:	1d1a      	adds	r2, r3, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	602a      	str	r2, [r5, #0]
 8002464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800246c:	2301      	movs	r3, #1
 800246e:	e0a3      	b.n	80025b8 <_printf_i+0x1f4>
 8002470:	6820      	ldr	r0, [r4, #0]
 8002472:	6829      	ldr	r1, [r5, #0]
 8002474:	0606      	lsls	r6, r0, #24
 8002476:	f101 0304 	add.w	r3, r1, #4
 800247a:	d50a      	bpl.n	8002492 <_printf_i+0xce>
 800247c:	680e      	ldr	r6, [r1, #0]
 800247e:	602b      	str	r3, [r5, #0]
 8002480:	2e00      	cmp	r6, #0
 8002482:	da03      	bge.n	800248c <_printf_i+0xc8>
 8002484:	232d      	movs	r3, #45	; 0x2d
 8002486:	4276      	negs	r6, r6
 8002488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248c:	485e      	ldr	r0, [pc, #376]	; (8002608 <_printf_i+0x244>)
 800248e:	230a      	movs	r3, #10
 8002490:	e019      	b.n	80024c6 <_printf_i+0x102>
 8002492:	680e      	ldr	r6, [r1, #0]
 8002494:	602b      	str	r3, [r5, #0]
 8002496:	f010 0f40 	tst.w	r0, #64	; 0x40
 800249a:	bf18      	it	ne
 800249c:	b236      	sxthne	r6, r6
 800249e:	e7ef      	b.n	8002480 <_printf_i+0xbc>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	6820      	ldr	r0, [r4, #0]
 80024a4:	1d19      	adds	r1, r3, #4
 80024a6:	6029      	str	r1, [r5, #0]
 80024a8:	0601      	lsls	r1, r0, #24
 80024aa:	d501      	bpl.n	80024b0 <_printf_i+0xec>
 80024ac:	681e      	ldr	r6, [r3, #0]
 80024ae:	e002      	b.n	80024b6 <_printf_i+0xf2>
 80024b0:	0646      	lsls	r6, r0, #25
 80024b2:	d5fb      	bpl.n	80024ac <_printf_i+0xe8>
 80024b4:	881e      	ldrh	r6, [r3, #0]
 80024b6:	4854      	ldr	r0, [pc, #336]	; (8002608 <_printf_i+0x244>)
 80024b8:	2f6f      	cmp	r7, #111	; 0x6f
 80024ba:	bf0c      	ite	eq
 80024bc:	2308      	moveq	r3, #8
 80024be:	230a      	movne	r3, #10
 80024c0:	2100      	movs	r1, #0
 80024c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024c6:	6865      	ldr	r5, [r4, #4]
 80024c8:	60a5      	str	r5, [r4, #8]
 80024ca:	2d00      	cmp	r5, #0
 80024cc:	bfa2      	ittt	ge
 80024ce:	6821      	ldrge	r1, [r4, #0]
 80024d0:	f021 0104 	bicge.w	r1, r1, #4
 80024d4:	6021      	strge	r1, [r4, #0]
 80024d6:	b90e      	cbnz	r6, 80024dc <_printf_i+0x118>
 80024d8:	2d00      	cmp	r5, #0
 80024da:	d04d      	beq.n	8002578 <_printf_i+0x1b4>
 80024dc:	4615      	mov	r5, r2
 80024de:	fbb6 f1f3 	udiv	r1, r6, r3
 80024e2:	fb03 6711 	mls	r7, r3, r1, r6
 80024e6:	5dc7      	ldrb	r7, [r0, r7]
 80024e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024ec:	4637      	mov	r7, r6
 80024ee:	42bb      	cmp	r3, r7
 80024f0:	460e      	mov	r6, r1
 80024f2:	d9f4      	bls.n	80024de <_printf_i+0x11a>
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d10b      	bne.n	8002510 <_printf_i+0x14c>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	07de      	lsls	r6, r3, #31
 80024fc:	d508      	bpl.n	8002510 <_printf_i+0x14c>
 80024fe:	6923      	ldr	r3, [r4, #16]
 8002500:	6861      	ldr	r1, [r4, #4]
 8002502:	4299      	cmp	r1, r3
 8002504:	bfde      	ittt	le
 8002506:	2330      	movle	r3, #48	; 0x30
 8002508:	f805 3c01 	strble.w	r3, [r5, #-1]
 800250c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002510:	1b52      	subs	r2, r2, r5
 8002512:	6122      	str	r2, [r4, #16]
 8002514:	f8cd a000 	str.w	sl, [sp]
 8002518:	464b      	mov	r3, r9
 800251a:	aa03      	add	r2, sp, #12
 800251c:	4621      	mov	r1, r4
 800251e:	4640      	mov	r0, r8
 8002520:	f7ff fee2 	bl	80022e8 <_printf_common>
 8002524:	3001      	adds	r0, #1
 8002526:	d14c      	bne.n	80025c2 <_printf_i+0x1fe>
 8002528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800252c:	b004      	add	sp, #16
 800252e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002532:	4835      	ldr	r0, [pc, #212]	; (8002608 <_printf_i+0x244>)
 8002534:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002538:	6829      	ldr	r1, [r5, #0]
 800253a:	6823      	ldr	r3, [r4, #0]
 800253c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002540:	6029      	str	r1, [r5, #0]
 8002542:	061d      	lsls	r5, r3, #24
 8002544:	d514      	bpl.n	8002570 <_printf_i+0x1ac>
 8002546:	07df      	lsls	r7, r3, #31
 8002548:	bf44      	itt	mi
 800254a:	f043 0320 	orrmi.w	r3, r3, #32
 800254e:	6023      	strmi	r3, [r4, #0]
 8002550:	b91e      	cbnz	r6, 800255a <_printf_i+0x196>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	f023 0320 	bic.w	r3, r3, #32
 8002558:	6023      	str	r3, [r4, #0]
 800255a:	2310      	movs	r3, #16
 800255c:	e7b0      	b.n	80024c0 <_printf_i+0xfc>
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	f043 0320 	orr.w	r3, r3, #32
 8002564:	6023      	str	r3, [r4, #0]
 8002566:	2378      	movs	r3, #120	; 0x78
 8002568:	4828      	ldr	r0, [pc, #160]	; (800260c <_printf_i+0x248>)
 800256a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800256e:	e7e3      	b.n	8002538 <_printf_i+0x174>
 8002570:	0659      	lsls	r1, r3, #25
 8002572:	bf48      	it	mi
 8002574:	b2b6      	uxthmi	r6, r6
 8002576:	e7e6      	b.n	8002546 <_printf_i+0x182>
 8002578:	4615      	mov	r5, r2
 800257a:	e7bb      	b.n	80024f4 <_printf_i+0x130>
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	6826      	ldr	r6, [r4, #0]
 8002580:	6961      	ldr	r1, [r4, #20]
 8002582:	1d18      	adds	r0, r3, #4
 8002584:	6028      	str	r0, [r5, #0]
 8002586:	0635      	lsls	r5, r6, #24
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	d501      	bpl.n	8002590 <_printf_i+0x1cc>
 800258c:	6019      	str	r1, [r3, #0]
 800258e:	e002      	b.n	8002596 <_printf_i+0x1d2>
 8002590:	0670      	lsls	r0, r6, #25
 8002592:	d5fb      	bpl.n	800258c <_printf_i+0x1c8>
 8002594:	8019      	strh	r1, [r3, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	6123      	str	r3, [r4, #16]
 800259a:	4615      	mov	r5, r2
 800259c:	e7ba      	b.n	8002514 <_printf_i+0x150>
 800259e:	682b      	ldr	r3, [r5, #0]
 80025a0:	1d1a      	adds	r2, r3, #4
 80025a2:	602a      	str	r2, [r5, #0]
 80025a4:	681d      	ldr	r5, [r3, #0]
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	2100      	movs	r1, #0
 80025aa:	4628      	mov	r0, r5
 80025ac:	f7fd fe30 	bl	8000210 <memchr>
 80025b0:	b108      	cbz	r0, 80025b6 <_printf_i+0x1f2>
 80025b2:	1b40      	subs	r0, r0, r5
 80025b4:	6060      	str	r0, [r4, #4]
 80025b6:	6863      	ldr	r3, [r4, #4]
 80025b8:	6123      	str	r3, [r4, #16]
 80025ba:	2300      	movs	r3, #0
 80025bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025c0:	e7a8      	b.n	8002514 <_printf_i+0x150>
 80025c2:	6923      	ldr	r3, [r4, #16]
 80025c4:	462a      	mov	r2, r5
 80025c6:	4649      	mov	r1, r9
 80025c8:	4640      	mov	r0, r8
 80025ca:	47d0      	blx	sl
 80025cc:	3001      	adds	r0, #1
 80025ce:	d0ab      	beq.n	8002528 <_printf_i+0x164>
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	079b      	lsls	r3, r3, #30
 80025d4:	d413      	bmi.n	80025fe <_printf_i+0x23a>
 80025d6:	68e0      	ldr	r0, [r4, #12]
 80025d8:	9b03      	ldr	r3, [sp, #12]
 80025da:	4298      	cmp	r0, r3
 80025dc:	bfb8      	it	lt
 80025de:	4618      	movlt	r0, r3
 80025e0:	e7a4      	b.n	800252c <_printf_i+0x168>
 80025e2:	2301      	movs	r3, #1
 80025e4:	4632      	mov	r2, r6
 80025e6:	4649      	mov	r1, r9
 80025e8:	4640      	mov	r0, r8
 80025ea:	47d0      	blx	sl
 80025ec:	3001      	adds	r0, #1
 80025ee:	d09b      	beq.n	8002528 <_printf_i+0x164>
 80025f0:	3501      	adds	r5, #1
 80025f2:	68e3      	ldr	r3, [r4, #12]
 80025f4:	9903      	ldr	r1, [sp, #12]
 80025f6:	1a5b      	subs	r3, r3, r1
 80025f8:	42ab      	cmp	r3, r5
 80025fa:	dcf2      	bgt.n	80025e2 <_printf_i+0x21e>
 80025fc:	e7eb      	b.n	80025d6 <_printf_i+0x212>
 80025fe:	2500      	movs	r5, #0
 8002600:	f104 0619 	add.w	r6, r4, #25
 8002604:	e7f5      	b.n	80025f2 <_printf_i+0x22e>
 8002606:	bf00      	nop
 8002608:	08002861 	.word	0x08002861
 800260c:	08002872 	.word	0x08002872

08002610 <_sbrk_r>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	4d06      	ldr	r5, [pc, #24]	; (800262c <_sbrk_r+0x1c>)
 8002614:	2300      	movs	r3, #0
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	602b      	str	r3, [r5, #0]
 800261c:	f7fe f9e0 	bl	80009e0 <_sbrk>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d102      	bne.n	800262a <_sbrk_r+0x1a>
 8002624:	682b      	ldr	r3, [r5, #0]
 8002626:	b103      	cbz	r3, 800262a <_sbrk_r+0x1a>
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	200000e4 	.word	0x200000e4

08002630 <__sread>:
 8002630:	b510      	push	{r4, lr}
 8002632:	460c      	mov	r4, r1
 8002634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002638:	f000 f8a0 	bl	800277c <_read_r>
 800263c:	2800      	cmp	r0, #0
 800263e:	bfab      	itete	ge
 8002640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002642:	89a3      	ldrhlt	r3, [r4, #12]
 8002644:	181b      	addge	r3, r3, r0
 8002646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800264a:	bfac      	ite	ge
 800264c:	6563      	strge	r3, [r4, #84]	; 0x54
 800264e:	81a3      	strhlt	r3, [r4, #12]
 8002650:	bd10      	pop	{r4, pc}

08002652 <__swrite>:
 8002652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002656:	461f      	mov	r7, r3
 8002658:	898b      	ldrh	r3, [r1, #12]
 800265a:	05db      	lsls	r3, r3, #23
 800265c:	4605      	mov	r5, r0
 800265e:	460c      	mov	r4, r1
 8002660:	4616      	mov	r6, r2
 8002662:	d505      	bpl.n	8002670 <__swrite+0x1e>
 8002664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002668:	2302      	movs	r3, #2
 800266a:	2200      	movs	r2, #0
 800266c:	f000 f868 	bl	8002740 <_lseek_r>
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800267a:	81a3      	strh	r3, [r4, #12]
 800267c:	4632      	mov	r2, r6
 800267e:	463b      	mov	r3, r7
 8002680:	4628      	mov	r0, r5
 8002682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002686:	f000 b817 	b.w	80026b8 <_write_r>

0800268a <__sseek>:
 800268a:	b510      	push	{r4, lr}
 800268c:	460c      	mov	r4, r1
 800268e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002692:	f000 f855 	bl	8002740 <_lseek_r>
 8002696:	1c43      	adds	r3, r0, #1
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	bf15      	itete	ne
 800269c:	6560      	strne	r0, [r4, #84]	; 0x54
 800269e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026a6:	81a3      	strheq	r3, [r4, #12]
 80026a8:	bf18      	it	ne
 80026aa:	81a3      	strhne	r3, [r4, #12]
 80026ac:	bd10      	pop	{r4, pc}

080026ae <__sclose>:
 80026ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b2:	f000 b813 	b.w	80026dc <_close_r>
	...

080026b8 <_write_r>:
 80026b8:	b538      	push	{r3, r4, r5, lr}
 80026ba:	4d07      	ldr	r5, [pc, #28]	; (80026d8 <_write_r+0x20>)
 80026bc:	4604      	mov	r4, r0
 80026be:	4608      	mov	r0, r1
 80026c0:	4611      	mov	r1, r2
 80026c2:	2200      	movs	r2, #0
 80026c4:	602a      	str	r2, [r5, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	f7fe f939 	bl	800093e <_write>
 80026cc:	1c43      	adds	r3, r0, #1
 80026ce:	d102      	bne.n	80026d6 <_write_r+0x1e>
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	b103      	cbz	r3, 80026d6 <_write_r+0x1e>
 80026d4:	6023      	str	r3, [r4, #0]
 80026d6:	bd38      	pop	{r3, r4, r5, pc}
 80026d8:	200000e4 	.word	0x200000e4

080026dc <_close_r>:
 80026dc:	b538      	push	{r3, r4, r5, lr}
 80026de:	4d06      	ldr	r5, [pc, #24]	; (80026f8 <_close_r+0x1c>)
 80026e0:	2300      	movs	r3, #0
 80026e2:	4604      	mov	r4, r0
 80026e4:	4608      	mov	r0, r1
 80026e6:	602b      	str	r3, [r5, #0]
 80026e8:	f7fe f945 	bl	8000976 <_close>
 80026ec:	1c43      	adds	r3, r0, #1
 80026ee:	d102      	bne.n	80026f6 <_close_r+0x1a>
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	b103      	cbz	r3, 80026f6 <_close_r+0x1a>
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	bd38      	pop	{r3, r4, r5, pc}
 80026f8:	200000e4 	.word	0x200000e4

080026fc <_fstat_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4d07      	ldr	r5, [pc, #28]	; (800271c <_fstat_r+0x20>)
 8002700:	2300      	movs	r3, #0
 8002702:	4604      	mov	r4, r0
 8002704:	4608      	mov	r0, r1
 8002706:	4611      	mov	r1, r2
 8002708:	602b      	str	r3, [r5, #0]
 800270a:	f7fe f940 	bl	800098e <_fstat>
 800270e:	1c43      	adds	r3, r0, #1
 8002710:	d102      	bne.n	8002718 <_fstat_r+0x1c>
 8002712:	682b      	ldr	r3, [r5, #0]
 8002714:	b103      	cbz	r3, 8002718 <_fstat_r+0x1c>
 8002716:	6023      	str	r3, [r4, #0]
 8002718:	bd38      	pop	{r3, r4, r5, pc}
 800271a:	bf00      	nop
 800271c:	200000e4 	.word	0x200000e4

08002720 <_isatty_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4d06      	ldr	r5, [pc, #24]	; (800273c <_isatty_r+0x1c>)
 8002724:	2300      	movs	r3, #0
 8002726:	4604      	mov	r4, r0
 8002728:	4608      	mov	r0, r1
 800272a:	602b      	str	r3, [r5, #0]
 800272c:	f7fe f93f 	bl	80009ae <_isatty>
 8002730:	1c43      	adds	r3, r0, #1
 8002732:	d102      	bne.n	800273a <_isatty_r+0x1a>
 8002734:	682b      	ldr	r3, [r5, #0]
 8002736:	b103      	cbz	r3, 800273a <_isatty_r+0x1a>
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	bd38      	pop	{r3, r4, r5, pc}
 800273c:	200000e4 	.word	0x200000e4

08002740 <_lseek_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	4d07      	ldr	r5, [pc, #28]	; (8002760 <_lseek_r+0x20>)
 8002744:	4604      	mov	r4, r0
 8002746:	4608      	mov	r0, r1
 8002748:	4611      	mov	r1, r2
 800274a:	2200      	movs	r2, #0
 800274c:	602a      	str	r2, [r5, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	f7fe f938 	bl	80009c4 <_lseek>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d102      	bne.n	800275e <_lseek_r+0x1e>
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	b103      	cbz	r3, 800275e <_lseek_r+0x1e>
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	bd38      	pop	{r3, r4, r5, pc}
 8002760:	200000e4 	.word	0x200000e4

08002764 <__malloc_lock>:
 8002764:	4801      	ldr	r0, [pc, #4]	; (800276c <__malloc_lock+0x8>)
 8002766:	f7ff bb1d 	b.w	8001da4 <__retarget_lock_acquire_recursive>
 800276a:	bf00      	nop
 800276c:	200000d8 	.word	0x200000d8

08002770 <__malloc_unlock>:
 8002770:	4801      	ldr	r0, [pc, #4]	; (8002778 <__malloc_unlock+0x8>)
 8002772:	f7ff bb18 	b.w	8001da6 <__retarget_lock_release_recursive>
 8002776:	bf00      	nop
 8002778:	200000d8 	.word	0x200000d8

0800277c <_read_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d07      	ldr	r5, [pc, #28]	; (800279c <_read_r+0x20>)
 8002780:	4604      	mov	r4, r0
 8002782:	4608      	mov	r0, r1
 8002784:	4611      	mov	r1, r2
 8002786:	2200      	movs	r2, #0
 8002788:	602a      	str	r2, [r5, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	f7fe f8ba 	bl	8000904 <_read>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d102      	bne.n	800279a <_read_r+0x1e>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	b103      	cbz	r3, 800279a <_read_r+0x1e>
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	bd38      	pop	{r3, r4, r5, pc}
 800279c:	200000e4 	.word	0x200000e4

080027a0 <_init>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr

080027ac <_fini>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr
