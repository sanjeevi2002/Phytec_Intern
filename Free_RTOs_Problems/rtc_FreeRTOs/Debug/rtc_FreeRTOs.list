
rtc_FreeRTOs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005688  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005858  08005858  00015858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005980  08005980  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005988  08005988  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800598c  0800598c  0001598c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004108  20000074  08005a04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000417c  08005a04  0002417c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017006  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000305b  00000000  00000000  000370aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  0003a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003b410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000241e3  00000000  00000000  0003c5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ce1  00000000  00000000  000607c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dee1b  00000000  00000000  000764a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001552bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d4  00000000  00000000  00155310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005840 	.word	0x08005840

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08005840 	.word	0x08005840

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e2:	bf00      	nop
 80005e4:	3714      	adds	r7, #20
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000090 	.word	0x20000090
 80005f4:	20000144 	.word	0x20000144

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b08e      	sub	sp, #56	; 0x38
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fbfd 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f835 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f929 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060a:	f000 f8fd 	bl	8000808 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800060e:	f000 f8a1 	bl	8000754 <MX_RTC_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of set_time */
  osThreadDef(set_time, set_time_rtc, osPriorityNormal, 0, 128);
 8000612:	4b13      	ldr	r3, [pc, #76]	; (8000660 <main+0x68>)
 8000614:	f107 041c 	add.w	r4, r7, #28
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  set_timeHandle = osThreadCreate(osThread(set_time), NULL);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 f9a2 	bl	8003976 <osThreadCreate>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <main+0x6c>)
 8000636:	6013      	str	r3, [r2, #0]

  /* definition and creation of get_time */
  osThreadDef(get_time, get_time_rtc, osPriorityIdle, 0, 128);
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <main+0x70>)
 800063a:	463c      	mov	r4, r7
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  get_timeHandle = osThreadCreate(osThread(get_time), NULL);
 800064a:	463b      	mov	r3, r7
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 f991 	bl	8003976 <osThreadCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <main+0x74>)
 8000658:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800065a:	f003 f985 	bl	8003968 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065e:	e7fe      	b.n	800065e <main+0x66>
 8000660:	08005870 	.word	0x08005870
 8000664:	200003a8 	.word	0x200003a8
 8000668:	0800588c 	.word	0x0800588c
 800066c:	200003ac 	.word	0x200003ac

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	; 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fc0e 	bl	8004ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b2c      	ldr	r3, [pc, #176]	; (800074c <SystemClock_Config+0xdc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a2b      	ldr	r2, [pc, #172]	; (800074c <SystemClock_Config+0xdc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <SystemClock_Config+0xdc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <SystemClock_Config+0xe0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a24      	ldr	r2, [pc, #144]	; (8000750 <SystemClock_Config+0xe0>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xe0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006d0:	230a      	movs	r3, #10
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006dc:	2310      	movs	r3, #16
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fcf0 	bl	80020ec <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000712:	f000 f9c1 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fe34 	bl	80013a0 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800073e:	f000 f9ab 	bl	8000a98 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800076c:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_RTC_Init+0xac>)
 800076e:	4a25      	ldr	r2, [pc, #148]	; (8000804 <MX_RTC_Init+0xb0>)
 8000770:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_RTC_Init+0xac>)
 8000774:	2200      	movs	r2, #0
 8000776:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000778:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_RTC_Init+0xac>)
 800077a:	227f      	movs	r2, #127	; 0x7f
 800077c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800077e:	4b20      	ldr	r3, [pc, #128]	; (8000800 <MX_RTC_Init+0xac>)
 8000780:	22ff      	movs	r2, #255	; 0xff
 8000782:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_RTC_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_RTC_Init+0xac>)
 800078c:	2200      	movs	r2, #0
 800078e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_RTC_Init+0xac>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000796:	481a      	ldr	r0, [pc, #104]	; (8000800 <MX_RTC_Init+0xac>)
 8000798:	f001 ff46 	bl	8002628 <HAL_RTC_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f979 	bl	8000a98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x10;
 80007a6:	2310      	movs	r3, #16
 80007a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 80007aa:	2330      	movs	r3, #48	; 0x30
 80007ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x25;
 80007ae:	2325      	movs	r3, #37	; 0x25
 80007b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	480f      	ldr	r0, [pc, #60]	; (8000800 <MX_RTC_Init+0xac>)
 80007c2:	f001 ffa7 	bl	8002714 <HAL_RTC_SetTime>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80007cc:	f000 f964 	bl	8000a98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007d0:	2301      	movs	r3, #1
 80007d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007d4:	2301      	movs	r3, #1
 80007d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80007d8:	2301      	movs	r3, #1
 80007da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80007dc:	2300      	movs	r3, #0
 80007de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007e0:	463b      	mov	r3, r7
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <MX_RTC_Init+0xac>)
 80007e8:	f002 f88c 	bl	8002904 <HAL_RTC_SetDate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80007f2:	f000 f951 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000344 	.word	0x20000344
 8000804:	40002800 	.word	0x40002800

08000808 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART2_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART2_UART_Init+0x4c>)
 8000840:	f002 fcb8 	bl	80031b4 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f925 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000364 	.word	0x20000364
 8000858:	40004400 	.word	0x40004400

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_GPIO_Init+0xd0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a2c      	ldr	r2, [pc, #176]	; (800092c <MX_GPIO_Init+0xd0>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_GPIO_Init+0xd0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0xd0>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a25      	ldr	r2, [pc, #148]	; (800092c <MX_GPIO_Init+0xd0>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_GPIO_Init+0xd0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_GPIO_Init+0xd0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a1e      	ldr	r2, [pc, #120]	; (800092c <MX_GPIO_Init+0xd0>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_GPIO_Init+0xd0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_GPIO_Init+0xd0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_GPIO_Init+0xd0>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_GPIO_Init+0xd0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2120      	movs	r1, #32
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_GPIO_Init+0xd4>)
 80008e8:	f000 fd40 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_GPIO_Init+0xd8>)
 8000904:	f000 fb9e 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000908:	2320      	movs	r3, #32
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2301      	movs	r3, #1
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_GPIO_Init+0xd4>)
 8000920:	f000 fb90 	bl	8001044 <HAL_GPIO_Init>

}
 8000924:	bf00      	nop
 8000926:	3728      	adds	r7, #40	; 0x28
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800

08000938 <set_time_rtc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_set_time_rtc */
void set_time_rtc(void const * argument)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  RTC_TimeTypeDef sTime;
	    RTC_DateTypeDef sDate;
	    sTime.Hours = 0x3; // set hours
 8000940:	2303      	movs	r3, #3
 8000942:	733b      	strb	r3, [r7, #12]
	    sTime.Minutes = 0x20; // set minutes
 8000944:	2320      	movs	r3, #32
 8000946:	737b      	strb	r3, [r7, #13]
	    sTime.Seconds = 0x30; // set seconds
 8000948:	2330      	movs	r3, #48	; 0x30
 800094a:	73bb      	strb	r3, [r7, #14]
	    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800094c:	2300      	movs	r3, #0
 800094e:	61bb      	str	r3, [r7, #24]
	    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
	    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	4813      	ldr	r0, [pc, #76]	; (80009ac <set_time_rtc+0x74>)
 800095e:	f001 fed9 	bl	8002714 <HAL_RTC_SetTime>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <set_time_rtc+0x34>
	    {
	      Error_Handler();
 8000968:	f000 f896 	bl	8000a98 <Error_Handler>
	    }
	    sDate.WeekDay = RTC_WEEKDAY_THURSDAY; //day
 800096c:	2304      	movs	r3, #4
 800096e:	723b      	strb	r3, [r7, #8]
	    sDate.Month = RTC_MONTH_AUGUST; //month
 8000970:	2308      	movs	r3, #8
 8000972:	727b      	strb	r3, [r7, #9]
	    sDate.Date = 0x3; // date
 8000974:	2303      	movs	r3, #3
 8000976:	72bb      	strb	r3, [r7, #10]
	    sDate.Year = 0x24; // year
 8000978:	2324      	movs	r3, #36	; 0x24
 800097a:	72fb      	strb	r3, [r7, #11]
	    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2201      	movs	r2, #1
 8000982:	4619      	mov	r1, r3
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <set_time_rtc+0x74>)
 8000986:	f001 ffbd 	bl	8002904 <HAL_RTC_SetDate>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <set_time_rtc+0x5c>
	    {
	      Error_Handler();
 8000990:	f000 f882 	bl	8000a98 <Error_Handler>
	    }
	    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
 8000994:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8000998:	2101      	movs	r1, #1
 800099a:	4804      	ldr	r0, [pc, #16]	; (80009ac <set_time_rtc+0x74>)
 800099c:	f002 f942 	bl	8002c24 <HAL_RTCEx_BKUPWrite>
    osDelay(500);
 80009a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009a4:	f003 f833 	bl	8003a0e <osDelay>
  {
 80009a8:	e7ca      	b.n	8000940 <set_time_rtc+0x8>
 80009aa:	bf00      	nop
 80009ac:	20000344 	.word	0x20000344

080009b0 <get_time_rtc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_get_time_rtc */
void get_time_rtc(void const * argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
      RTC_DateTypeDef gDate;
      RTC_TimeTypeDef gTime;
      /* Get the RTC current Time */
      HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2200      	movs	r2, #0
 80009be:	4619      	mov	r1, r3
 80009c0:	4825      	ldr	r0, [pc, #148]	; (8000a58 <get_time_rtc+0xa8>)
 80009c2:	f001 ff41 	bl	8002848 <HAL_RTC_GetTime>
      /* Get the RTC current Date */
      HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <get_time_rtc+0xa8>)
 80009d0:	f002 f81c 	bl	8002a0c <HAL_RTC_GetDate>
      /* Display time Format: hh:mm:ss */
      sprintf((char*)time_str, "%02d:%02d:%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 80009d4:	7a3b      	ldrb	r3, [r7, #8]
 80009d6:	461a      	mov	r2, r3
 80009d8:	7a7b      	ldrb	r3, [r7, #9]
 80009da:	4619      	mov	r1, r3
 80009dc:	7abb      	ldrb	r3, [r7, #10]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	460b      	mov	r3, r1
 80009e2:	491e      	ldr	r1, [pc, #120]	; (8000a5c <get_time_rtc+0xac>)
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <get_time_rtc+0xb0>)
 80009e6:	f004 fb71 	bl	80050cc <siprintf>
      /* Display date Format: dd-mm-yyyy */
      sprintf((char*)date_str, "%02d-%02d-%4d", gDate.Date, gDate.Month, 2000 + gDate.Year);
 80009ea:	7fbb      	ldrb	r3, [r7, #30]
 80009ec:	461a      	mov	r2, r3
 80009ee:	7f7b      	ldrb	r3, [r7, #29]
 80009f0:	4619      	mov	r1, r3
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	460b      	mov	r3, r1
 80009fc:	4919      	ldr	r1, [pc, #100]	; (8000a64 <get_time_rtc+0xb4>)
 80009fe:	481a      	ldr	r0, [pc, #104]	; (8000a68 <get_time_rtc+0xb8>)
 8000a00:	f004 fb64 	bl	80050cc <siprintf>

      // Transmit the time and date over UART
      HAL_UART_Transmit(&huart2, (uint8_t*)time_str, strlen(time_str), HAL_MAX_DELAY);
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <get_time_rtc+0xb0>)
 8000a06:	f7ff fc03 	bl	8000210 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a12:	4913      	ldr	r1, [pc, #76]	; (8000a60 <get_time_rtc+0xb0>)
 8000a14:	4815      	ldr	r0, [pc, #84]	; (8000a6c <get_time_rtc+0xbc>)
 8000a16:	f002 fc1a 	bl	800324e <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1e:	2202      	movs	r2, #2
 8000a20:	4913      	ldr	r1, [pc, #76]	; (8000a70 <get_time_rtc+0xc0>)
 8000a22:	4812      	ldr	r0, [pc, #72]	; (8000a6c <get_time_rtc+0xbc>)
 8000a24:	f002 fc13 	bl	800324e <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)date_str, strlen(date_str), HAL_MAX_DELAY);
 8000a28:	480f      	ldr	r0, [pc, #60]	; (8000a68 <get_time_rtc+0xb8>)
 8000a2a:	f7ff fbf1 	bl	8000210 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a36:	490c      	ldr	r1, [pc, #48]	; (8000a68 <get_time_rtc+0xb8>)
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <get_time_rtc+0xbc>)
 8000a3a:	f002 fc08 	bl	800324e <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a42:	2202      	movs	r2, #2
 8000a44:	490a      	ldr	r1, [pc, #40]	; (8000a70 <get_time_rtc+0xc0>)
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <get_time_rtc+0xbc>)
 8000a48:	f002 fc01 	bl	800324e <HAL_UART_Transmit>

      osDelay(1000);
 8000a4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a50:	f002 ffdd 	bl	8003a0e <osDelay>
  {
 8000a54:	e7b0      	b.n	80009b8 <get_time_rtc+0x8>
 8000a56:	bf00      	nop
 8000a58:	20000344 	.word	0x20000344
 8000a5c:	080058a8 	.word	0x080058a8
 8000a60:	200003b0 	.word	0x200003b0
 8000a64:	080058b8 	.word	0x080058b8
 8000a68:	200003bc 	.word	0x200003bc
 8000a6c:	20000364 	.word	0x20000364
 8000a70:	080058c8 	.word	0x080058c8

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 f9db 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40000400 	.word	0x40000400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_MspInit+0x54>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a11      	ldr	r2, [pc, #68]	; (8000af8 <HAL_MspInit+0x54>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <HAL_MspInit+0x54>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	603b      	str	r3, [r7, #0]
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_MspInit+0x54>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_MspInit+0x54>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <HAL_MspInit+0x54>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	f06f 0001 	mvn.w	r0, #1
 8000aea:	f000 fa81 	bl	8000ff0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b09a      	sub	sp, #104	; 0x68
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	225c      	movs	r2, #92	; 0x5c
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 f9c7 	bl	8004ea0 <memset>
  if(hrtc->Instance==RTC)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <HAL_RTC_MspInit+0x4c>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d111      	bne.n	8000b40 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b24:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fd84 	bl	8001638 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b36:	f7ff ffaf 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_RTC_MspInit+0x50>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3768      	adds	r7, #104	; 0x68
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40002800 	.word	0x40002800
 8000b4c:	42470e3c 	.word	0x42470e3c

08000b50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0x84>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12b      	bne.n	8000bca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_UART_MspInit+0x88>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000baa:	230c      	movs	r3, #12
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4805      	ldr	r0, [pc, #20]	; (8000bdc <HAL_UART_MspInit+0x8c>)
 8000bc6:	f000 fa3d 	bl	8001044 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bca:	bf00      	nop
 8000bcc:	3728      	adds	r7, #40	; 0x28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000

08000be0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08e      	sub	sp, #56	; 0x38
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <HAL_InitTick+0xe4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a32      	ldr	r2, [pc, #200]	; (8000cc4 <HAL_InitTick+0xe4>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <HAL_InitTick+0xe4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c0c:	f107 0210 	add.w	r2, r7, #16
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4611      	mov	r1, r2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fcdc 	bl	80015d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c1c:	6a3b      	ldr	r3, [r7, #32]
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c26:	f000 fcad 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 8000c2a:	6378      	str	r0, [r7, #52]	; 0x34
 8000c2c:	e004      	b.n	8000c38 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c2e:	f000 fca9 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 8000c32:	4603      	mov	r3, r0
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3a:	4a23      	ldr	r2, [pc, #140]	; (8000cc8 <HAL_InitTick+0xe8>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	0c9b      	lsrs	r3, r3, #18
 8000c42:	3b01      	subs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <HAL_InitTick+0xec>)
 8000c48:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <HAL_InitTick+0xf0>)
 8000c4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <HAL_InitTick+0xec>)
 8000c4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c52:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000c54:	4a1d      	ldr	r2, [pc, #116]	; (8000ccc <HAL_InitTick+0xec>)
 8000c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c58:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_InitTick+0xec>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <HAL_InitTick+0xec>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_InitTick+0xec>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000c6c:	4817      	ldr	r0, [pc, #92]	; (8000ccc <HAL_InitTick+0xec>)
 8000c6e:	f001 fff3 	bl	8002c58 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d11b      	bne.n	8000cb8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000c80:	4812      	ldr	r0, [pc, #72]	; (8000ccc <HAL_InitTick+0xec>)
 8000c82:	f002 f843 	bl	8002d0c <HAL_TIM_Base_Start_IT>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d111      	bne.n	8000cb8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c94:	201d      	movs	r0, #29
 8000c96:	f000 f9c7 	bl	8001028 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d808      	bhi.n	8000cb2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	201d      	movs	r0, #29
 8000ca6:	f000 f9a3 	bl	8000ff0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_InitTick+0xf4>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6013      	str	r3, [r2, #0]
 8000cb0:	e002      	b.n	8000cb8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3738      	adds	r7, #56	; 0x38
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800
 8000cc8:	431bde83 	.word	0x431bde83
 8000ccc:	200003c8 	.word	0x200003c8
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	20000004 	.word	0x20000004

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <NMI_Handler+0x4>

08000cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cee:	e7fe      	b.n	8000cee <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <TIM3_IRQHandler+0x10>)
 8000d0a:	f002 f86f 	bl	8002dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200003c8 	.word	0x200003c8

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f004 f870 	bl	8004e2c <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20020000 	.word	0x20020000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	20000410 	.word	0x20000410
 8000d80:	20004180 	.word	0x20004180

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd2:	f7ff ffd7 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f004 f82f 	bl	8004e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fc0d 	bl	80005f8 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dec:	08005990 	.word	0x08005990
  ldr r2, =_sbss
 8000df0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000df4:	2000417c 	.word	0x2000417c

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f8d8 	bl	8000fda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff fed8 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fe38 	bl	8000aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	20000414 	.word	0x20000414

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000414 	.word	0x20000414

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ff4c 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001002:	f7ff ff61 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 8001006:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	6978      	ldr	r0, [r7, #20]
 800100e:	f7ff ffb1 	bl	8000f74 <NVIC_EncodePriority>
 8001012:	4602      	mov	r2, r0
 8001014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001018:	4611      	mov	r1, r2
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff80 	bl	8000f20 <__NVIC_SetPriority>
}
 8001020:	bf00      	nop
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff54 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e165      	b.n	800132c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8154 	bne.w	8001326 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80ae 	beq.w	8001326 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b5d      	ldr	r3, [pc, #372]	; (8001344 <HAL_GPIO_Init+0x300>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a5c      	ldr	r2, [pc, #368]	; (8001344 <HAL_GPIO_Init+0x300>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <HAL_GPIO_Init+0x300>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a58      	ldr	r2, [pc, #352]	; (8001348 <HAL_GPIO_Init+0x304>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_GPIO_Init+0x308>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x21a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4e      	ldr	r2, [pc, #312]	; (8001350 <HAL_GPIO_Init+0x30c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x216>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_GPIO_Init+0x310>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x212>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_GPIO_Init+0x314>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x20e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_GPIO_Init+0x318>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x20a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_GPIO_Init+0x31c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x206>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a49      	ldr	r2, [pc, #292]	; (8001364 <HAL_GPIO_Init+0x320>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x202>
 8001242:	2306      	movs	r3, #6
 8001244:	e00c      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 8001246:	2307      	movs	r3, #7
 8001248:	e00a      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800124a:	2305      	movs	r3, #5
 800124c:	e008      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800124e:	2304      	movs	r3, #4
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 8001252:	2303      	movs	r3, #3
 8001254:	e004      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 8001256:	2302      	movs	r3, #2
 8001258:	e002      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_GPIO_Init+0x21c>
 800125e:	2300      	movs	r3, #0
 8001260:	69fa      	ldr	r2, [r7, #28]
 8001262:	f002 0203 	and.w	r2, r2, #3
 8001266:	0092      	lsls	r2, r2, #2
 8001268:	4093      	lsls	r3, r2
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001270:	4935      	ldr	r1, [pc, #212]	; (8001348 <HAL_GPIO_Init+0x304>)
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127e:	4b3a      	ldr	r3, [pc, #232]	; (8001368 <HAL_GPIO_Init+0x324>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012a2:	4a31      	ldr	r2, [pc, #196]	; (8001368 <HAL_GPIO_Init+0x324>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012a8:	4b2f      	ldr	r3, [pc, #188]	; (8001368 <HAL_GPIO_Init+0x324>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012cc:	4a26      	ldr	r2, [pc, #152]	; (8001368 <HAL_GPIO_Init+0x324>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012d2:	4b25      	ldr	r3, [pc, #148]	; (8001368 <HAL_GPIO_Init+0x324>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	43db      	mvns	r3, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4013      	ands	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <HAL_GPIO_Init+0x324>)
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_GPIO_Init+0x324>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001320:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_GPIO_Init+0x324>)
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b0f      	cmp	r3, #15
 8001330:	f67f ae96 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3724      	adds	r7, #36	; 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40013800 	.word	0x40013800
 800134c:	40020000 	.word	0x40020000
 8001350:	40020400 	.word	0x40020400
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00
 800135c:	40021000 	.word	0x40021000
 8001360:	40021400 	.word	0x40021400
 8001364:	40021800 	.word	0x40021800
 8001368:	40013c00 	.word	0x40013c00

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0cc      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d90c      	bls.n	80013dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b65      	ldr	r3, [pc, #404]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b63      	ldr	r3, [pc, #396]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0b8      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a58      	ldr	r2, [pc, #352]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80013fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800140c:	4b53      	ldr	r3, [pc, #332]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4b50      	ldr	r3, [pc, #320]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	494d      	ldr	r1, [pc, #308]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	4313      	orrs	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d044      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d119      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e07f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d003      	beq.n	800145e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145a:	2b03      	cmp	r3, #3
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	4b3b      	ldr	r3, [pc, #236]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e067      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f023 0203 	bic.w	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4934      	ldr	r1, [pc, #208]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	4313      	orrs	r3, r2
 800148e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001490:	f7ff fcea 	bl	8000e68 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	e00a      	b.n	80014ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f7ff fce6 	bl	8000e68 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e04f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	4b2b      	ldr	r3, [pc, #172]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 020c 	and.w	r2, r3, #12
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	429a      	cmp	r2, r3
 80014be:	d1eb      	bne.n	8001498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20c      	bcs.n	80014e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b22      	ldr	r3, [pc, #136]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e032      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4916      	ldr	r1, [pc, #88]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001512:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	490e      	ldr	r1, [pc, #56]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001526:	f000 fbb1 	bl	8001c8c <HAL_RCC_GetSysClockFreq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b0b      	ldr	r3, [pc, #44]	; (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	490a      	ldr	r1, [pc, #40]	; (8001560 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	5ccb      	ldrb	r3, [r1, r3]
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	4a09      	ldr	r2, [pc, #36]	; (8001564 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fb4a 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00
 800155c:	40023800 	.word	0x40023800
 8001560:	080058d4 	.word	0x080058d4
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_RCC_GetHCLKFreq+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001588:	f7ff fff0 	bl	800156c <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	4903      	ldr	r1, [pc, #12]	; (80015a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	080058e4 	.word	0x080058e4

080015ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80015b0:	f7ff ffdc 	bl	800156c <HAL_RCC_GetHCLKFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b05      	ldr	r3, [pc, #20]	; (80015cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	0b5b      	lsrs	r3, r3, #13
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	4903      	ldr	r1, [pc, #12]	; (80015d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	080058e4 	.word	0x080058e4

080015d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	220f      	movs	r2, #15
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_GetClockConfig+0x5c>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0203 	and.w	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_RCC_GetClockConfig+0x5c>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_GetClockConfig+0x5c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_RCC_GetClockConfig+0x5c>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	08db      	lsrs	r3, r3, #3
 800160e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_RCC_GetClockConfig+0x60>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 020f 	and.w	r2, r3, #15
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	601a      	str	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40023c00 	.word	0x40023c00

08001638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d010      	beq.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001670:	4b6f      	ldr	r3, [pc, #444]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001676:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	496c      	ldr	r1, [pc, #432]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001680:	4313      	orrs	r3, r2
 8001682:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800168e:	2301      	movs	r3, #1
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d010      	beq.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800169e:	4b64      	ldr	r3, [pc, #400]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ac:	4960      	ldr	r1, [pc, #384]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80016bc:	2301      	movs	r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d017      	beq.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016cc:	4b58      	ldr	r3, [pc, #352]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4955      	ldr	r1, [pc, #340]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80016dc:	4313      	orrs	r3, r2
 80016de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016ea:	d101      	bne.n	80016f0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d017      	beq.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001708:	4b49      	ldr	r3, [pc, #292]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800170a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800170e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	4946      	ldr	r1, [pc, #280]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001718:	4313      	orrs	r3, r2
 800171a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001726:	d101      	bne.n	800172c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001728:	2301      	movs	r3, #1
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 808a 	beq.w	800185a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a38      	ldr	r2, [pc, #224]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001762:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a33      	ldr	r2, [pc, #204]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800176c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800176e:	f7ff fb7b 	bl	8000e68 <HAL_GetTick>
 8001772:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001776:	f7ff fb77 	bl	8000e68 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e278      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800179c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d02f      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ac:	6a3a      	ldr	r2, [r7, #32]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d028      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ba:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017c2:	4b1d      	ldr	r3, [pc, #116]	; (8001838 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ca:	6a3b      	ldr	r3, [r7, #32]
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80017ce:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d114      	bne.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fb45 	bl	8000e68 <HAL_GetTick>
 80017de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	e00a      	b.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f7ff fb41 	bl	8000e68 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e240      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f8:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ee      	beq.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800180c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001810:	d114      	bne.n	800183c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001826:	4902      	ldr	r1, [pc, #8]	; (8001830 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
 800182c:	e00c      	b.n	8001848 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000
 8001838:	42470e40 	.word	0x42470e40
 800183c:	4b4a      	ldr	r3, [pc, #296]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	4a49      	ldr	r2, [pc, #292]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001842:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001846:	6093      	str	r3, [r2, #8]
 8001848:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800184a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001854:	4944      	ldr	r1, [pc, #272]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001856:	4313      	orrs	r3, r2
 8001858:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800186e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00a      	beq.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800187c:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800187e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001882:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	4937      	ldr	r1, [pc, #220]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800188c:	4313      	orrs	r3, r2
 800188e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00a      	beq.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018a4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ac:	492e      	ldr	r1, [pc, #184]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d011      	beq.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018c0:	4b29      	ldr	r3, [pc, #164]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	4926      	ldr	r1, [pc, #152]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018de:	d101      	bne.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80018e0:	2301      	movs	r3, #1
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00a      	beq.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	491a      	ldr	r1, [pc, #104]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001900:	4313      	orrs	r3, r2
 8001902:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	2b00      	cmp	r3, #0
 8001910:	d011      	beq.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001918:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001920:	4911      	ldr	r1, [pc, #68]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001922:	4313      	orrs	r3, r2
 8001924:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800192c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001930:	d101      	bne.n	8001936 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001932:	2301      	movs	r3, #1
 8001934:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d005      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001944:	f040 80ff 	bne.w	8001b46 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800194e:	f7ff fa8b 	bl	8000e68 <HAL_GetTick>
 8001952:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001954:	e00e      	b.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001956:	f7ff fa87 	bl	8000e68 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d907      	bls.n	8001974 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e188      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001968:	40023800 	.word	0x40023800
 800196c:	424711e0 	.word	0x424711e0
 8001970:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001974:	4b7e      	ldr	r3, [pc, #504]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ea      	bne.n	8001956 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	2b00      	cmp	r3, #0
 8001992:	d009      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800199c:	2b00      	cmp	r3, #0
 800199e:	d028      	beq.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d124      	bne.n	80019f2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80019a8:	4b71      	ldr	r3, [pc, #452]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ae:	0c1b      	lsrs	r3, r3, #16
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	3301      	adds	r3, #1
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80019ba:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019c0:	0e1b      	lsrs	r3, r3, #24
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	431a      	orrs	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	3b01      	subs	r3, #1
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	431a      	orrs	r2, r3
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	061b      	lsls	r3, r3, #24
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	071b      	lsls	r3, r3, #28
 80019ea:	4961      	ldr	r1, [pc, #388]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a06:	d00a      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d035      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a1c:	d130      	bne.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a1e:	4b54      	ldr	r3, [pc, #336]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a24:	0c1b      	lsrs	r3, r3, #16
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001a30:	4b4f      	ldr	r3, [pc, #316]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a36:	0f1b      	lsrs	r3, r3, #28
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	019b      	lsls	r3, r3, #6
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	085b      	lsrs	r3, r3, #1
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	041b      	lsls	r3, r3, #16
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	061b      	lsls	r3, r3, #24
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	071b      	lsls	r3, r3, #28
 8001a60:	4943      	ldr	r1, [pc, #268]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001a68:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a6e:	f023 021f 	bic.w	r2, r3, #31
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	3b01      	subs	r3, #1
 8001a78:	493d      	ldr	r1, [pc, #244]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d029      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a94:	d124      	bne.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001aa8:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aae:	0f1b      	lsrs	r3, r3, #28
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	019b      	lsls	r3, r3, #6
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	431a      	orrs	r2, r3
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	061b      	lsls	r3, r3, #24
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	071b      	lsls	r3, r3, #28
 8001ad8:	4925      	ldr	r1, [pc, #148]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d016      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	019b      	lsls	r3, r3, #6
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	061b      	lsls	r3, r3, #24
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	071b      	lsls	r3, r3, #28
 8001b12:	4917      	ldr	r1, [pc, #92]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b20:	f7ff f9a2 	bl	8000e68 <HAL_GetTick>
 8001b24:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001b28:	f7ff f99e 	bl	8000e68 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e09f      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b3a:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	f040 8095 	bne.w	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b54:	f7ff f988 	bl	8000e68 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b5a:	e00f      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001b5c:	f7ff f984 	bl	8000e68 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d908      	bls.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e085      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	42470068 	.word	0x42470068
 8001b78:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001b7c:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b88:	d0e8      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d02b      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d127      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	699a      	ldr	r2, [r3, #24]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	019b      	lsls	r3, r3, #6
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	085b      	lsrs	r3, r3, #1
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	041b      	lsls	r3, r3, #16
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	061b      	lsls	r3, r3, #24
 8001be0:	4928      	ldr	r1, [pc, #160]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bee:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	4922      	ldr	r1, [pc, #136]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01d      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c16:	d118      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c1e:	0e1b      	lsrs	r3, r3, #24
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699a      	ldr	r2, [r3, #24]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	019b      	lsls	r3, r3, #6
 8001c30:	431a      	orrs	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	4910      	ldr	r1, [pc, #64]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c50:	f7ff f90a 	bl	8000e68 <HAL_GetTick>
 8001c54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001c58:	f7ff f906 	bl	8000e68 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e007      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c76:	d1ef      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3730      	adds	r7, #48	; 0x30
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	42470070 	.word	0x42470070

08001c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c90:	b0ae      	sub	sp, #184	; 0xb8
 8001c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cb2:	4bcb      	ldr	r3, [pc, #812]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b0c      	cmp	r3, #12
 8001cbc:	f200 8206 	bhi.w	80020cc <HAL_RCC_GetSysClockFreq+0x440>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cfd 	.word	0x08001cfd
 8001ccc:	080020cd 	.word	0x080020cd
 8001cd0:	080020cd 	.word	0x080020cd
 8001cd4:	080020cd 	.word	0x080020cd
 8001cd8:	08001d05 	.word	0x08001d05
 8001cdc:	080020cd 	.word	0x080020cd
 8001ce0:	080020cd 	.word	0x080020cd
 8001ce4:	080020cd 	.word	0x080020cd
 8001ce8:	08001d0d 	.word	0x08001d0d
 8001cec:	080020cd 	.word	0x080020cd
 8001cf0:	080020cd 	.word	0x080020cd
 8001cf4:	080020cd 	.word	0x080020cd
 8001cf8:	08001efd 	.word	0x08001efd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cfc:	4bb9      	ldr	r3, [pc, #740]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d02:	e1e7      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d04:	4bb8      	ldr	r3, [pc, #736]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d0a:	e1e3      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d0c:	4bb4      	ldr	r3, [pc, #720]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d18:	4bb1      	ldr	r3, [pc, #708]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d071      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d24:	4bae      	ldr	r3, [pc, #696]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	099b      	lsrs	r3, r3, #6
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d30:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d4a:	4622      	mov	r2, r4
 8001d4c:	462b      	mov	r3, r5
 8001d4e:	f04f 0000 	mov.w	r0, #0
 8001d52:	f04f 0100 	mov.w	r1, #0
 8001d56:	0159      	lsls	r1, r3, #5
 8001d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d5c:	0150      	lsls	r0, r2, #5
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	4621      	mov	r1, r4
 8001d64:	1a51      	subs	r1, r2, r1
 8001d66:	6439      	str	r1, [r7, #64]	; 0x40
 8001d68:	4629      	mov	r1, r5
 8001d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001d7c:	4649      	mov	r1, r9
 8001d7e:	018b      	lsls	r3, r1, #6
 8001d80:	4641      	mov	r1, r8
 8001d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d86:	4641      	mov	r1, r8
 8001d88:	018a      	lsls	r2, r1, #6
 8001d8a:	4641      	mov	r1, r8
 8001d8c:	1a51      	subs	r1, r2, r1
 8001d8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d90:	4649      	mov	r1, r9
 8001d92:	eb63 0301 	sbc.w	r3, r3, r1
 8001d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001da4:	4649      	mov	r1, r9
 8001da6:	00cb      	lsls	r3, r1, #3
 8001da8:	4641      	mov	r1, r8
 8001daa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dae:	4641      	mov	r1, r8
 8001db0:	00ca      	lsls	r2, r1, #3
 8001db2:	4610      	mov	r0, r2
 8001db4:	4619      	mov	r1, r3
 8001db6:	4603      	mov	r3, r0
 8001db8:	4622      	mov	r2, r4
 8001dba:	189b      	adds	r3, r3, r2
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8001dbe:	462b      	mov	r3, r5
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	eb42 0303 	adc.w	r3, r2, r3
 8001dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001dd4:	4629      	mov	r1, r5
 8001dd6:	024b      	lsls	r3, r1, #9
 8001dd8:	4621      	mov	r1, r4
 8001dda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dde:	4621      	mov	r1, r4
 8001de0:	024a      	lsls	r2, r1, #9
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dea:	2200      	movs	r2, #0
 8001dec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001df0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001df4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001df8:	f7fe fa62 	bl	80002c0 <__aeabi_uldivmod>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4613      	mov	r3, r2
 8001e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e06:	e067      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e14:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e20:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e22:	2300      	movs	r3, #0
 8001e24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e26:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	0159      	lsls	r1, r3, #5
 8001e38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e3c:	0150      	lsls	r0, r2, #5
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4621      	mov	r1, r4
 8001e44:	1a51      	subs	r1, r2, r1
 8001e46:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e48:	4629      	mov	r1, r5
 8001e4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	018b      	lsls	r3, r1, #6
 8001e60:	4641      	mov	r1, r8
 8001e62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e66:	4641      	mov	r1, r8
 8001e68:	018a      	lsls	r2, r1, #6
 8001e6a:	4641      	mov	r1, r8
 8001e6c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e70:	4649      	mov	r1, r9
 8001e72:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e82:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e8a:	4692      	mov	sl, r2
 8001e8c:	469b      	mov	fp, r3
 8001e8e:	4623      	mov	r3, r4
 8001e90:	eb1a 0303 	adds.w	r3, sl, r3
 8001e94:	623b      	str	r3, [r7, #32]
 8001e96:	462b      	mov	r3, r5
 8001e98:	eb4b 0303 	adc.w	r3, fp, r3
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001eaa:	4629      	mov	r1, r5
 8001eac:	028b      	lsls	r3, r1, #10
 8001eae:	4621      	mov	r1, r4
 8001eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	028a      	lsls	r2, r1, #10
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8001ec4:	677a      	str	r2, [r7, #116]	; 0x74
 8001ec6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001eca:	f7fe f9f9 	bl	80002c0 <__aeabi_uldivmod>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ed8:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	0c1b      	lsrs	r3, r3, #16
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001eee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001efa:	e0eb      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d06b      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f14:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	099b      	lsrs	r3, r3, #6
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f26:	663b      	str	r3, [r7, #96]	; 0x60
 8001f28:	2300      	movs	r3, #0
 8001f2a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f2c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001f30:	4622      	mov	r2, r4
 8001f32:	462b      	mov	r3, r5
 8001f34:	f04f 0000 	mov.w	r0, #0
 8001f38:	f04f 0100 	mov.w	r1, #0
 8001f3c:	0159      	lsls	r1, r3, #5
 8001f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f42:	0150      	lsls	r0, r2, #5
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4621      	mov	r1, r4
 8001f4a:	1a51      	subs	r1, r2, r1
 8001f4c:	61b9      	str	r1, [r7, #24]
 8001f4e:	4629      	mov	r1, r5
 8001f50:	eb63 0301 	sbc.w	r3, r3, r1
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001f62:	4659      	mov	r1, fp
 8001f64:	018b      	lsls	r3, r1, #6
 8001f66:	4651      	mov	r1, sl
 8001f68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f6c:	4651      	mov	r1, sl
 8001f6e:	018a      	lsls	r2, r1, #6
 8001f70:	4651      	mov	r1, sl
 8001f72:	ebb2 0801 	subs.w	r8, r2, r1
 8001f76:	4659      	mov	r1, fp
 8001f78:	eb63 0901 	sbc.w	r9, r3, r1
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f90:	4690      	mov	r8, r2
 8001f92:	4699      	mov	r9, r3
 8001f94:	4623      	mov	r3, r4
 8001f96:	eb18 0303 	adds.w	r3, r8, r3
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	eb49 0303 	adc.w	r3, r9, r3
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001fb0:	4629      	mov	r1, r5
 8001fb2:	024b      	lsls	r3, r1, #9
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fba:	4621      	mov	r1, r4
 8001fbc:	024a      	lsls	r2, r1, #9
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001fca:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001fcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001fd0:	f7fe f976 	bl	80002c0 <__aeabi_uldivmod>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4613      	mov	r3, r2
 8001fda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fde:	e065      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x420>
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	00f42400 	.word	0x00f42400
 8001fe8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fec:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8001ffe:	2300      	movs	r3, #0
 8002000:	657b      	str	r3, [r7, #84]	; 0x54
 8002002:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002006:	4642      	mov	r2, r8
 8002008:	464b      	mov	r3, r9
 800200a:	f04f 0000 	mov.w	r0, #0
 800200e:	f04f 0100 	mov.w	r1, #0
 8002012:	0159      	lsls	r1, r3, #5
 8002014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002018:	0150      	lsls	r0, r2, #5
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4641      	mov	r1, r8
 8002020:	1a51      	subs	r1, r2, r1
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	4649      	mov	r1, r9
 8002026:	eb63 0301 	sbc.w	r3, r3, r1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002038:	4659      	mov	r1, fp
 800203a:	018b      	lsls	r3, r1, #6
 800203c:	4651      	mov	r1, sl
 800203e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002042:	4651      	mov	r1, sl
 8002044:	018a      	lsls	r2, r1, #6
 8002046:	4651      	mov	r1, sl
 8002048:	1a54      	subs	r4, r2, r1
 800204a:	4659      	mov	r1, fp
 800204c:	eb63 0501 	sbc.w	r5, r3, r1
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	00eb      	lsls	r3, r5, #3
 800205a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800205e:	00e2      	lsls	r2, r4, #3
 8002060:	4614      	mov	r4, r2
 8002062:	461d      	mov	r5, r3
 8002064:	4643      	mov	r3, r8
 8002066:	18e3      	adds	r3, r4, r3
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	464b      	mov	r3, r9
 800206c:	eb45 0303 	adc.w	r3, r5, r3
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	f04f 0300 	mov.w	r3, #0
 800207a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800207e:	4629      	mov	r1, r5
 8002080:	028b      	lsls	r3, r1, #10
 8002082:	4621      	mov	r1, r4
 8002084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002088:	4621      	mov	r1, r4
 800208a:	028a      	lsls	r2, r1, #10
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002094:	2200      	movs	r2, #0
 8002096:	64bb      	str	r3, [r7, #72]	; 0x48
 8002098:	64fa      	str	r2, [r7, #76]	; 0x4c
 800209a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800209e:	f7fe f90f 	bl	80002c0 <__aeabi_uldivmod>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4613      	mov	r3, r2
 80020a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0f1b      	lsrs	r3, r3, #28
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80020ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020ca:	e003      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80020ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80020d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	37b8      	adds	r7, #184	; 0xb8
 80020dc:	46bd      	mov	sp, r7
 80020de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	00f42400 	.word	0x00f42400

080020ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e28d      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8083 	beq.w	8002212 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800210c:	4b94      	ldr	r3, [pc, #592]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d019      	beq.n	800214c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002118:	4b91      	ldr	r3, [pc, #580]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002120:	2b08      	cmp	r3, #8
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002124:	4b8e      	ldr	r3, [pc, #568]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002130:	d00c      	beq.n	800214c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d112      	bne.n	8002164 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800213e:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800214a:	d10b      	bne.n	8002164 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214c:	4b84      	ldr	r3, [pc, #528]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d05b      	beq.n	8002210 <HAL_RCC_OscConfig+0x124>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d157      	bne.n	8002210 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e25a      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0x90>
 800216e:	4b7c      	ldr	r3, [pc, #496]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a7b      	ldr	r2, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xcc>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0xb4>
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b73      	ldr	r3, [pc, #460]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a72      	ldr	r2, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xcc>
 80021a0:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b6c      	ldr	r3, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a6b      	ldr	r2, [pc, #428]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fe52 	bl	8000e68 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c8:	f7fe fe4e 	bl	8000e68 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e21f      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b61      	ldr	r3, [pc, #388]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xdc>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fe3e 	bl	8000e68 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f0:	f7fe fe3a 	bl	8000e68 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e20b      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b57      	ldr	r3, [pc, #348]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x104>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d06f      	beq.n	80022fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800221e:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d017      	beq.n	800225a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002232:	2b08      	cmp	r3, #8
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002236:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00b      	beq.n	800225a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <HAL_RCC_OscConfig+0x186>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e1d3      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4937      	ldr	r1, [pc, #220]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002286:	e03a      	b.n	80022fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002290:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_OscConfig+0x278>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002296:	f7fe fde7 	bl	8000e68 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800229e:	f7fe fde3 	bl	8000e68 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e1b4      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022bc:	4b28      	ldr	r3, [pc, #160]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4925      	ldr	r1, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
 80022d0:	e015      	b.n	80022fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_OscConfig+0x278>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d8:	f7fe fdc6 	bl	8000e68 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022e0:	f7fe fdc2 	bl	8000e68 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e193      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022f2:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d016      	beq.n	8002340 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002312:	4b15      	ldr	r3, [pc, #84]	; (8002368 <HAL_RCC_OscConfig+0x27c>)
 8002314:	2201      	movs	r2, #1
 8002316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe fda6 	bl	8000e68 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002320:	f7fe fda2 	bl	8000e68 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e173      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x274>)
 8002334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0x234>
 800233e:	e01b      	b.n	8002378 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002340:	4b09      	ldr	r3, [pc, #36]	; (8002368 <HAL_RCC_OscConfig+0x27c>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7fe fd8f 	bl	8000e68 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	e00e      	b.n	800236c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800234e:	f7fe fd8b 	bl	8000e68 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d907      	bls.n	800236c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e15c      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
 8002360:	40023800 	.word	0x40023800
 8002364:	42470000 	.word	0x42470000
 8002368:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236c:	4b8a      	ldr	r3, [pc, #552]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800236e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ea      	bne.n	800234e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8097 	beq.w	80024b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2300      	movs	r3, #0
 8002388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238a:	4b83      	ldr	r3, [pc, #524]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b7f      	ldr	r3, [pc, #508]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	4a7e      	ldr	r2, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	; 0x40
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b2:	2301      	movs	r3, #1
 80023b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b6:	4b79      	ldr	r3, [pc, #484]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d118      	bne.n	80023f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023c2:	4b76      	ldr	r3, [pc, #472]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ce:	f7fe fd4b 	bl	8000e68 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d6:	f7fe fd47 	bl	8000e68 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e118      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e8:	4b6c      	ldr	r3, [pc, #432]	; (800259c <HAL_RCC_OscConfig+0x4b0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x31e>
 80023fc:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80023fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002400:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002402:	f043 0301 	orr.w	r3, r3, #1
 8002406:	6713      	str	r3, [r2, #112]	; 0x70
 8002408:	e01c      	b.n	8002444 <HAL_RCC_OscConfig+0x358>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b05      	cmp	r3, #5
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x340>
 8002412:	4b61      	ldr	r3, [pc, #388]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a60      	ldr	r2, [pc, #384]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002418:	f043 0304 	orr.w	r3, r3, #4
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a5d      	ldr	r2, [pc, #372]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002424:	f043 0301 	orr.w	r3, r3, #1
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	e00b      	b.n	8002444 <HAL_RCC_OscConfig+0x358>
 800242c:	4b5a      	ldr	r3, [pc, #360]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	4a59      	ldr	r2, [pc, #356]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6713      	str	r3, [r2, #112]	; 0x70
 8002438:	4b57      	ldr	r3, [pc, #348]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a56      	ldr	r2, [pc, #344]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d015      	beq.n	8002478 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244c:	f7fe fd0c 	bl	8000e68 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002452:	e00a      	b.n	800246a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002454:	f7fe fd08 	bl	8000e68 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0d7      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246a:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0ee      	beq.n	8002454 <HAL_RCC_OscConfig+0x368>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002478:	f7fe fcf6 	bl	8000e68 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247e:	e00a      	b.n	8002496 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002480:	f7fe fcf2 	bl	8000e68 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e0c1      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1ee      	bne.n	8002480 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024a2:	7dfb      	ldrb	r3, [r7, #23]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d105      	bne.n	80024b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a8:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	4a3a      	ldr	r2, [pc, #232]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80ad 	beq.w	8002618 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d060      	beq.n	800258c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d145      	bne.n	800255e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b33      	ldr	r3, [pc, #204]	; (80025a0 <HAL_RCC_OscConfig+0x4b4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fcc6 	bl	8000e68 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fcc2 	bl	8000e68 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e093      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	019b      	lsls	r3, r3, #6
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	3b01      	subs	r3, #1
 8002518:	041b      	lsls	r3, r3, #16
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	061b      	lsls	r3, r3, #24
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	071b      	lsls	r3, r3, #28
 800252a:	491b      	ldr	r1, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <HAL_RCC_OscConfig+0x4b4>)
 8002532:	2201      	movs	r2, #1
 8002534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002536:	f7fe fc97 	bl	8000e68 <HAL_GetTick>
 800253a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800253c:	e008      	b.n	8002550 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800253e:	f7fe fc93 	bl	8000e68 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e064      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002550:	4b11      	ldr	r3, [pc, #68]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0f0      	beq.n	800253e <HAL_RCC_OscConfig+0x452>
 800255c:	e05c      	b.n	8002618 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_OscConfig+0x4b4>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fc80 	bl	8000e68 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fc7c 	bl	8000e68 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e04d      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_OscConfig+0x4ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x480>
 800258a:	e045      	b.n	8002618 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e040      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000
 80025a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025a4:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <HAL_RCC_OscConfig+0x538>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d030      	beq.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025bc:	429a      	cmp	r2, r3
 80025be:	d129      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d122      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025dc:	4293      	cmp	r3, r2
 80025de:	d119      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	3b01      	subs	r3, #1
 80025ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d10f      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d107      	bne.n	8002614 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002610:	429a      	cmp	r2, r3
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800

08002628 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e066      	b.n	800270c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7f5b      	ldrb	r3, [r3, #29]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fa54 	bl	8000afc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	22ca      	movs	r2, #202	; 0xca
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2253      	movs	r2, #83	; 0x53
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 fa45 	bl	8002afa <RTC_EnterInitMode>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d12c      	bne.n	80026d4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800268c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68d2      	ldr	r2, [r2, #12]
 80026b4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6919      	ldr	r1, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	041a      	lsls	r2, r3, #16
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fa4c 	bl	8002b68 <RTC_ExitInitMode>
 80026d0:	4603      	mov	r3, r0
 80026d2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d113      	bne.n	8002702 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	7f1b      	ldrb	r3, [r3, #28]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_RTC_SetTime+0x1c>
 800272c:	2302      	movs	r3, #2
 800272e:	e087      	b.n	8002840 <HAL_RTC_SetTime+0x12c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2202      	movs	r2, #2
 800273a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d126      	bne.n	8002790 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d102      	bne.n	8002756 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2200      	movs	r2, #0
 8002754:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fa29 	bl	8002bb2 <RTC_ByteToBcd2>
 8002760:	4603      	mov	r3, r0
 8002762:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fa22 	bl	8002bb2 <RTC_ByteToBcd2>
 800276e:	4603      	mov	r3, r0
 8002770:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002772:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	789b      	ldrb	r3, [r3, #2]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fa1a 	bl	8002bb2 <RTC_ByteToBcd2>
 800277e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002780:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	78db      	ldrb	r3, [r3, #3]
 8002788:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800278a:	4313      	orrs	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e018      	b.n	80027c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800279a:	2b00      	cmp	r3, #0
 800279c:	d102      	bne.n	80027a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2200      	movs	r2, #0
 80027a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	785b      	ldrb	r3, [r3, #1]
 80027ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027b0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80027b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	78db      	ldrb	r3, [r3, #3]
 80027bc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	22ca      	movs	r2, #202	; 0xca
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2253      	movs	r2, #83	; 0x53
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 f991 	bl	8002afa <RTC_EnterInitMode>
 80027d8:	4603      	mov	r3, r0
 80027da:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d120      	bne.n	8002824 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80027ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80027f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002800:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6899      	ldr	r1, [r3, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	431a      	orrs	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f9a4 	bl	8002b68 <RTC_ExitInitMode>
 8002820:	4603      	mov	r3, r0
 8002822:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2201      	movs	r2, #1
 800282e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	22ff      	movs	r2, #255	; 0xff
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	771a      	strb	r2, [r3, #28]

  return status;
 800283e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002840:	4618      	mov	r0, r3
 8002842:	371c      	adds	r7, #28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd90      	pop	{r4, r7, pc}

08002848 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	60b9      	str	r1, [r7, #8]
 8002852:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800287a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800287e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	0c1b      	lsrs	r3, r3, #16
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800288a:	b2da      	uxtb	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	b2db      	uxtb	r3, r3
 8002896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800289a:	b2da      	uxtb	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	0d9b      	lsrs	r3, r3, #22
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d11a      	bne.n	80028fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 f98f 	bl	8002bec <RTC_Bcd2ToByte>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	785b      	ldrb	r3, [r3, #1]
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 f986 	bl	8002bec <RTC_Bcd2ToByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	789b      	ldrb	r3, [r3, #2]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f97d 	bl	8002bec <RTC_Bcd2ToByte>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	7f1b      	ldrb	r3, [r3, #28]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_RTC_SetDate+0x1c>
 800291c:	2302      	movs	r3, #2
 800291e:	e071      	b.n	8002a04 <HAL_RTC_SetDate+0x100>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2202      	movs	r2, #2
 800292a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10e      	bne.n	8002950 <HAL_RTC_SetDate+0x4c>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	785b      	ldrb	r3, [r3, #1]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	785b      	ldrb	r3, [r3, #1]
 8002942:	f023 0310 	bic.w	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	330a      	adds	r3, #10
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d11c      	bne.n	8002990 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	78db      	ldrb	r3, [r3, #3]
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f929 	bl	8002bb2 <RTC_ByteToBcd2>
 8002960:	4603      	mov	r3, r0
 8002962:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	4618      	mov	r0, r3
 800296a:	f000 f922 	bl	8002bb2 <RTC_ByteToBcd2>
 800296e:	4603      	mov	r3, r0
 8002970:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002972:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	789b      	ldrb	r3, [r3, #2]
 8002978:	4618      	mov	r0, r3
 800297a:	f000 f91a 	bl	8002bb2 <RTC_ByteToBcd2>
 800297e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002980:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e00e      	b.n	80029ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	78db      	ldrb	r3, [r3, #3]
 8002994:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	785b      	ldrb	r3, [r3, #1]
 800299a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800299c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80029a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	22ca      	movs	r2, #202	; 0xca
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2253      	movs	r2, #83	; 0x53
 80029bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f89b 	bl	8002afa <RTC_EnterInitMode>
 80029c4:	4603      	mov	r3, r0
 80029c6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80029dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f8c2 	bl	8002b68 <RTC_ExitInitMode>
 80029e4:	4603      	mov	r3, r0
 80029e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80029e8:	7cfb      	ldrb	r3, [r7, #19]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2201      	movs	r2, #1
 80029f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	22ff      	movs	r2, #255	; 0xff
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	771a      	strb	r2, [r3, #28]

  return status;
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	371c      	adds	r7, #28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd90      	pop	{r4, r7, pc}

08002a0c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002a26:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	0c1b      	lsrs	r3, r3, #16
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11a      	bne.n	8002aa0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	78db      	ldrb	r3, [r3, #3]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f000 f8bc 	bl	8002bec <RTC_Bcd2ToByte>
 8002a74:	4603      	mov	r3, r0
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f8b3 	bl	8002bec <RTC_Bcd2ToByte>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	789b      	ldrb	r3, [r3, #2]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f8aa 	bl	8002bec <RTC_Bcd2ToByte>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ac4:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac6:	f7fe f9cf 	bl	8000e68 <HAL_GetTick>
 8002aca:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002acc:	e009      	b.n	8002ae2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ace:	f7fe f9cb 	bl	8000e68 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002adc:	d901      	bls.n	8002ae2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e007      	b.n	8002af2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ee      	beq.n	8002ace <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d122      	bne.n	8002b5e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b28:	f7fe f99e 	bl	8000e68 <HAL_GetTick>
 8002b2c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b2e:	e00c      	b.n	8002b4a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b30:	f7fe f99a 	bl	8000e68 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3e:	d904      	bls.n	8002b4a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2204      	movs	r2, #4
 8002b44:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <RTC_EnterInitMode+0x64>
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d1e8      	bne.n	8002b30 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b82:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ff89 	bl	8002aaa <HAL_RTC_WaitForSynchro>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d004      	beq.n	8002ba8 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8002bc0:	e005      	b.n	8002bce <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
 8002bca:	3b0a      	subs	r3, #10
 8002bcc:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d8f6      	bhi.n	8002bc2 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	b2db      	uxtb	r3, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	005b      	lsls	r3, r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	4413      	add	r3, r2
 8002c16:	b2db      	uxtb	r3, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3350      	adds	r3, #80	; 0x50
 8002c3a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e041      	b.n	8002cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f839 	bl	8002cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 f9d8 	bl	800304c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d001      	beq.n	8002d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e04e      	b.n	8002dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0201 	orr.w	r2, r2, #1
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a23      	ldr	r2, [pc, #140]	; (8002dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d022      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d4e:	d01d      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d018      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1e      	ldr	r2, [pc, #120]	; (8002dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d013      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00e      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d009      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a19      	ldr	r2, [pc, #100]	; (8002de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d004      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x80>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a18      	ldr	r2, [pc, #96]	; (8002de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d111      	bne.n	8002db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d010      	beq.n	8002dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0201 	orr.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dae:	e007      	b.n	8002dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40001800 	.word	0x40001800

08002dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d122      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d11b      	bne.n	8002e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0202 	mvn.w	r2, #2
 8002e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8ee 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002e34:	e005      	b.n	8002e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 f8e0 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f8f1 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0204 	mvn.w	r2, #4
 8002e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8c4 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8b6 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f8c7 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0208 	mvn.w	r2, #8
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f89a 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f88c 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f89d 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b10      	cmp	r3, #16
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0210 	mvn.w	r2, #16
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f870 	bl	8003010 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f862 	bl	8002ffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f873 	bl	8003024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10e      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d107      	bne.n	8002f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0201 	mvn.w	r2, #1
 8002f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fd82 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7a:	2b80      	cmp	r3, #128	; 0x80
 8002f7c:	d10e      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f88:	2b80      	cmp	r3, #128	; 0x80
 8002f8a:	d107      	bne.n	8002f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f902 	bl	80031a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f838 	bl	8003038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0320 	and.w	r3, r3, #32
 8002fd2:	2b20      	cmp	r3, #32
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b20      	cmp	r3, #32
 8002fe2:	d107      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0220 	mvn.w	r2, #32
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f8cc 	bl	800318c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a40      	ldr	r2, [pc, #256]	; (8003160 <TIM_Base_SetConfig+0x114>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306a:	d00f      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a3d      	ldr	r2, [pc, #244]	; (8003164 <TIM_Base_SetConfig+0x118>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d00b      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a3c      	ldr	r2, [pc, #240]	; (8003168 <TIM_Base_SetConfig+0x11c>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d007      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a3b      	ldr	r2, [pc, #236]	; (800316c <TIM_Base_SetConfig+0x120>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_Base_SetConfig+0x40>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a3a      	ldr	r2, [pc, #232]	; (8003170 <TIM_Base_SetConfig+0x124>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a2f      	ldr	r2, [pc, #188]	; (8003160 <TIM_Base_SetConfig+0x114>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d02b      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d027      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <TIM_Base_SetConfig+0x118>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d023      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a2b      	ldr	r2, [pc, #172]	; (8003168 <TIM_Base_SetConfig+0x11c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01f      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a2a      	ldr	r2, [pc, #168]	; (800316c <TIM_Base_SetConfig+0x120>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01b      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a29      	ldr	r2, [pc, #164]	; (8003170 <TIM_Base_SetConfig+0x124>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d017      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <TIM_Base_SetConfig+0x128>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a27      	ldr	r2, [pc, #156]	; (8003178 <TIM_Base_SetConfig+0x12c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00f      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a26      	ldr	r2, [pc, #152]	; (800317c <TIM_Base_SetConfig+0x130>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a25      	ldr	r2, [pc, #148]	; (8003180 <TIM_Base_SetConfig+0x134>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a24      	ldr	r2, [pc, #144]	; (8003184 <TIM_Base_SetConfig+0x138>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a23      	ldr	r2, [pc, #140]	; (8003188 <TIM_Base_SetConfig+0x13c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <TIM_Base_SetConfig+0x114>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d003      	beq.n	8003144 <TIM_Base_SetConfig+0xf8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <TIM_Base_SetConfig+0x124>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d103      	bne.n	800314c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	615a      	str	r2, [r3, #20]
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40010000 	.word	0x40010000
 8003164:	40000400 	.word	0x40000400
 8003168:	40000800 	.word	0x40000800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40010400 	.word	0x40010400
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800
 8003180:	40001800 	.word	0x40001800
 8003184:	40001c00 	.word	0x40001c00
 8003188:	40002000 	.word	0x40002000

0800318c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e03f      	b.n	8003246 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fcb8 	bl	8000b50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f929 	bl	8003450 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800320c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800321c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800322c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b08a      	sub	sp, #40	; 0x28
 8003252:	af02      	add	r7, sp, #8
 8003254:	60f8      	str	r0, [r7, #12]
 8003256:	60b9      	str	r1, [r7, #8]
 8003258:	603b      	str	r3, [r7, #0]
 800325a:	4613      	mov	r3, r2
 800325c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d17c      	bne.n	8003368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HAL_UART_Transmit+0x2c>
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e075      	b.n	800336a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_UART_Transmit+0x3e>
 8003288:	2302      	movs	r3, #2
 800328a:	e06e      	b.n	800336a <HAL_UART_Transmit+0x11c>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2221      	movs	r2, #33	; 0x21
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a2:	f7fd fde1 	bl	8000e68 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	88fa      	ldrh	r2, [r7, #6]
 80032ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	88fa      	ldrh	r2, [r7, #6]
 80032b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d108      	bne.n	80032d0 <HAL_UART_Transmit+0x82>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e003      	b.n	80032d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032e0:	e02a      	b.n	8003338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	9300      	str	r3, [sp, #0]
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2200      	movs	r2, #0
 80032ea:	2180      	movs	r1, #128	; 0x80
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 f840 	bl	8003372 <UART_WaitOnFlagUntilTimeout>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d001      	beq.n	80032fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e036      	b.n	800336a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	3302      	adds	r3, #2
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	e007      	b.n	800332a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	3301      	adds	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332e:	b29b      	uxth	r3, r3
 8003330:	3b01      	subs	r3, #1
 8003332:	b29a      	uxth	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1cf      	bne.n	80032e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	2140      	movs	r1, #64	; 0x40
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f810 	bl	8003372 <UART_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e006      	b.n	800336a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b090      	sub	sp, #64	; 0x40
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003382:	e050      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800338a:	d04c      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800338c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003392:	f7fd fd69 	bl	8000e68 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800339e:	429a      	cmp	r2, r3
 80033a0:	d241      	bcs.n	8003426 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033c2:	637a      	str	r2, [r7, #52]	; 0x34
 80033c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e5      	bne.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3314      	adds	r3, #20
 80033dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	e853 3f00 	ldrex	r3, [r3]
 80033e4:	613b      	str	r3, [r7, #16]
   return(result);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3314      	adds	r3, #20
 80033f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f6:	623a      	str	r2, [r7, #32]
 80033f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	69f9      	ldr	r1, [r7, #28]
 80033fc:	6a3a      	ldr	r2, [r7, #32]
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	61bb      	str	r3, [r7, #24]
   return(result);
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e5      	bne.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e00f      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	429a      	cmp	r2, r3
 8003442:	d09f      	beq.n	8003384 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3740      	adds	r7, #64	; 0x40
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003454:	b0c0      	sub	sp, #256	; 0x100
 8003456:	af00      	add	r7, sp, #0
 8003458:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800345c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	68d9      	ldr	r1, [r3, #12]
 800346e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	ea40 0301 	orr.w	r3, r0, r1
 8003478:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800347a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	431a      	orrs	r2, r3
 8003488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	431a      	orrs	r2, r3
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80034a8:	f021 010c 	bic.w	r1, r1, #12
 80034ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034b6:	430b      	orrs	r3, r1
 80034b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ca:	6999      	ldr	r1, [r3, #24]
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	ea40 0301 	orr.w	r3, r0, r1
 80034d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	4b8f      	ldr	r3, [pc, #572]	; (800371c <UART_SetConfig+0x2cc>)
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d005      	beq.n	80034f0 <UART_SetConfig+0xa0>
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b8d      	ldr	r3, [pc, #564]	; (8003720 <UART_SetConfig+0x2d0>)
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d104      	bne.n	80034fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034f0:	f7fe f85c 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 80034f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034f8:	e003      	b.n	8003502 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034fa:	f7fe f843 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 80034fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350c:	f040 810c 	bne.w	8003728 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003514:	2200      	movs	r2, #0
 8003516:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800351a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800351e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003522:	4622      	mov	r2, r4
 8003524:	462b      	mov	r3, r5
 8003526:	1891      	adds	r1, r2, r2
 8003528:	65b9      	str	r1, [r7, #88]	; 0x58
 800352a:	415b      	adcs	r3, r3
 800352c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800352e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003532:	4621      	mov	r1, r4
 8003534:	eb12 0801 	adds.w	r8, r2, r1
 8003538:	4629      	mov	r1, r5
 800353a:	eb43 0901 	adc.w	r9, r3, r1
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800354a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800354e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003552:	4690      	mov	r8, r2
 8003554:	4699      	mov	r9, r3
 8003556:	4623      	mov	r3, r4
 8003558:	eb18 0303 	adds.w	r3, r8, r3
 800355c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003560:	462b      	mov	r3, r5
 8003562:	eb49 0303 	adc.w	r3, r9, r3
 8003566:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003576:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800357a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800357e:	460b      	mov	r3, r1
 8003580:	18db      	adds	r3, r3, r3
 8003582:	653b      	str	r3, [r7, #80]	; 0x50
 8003584:	4613      	mov	r3, r2
 8003586:	eb42 0303 	adc.w	r3, r2, r3
 800358a:	657b      	str	r3, [r7, #84]	; 0x54
 800358c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003590:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003594:	f7fc fe94 	bl	80002c0 <__aeabi_uldivmod>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4b61      	ldr	r3, [pc, #388]	; (8003724 <UART_SetConfig+0x2d4>)
 800359e:	fba3 2302 	umull	r2, r3, r3, r2
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	011c      	lsls	r4, r3, #4
 80035a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035aa:	2200      	movs	r2, #0
 80035ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80035b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80035b8:	4642      	mov	r2, r8
 80035ba:	464b      	mov	r3, r9
 80035bc:	1891      	adds	r1, r2, r2
 80035be:	64b9      	str	r1, [r7, #72]	; 0x48
 80035c0:	415b      	adcs	r3, r3
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035c8:	4641      	mov	r1, r8
 80035ca:	eb12 0a01 	adds.w	sl, r2, r1
 80035ce:	4649      	mov	r1, r9
 80035d0:	eb43 0b01 	adc.w	fp, r3, r1
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035e8:	4692      	mov	sl, r2
 80035ea:	469b      	mov	fp, r3
 80035ec:	4643      	mov	r3, r8
 80035ee:	eb1a 0303 	adds.w	r3, sl, r3
 80035f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035f6:	464b      	mov	r3, r9
 80035f8:	eb4b 0303 	adc.w	r3, fp, r3
 80035fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800360c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003610:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003614:	460b      	mov	r3, r1
 8003616:	18db      	adds	r3, r3, r3
 8003618:	643b      	str	r3, [r7, #64]	; 0x40
 800361a:	4613      	mov	r3, r2
 800361c:	eb42 0303 	adc.w	r3, r2, r3
 8003620:	647b      	str	r3, [r7, #68]	; 0x44
 8003622:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003626:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800362a:	f7fc fe49 	bl	80002c0 <__aeabi_uldivmod>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4611      	mov	r1, r2
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <UART_SetConfig+0x2d4>)
 8003636:	fba3 2301 	umull	r2, r3, r3, r1
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2264      	movs	r2, #100	; 0x64
 800363e:	fb02 f303 	mul.w	r3, r2, r3
 8003642:	1acb      	subs	r3, r1, r3
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800364a:	4b36      	ldr	r3, [pc, #216]	; (8003724 <UART_SetConfig+0x2d4>)
 800364c:	fba3 2302 	umull	r2, r3, r3, r2
 8003650:	095b      	lsrs	r3, r3, #5
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003658:	441c      	add	r4, r3
 800365a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800365e:	2200      	movs	r2, #0
 8003660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003664:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003668:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800366c:	4642      	mov	r2, r8
 800366e:	464b      	mov	r3, r9
 8003670:	1891      	adds	r1, r2, r2
 8003672:	63b9      	str	r1, [r7, #56]	; 0x38
 8003674:	415b      	adcs	r3, r3
 8003676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800367c:	4641      	mov	r1, r8
 800367e:	1851      	adds	r1, r2, r1
 8003680:	6339      	str	r1, [r7, #48]	; 0x30
 8003682:	4649      	mov	r1, r9
 8003684:	414b      	adcs	r3, r1
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003694:	4659      	mov	r1, fp
 8003696:	00cb      	lsls	r3, r1, #3
 8003698:	4651      	mov	r1, sl
 800369a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800369e:	4651      	mov	r1, sl
 80036a0:	00ca      	lsls	r2, r1, #3
 80036a2:	4610      	mov	r0, r2
 80036a4:	4619      	mov	r1, r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	4642      	mov	r2, r8
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036b0:	464b      	mov	r3, r9
 80036b2:	460a      	mov	r2, r1
 80036b4:	eb42 0303 	adc.w	r3, r2, r3
 80036b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036d0:	460b      	mov	r3, r1
 80036d2:	18db      	adds	r3, r3, r3
 80036d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d6:	4613      	mov	r3, r2
 80036d8:	eb42 0303 	adc.w	r3, r2, r3
 80036dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036e6:	f7fc fdeb 	bl	80002c0 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <UART_SetConfig+0x2d4>)
 80036f0:	fba3 1302 	umull	r1, r3, r3, r2
 80036f4:	095b      	lsrs	r3, r3, #5
 80036f6:	2164      	movs	r1, #100	; 0x64
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	3332      	adds	r3, #50	; 0x32
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <UART_SetConfig+0x2d4>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	f003 0207 	and.w	r2, r3, #7
 800370e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4422      	add	r2, r4
 8003716:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003718:	e105      	b.n	8003926 <UART_SetConfig+0x4d6>
 800371a:	bf00      	nop
 800371c:	40011000 	.word	0x40011000
 8003720:	40011400 	.word	0x40011400
 8003724:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800372c:	2200      	movs	r2, #0
 800372e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003732:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003736:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800373a:	4642      	mov	r2, r8
 800373c:	464b      	mov	r3, r9
 800373e:	1891      	adds	r1, r2, r2
 8003740:	6239      	str	r1, [r7, #32]
 8003742:	415b      	adcs	r3, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800374a:	4641      	mov	r1, r8
 800374c:	1854      	adds	r4, r2, r1
 800374e:	4649      	mov	r1, r9
 8003750:	eb43 0501 	adc.w	r5, r3, r1
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	00eb      	lsls	r3, r5, #3
 800375e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003762:	00e2      	lsls	r2, r4, #3
 8003764:	4614      	mov	r4, r2
 8003766:	461d      	mov	r5, r3
 8003768:	4643      	mov	r3, r8
 800376a:	18e3      	adds	r3, r4, r3
 800376c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003770:	464b      	mov	r3, r9
 8003772:	eb45 0303 	adc.w	r3, r5, r3
 8003776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003786:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003796:	4629      	mov	r1, r5
 8003798:	008b      	lsls	r3, r1, #2
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037a0:	4621      	mov	r1, r4
 80037a2:	008a      	lsls	r2, r1, #2
 80037a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80037a8:	f7fc fd8a 	bl	80002c0 <__aeabi_uldivmod>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4b60      	ldr	r3, [pc, #384]	; (8003934 <UART_SetConfig+0x4e4>)
 80037b2:	fba3 2302 	umull	r2, r3, r3, r2
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	011c      	lsls	r4, r3, #4
 80037ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	1891      	adds	r1, r2, r2
 80037d2:	61b9      	str	r1, [r7, #24]
 80037d4:	415b      	adcs	r3, r3
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037dc:	4641      	mov	r1, r8
 80037de:	1851      	adds	r1, r2, r1
 80037e0:	6139      	str	r1, [r7, #16]
 80037e2:	4649      	mov	r1, r9
 80037e4:	414b      	adcs	r3, r1
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	f04f 0300 	mov.w	r3, #0
 80037f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f4:	4659      	mov	r1, fp
 80037f6:	00cb      	lsls	r3, r1, #3
 80037f8:	4651      	mov	r1, sl
 80037fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fe:	4651      	mov	r1, sl
 8003800:	00ca      	lsls	r2, r1, #3
 8003802:	4610      	mov	r0, r2
 8003804:	4619      	mov	r1, r3
 8003806:	4603      	mov	r3, r0
 8003808:	4642      	mov	r2, r8
 800380a:	189b      	adds	r3, r3, r2
 800380c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003810:	464b      	mov	r3, r9
 8003812:	460a      	mov	r2, r1
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	67bb      	str	r3, [r7, #120]	; 0x78
 8003826:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003834:	4649      	mov	r1, r9
 8003836:	008b      	lsls	r3, r1, #2
 8003838:	4641      	mov	r1, r8
 800383a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800383e:	4641      	mov	r1, r8
 8003840:	008a      	lsls	r2, r1, #2
 8003842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003846:	f7fc fd3b 	bl	80002c0 <__aeabi_uldivmod>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4b39      	ldr	r3, [pc, #228]	; (8003934 <UART_SetConfig+0x4e4>)
 8003850:	fba3 1302 	umull	r1, r3, r3, r2
 8003854:	095b      	lsrs	r3, r3, #5
 8003856:	2164      	movs	r1, #100	; 0x64
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	3332      	adds	r3, #50	; 0x32
 8003862:	4a34      	ldr	r2, [pc, #208]	; (8003934 <UART_SetConfig+0x4e4>)
 8003864:	fba2 2303 	umull	r2, r3, r2, r3
 8003868:	095b      	lsrs	r3, r3, #5
 800386a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386e:	441c      	add	r4, r3
 8003870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003874:	2200      	movs	r2, #0
 8003876:	673b      	str	r3, [r7, #112]	; 0x70
 8003878:	677a      	str	r2, [r7, #116]	; 0x74
 800387a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800387e:	4642      	mov	r2, r8
 8003880:	464b      	mov	r3, r9
 8003882:	1891      	adds	r1, r2, r2
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	415b      	adcs	r3, r3
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800388e:	4641      	mov	r1, r8
 8003890:	1851      	adds	r1, r2, r1
 8003892:	6039      	str	r1, [r7, #0]
 8003894:	4649      	mov	r1, r9
 8003896:	414b      	adcs	r3, r1
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	f04f 0300 	mov.w	r3, #0
 80038a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80038a6:	4659      	mov	r1, fp
 80038a8:	00cb      	lsls	r3, r1, #3
 80038aa:	4651      	mov	r1, sl
 80038ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038b0:	4651      	mov	r1, sl
 80038b2:	00ca      	lsls	r2, r1, #3
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	4603      	mov	r3, r0
 80038ba:	4642      	mov	r2, r8
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	66bb      	str	r3, [r7, #104]	; 0x68
 80038c0:	464b      	mov	r3, r9
 80038c2:	460a      	mov	r2, r1
 80038c4:	eb42 0303 	adc.w	r3, r2, r3
 80038c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	663b      	str	r3, [r7, #96]	; 0x60
 80038d4:	667a      	str	r2, [r7, #100]	; 0x64
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038e2:	4649      	mov	r1, r9
 80038e4:	008b      	lsls	r3, r1, #2
 80038e6:	4641      	mov	r1, r8
 80038e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038ec:	4641      	mov	r1, r8
 80038ee:	008a      	lsls	r2, r1, #2
 80038f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038f4:	f7fc fce4 	bl	80002c0 <__aeabi_uldivmod>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <UART_SetConfig+0x4e4>)
 80038fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2164      	movs	r1, #100	; 0x64
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	3332      	adds	r3, #50	; 0x32
 8003910:	4a08      	ldr	r2, [pc, #32]	; (8003934 <UART_SetConfig+0x4e4>)
 8003912:	fba2 2303 	umull	r2, r3, r2, r3
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	f003 020f 	and.w	r2, r3, #15
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4422      	add	r2, r4
 8003924:	609a      	str	r2, [r3, #8]
}
 8003926:	bf00      	nop
 8003928:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800392c:	46bd      	mov	sp, r7
 800392e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003932:	bf00      	nop
 8003934:	51eb851f 	.word	0x51eb851f

08003938 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800394a:	2b84      	cmp	r3, #132	; 0x84
 800394c:	d005      	beq.n	800395a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800394e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	3303      	adds	r3, #3
 8003958:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800395a:	68fb      	ldr	r3, [r7, #12]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800396c:	f000 faf6 	bl	8003f5c <vTaskStartScheduler>
  
  return osOK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	bd80      	pop	{r7, pc}

08003976 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003978:	b089      	sub	sp, #36	; 0x24
 800397a:	af04      	add	r7, sp, #16
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d020      	beq.n	80039ca <osThreadCreate+0x54>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01c      	beq.n	80039ca <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685c      	ldr	r4, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681d      	ldr	r5, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691e      	ldr	r6, [r3, #16]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ffc8 	bl	8003938 <makeFreeRtosPriority>
 80039a8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039b2:	9202      	str	r2, [sp, #8]
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	9100      	str	r1, [sp, #0]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	4632      	mov	r2, r6
 80039bc:	4629      	mov	r1, r5
 80039be:	4620      	mov	r0, r4
 80039c0:	f000 f8ed 	bl	8003b9e <xTaskCreateStatic>
 80039c4:	4603      	mov	r3, r0
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e01c      	b.n	8003a04 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685c      	ldr	r4, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039d6:	b29e      	uxth	r6, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff ffaa 	bl	8003938 <makeFreeRtosPriority>
 80039e4:	4602      	mov	r2, r0
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	9301      	str	r3, [sp, #4]
 80039ec:	9200      	str	r2, [sp, #0]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	4632      	mov	r2, r6
 80039f2:	4629      	mov	r1, r5
 80039f4:	4620      	mov	r0, r4
 80039f6:	f000 f92f 	bl	8003c58 <xTaskCreate>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d001      	beq.n	8003a04 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	e000      	b.n	8003a06 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003a04:	68fb      	ldr	r3, [r7, #12]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b084      	sub	sp, #16
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <osDelay+0x16>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	e000      	b.n	8003a26 <osDelay+0x18>
 8003a24:	2301      	movs	r3, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fa64 	bl	8003ef4 <vTaskDelay>
  
  return osOK;
 8003a2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f103 0208 	add.w	r2, r3, #8
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f103 0208 	add.w	r2, r3, #8
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f103 0208 	add.w	r2, r3, #8
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aee:	d103      	bne.n	8003af8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e00c      	b.n	8003b12 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3308      	adds	r3, #8
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e002      	b.n	8003b06 <vListInsert+0x2e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d2f6      	bcs.n	8003b00 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6852      	ldr	r2, [r2, #4]
 8003b6a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d103      	bne.n	8003b7e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689a      	ldr	r2, [r3, #8]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b08e      	sub	sp, #56	; 0x38
 8003ba2:	af04      	add	r7, sp, #16
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bc4:	bf00      	nop
 8003bc6:	e7fe      	b.n	8003bc6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <xTaskCreateStatic+0x46>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	61fb      	str	r3, [r7, #28]
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003be4:	23b4      	movs	r3, #180	; 0xb4
 8003be6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	2bb4      	cmp	r3, #180	; 0xb4
 8003bec:	d00a      	beq.n	8003c04 <xTaskCreateStatic+0x66>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	61bb      	str	r3, [r7, #24]
}
 8003c00:	bf00      	nop
 8003c02:	e7fe      	b.n	8003c02 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <xTaskCreateStatic+0xac>
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01b      	beq.n	8003c4a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c24:	2300      	movs	r3, #0
 8003c26:	9303      	str	r3, [sp, #12]
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	f107 0314 	add.w	r3, r7, #20
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f851 	bl	8003ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c44:	f000 f8ec 	bl	8003e20 <prvAddNewTaskToReadyList>
 8003c48:	e001      	b.n	8003c4e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c4e:	697b      	ldr	r3, [r7, #20]
	}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3728      	adds	r7, #40	; 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c68:	88fb      	ldrh	r3, [r7, #6]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 fef3 	bl	8004a58 <pvPortMalloc>
 8003c72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00e      	beq.n	8003c98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c7a:	20b4      	movs	r0, #180	; 0xb4
 8003c7c:	f000 feec 	bl	8004a58 <pvPortMalloc>
 8003c80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c8e:	e005      	b.n	8003c9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f000 ffad 	bl	8004bf0 <vPortFree>
 8003c96:	e001      	b.n	8003c9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d017      	beq.n	8003cd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	2300      	movs	r3, #0
 8003cae:	9303      	str	r3, [sp, #12]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	9302      	str	r3, [sp, #8]
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	9301      	str	r3, [sp, #4]
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f80f 	bl	8003ce4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cc6:	69f8      	ldr	r0, [r7, #28]
 8003cc8:	f000 f8aa 	bl	8003e20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	61bb      	str	r3, [r7, #24]
 8003cd0:	e002      	b.n	8003cd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003cd8:	69bb      	ldr	r3, [r7, #24]
	}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3720      	adds	r7, #32
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
	...

08003ce4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b088      	sub	sp, #32
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f023 0307 	bic.w	r3, r3, #7
 8003d0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <prvInitialiseNewTask+0x48>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	617b      	str	r3, [r7, #20]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d01f      	beq.n	8003d72 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e012      	b.n	8003d5e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	7819      	ldrb	r1, [r3, #0]
 8003d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	3334      	adds	r3, #52	; 0x34
 8003d48:	460a      	mov	r2, r1
 8003d4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d006      	beq.n	8003d66 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d9e9      	bls.n	8003d38 <prvInitialiseNewTask+0x54>
 8003d64:	e000      	b.n	8003d68 <prvInitialiseNewTask+0x84>
			{
				break;
 8003d66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d70:	e003      	b.n	8003d7a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	2b06      	cmp	r3, #6
 8003d7e:	d901      	bls.n	8003d84 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d80:	2306      	movs	r3, #6
 8003d82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	2200      	movs	r2, #0
 8003d94:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	3304      	adds	r3, #4
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff fe6b 	bl	8003a76 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da2:	3318      	adds	r3, #24
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff fe66 	bl	8003a76 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	f1c3 0207 	rsb	r2, r3, #7
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	334c      	adds	r3, #76	; 0x4c
 8003dd4:	2260      	movs	r2, #96	; 0x60
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f861 	bl	8004ea0 <memset>
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	4a0c      	ldr	r2, [pc, #48]	; (8003e14 <prvInitialiseNewTask+0x130>)
 8003de2:	651a      	str	r2, [r3, #80]	; 0x50
 8003de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de6:	4a0c      	ldr	r2, [pc, #48]	; (8003e18 <prvInitialiseNewTask+0x134>)
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
 8003dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <prvInitialiseNewTask+0x138>)
 8003dee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	69b8      	ldr	r0, [r7, #24]
 8003df6:	f000 fc1f 	bl	8004638 <pxPortInitialiseStack>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0c:	bf00      	nop
 8003e0e:	3720      	adds	r7, #32
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	0800590c 	.word	0x0800590c
 8003e18:	0800592c 	.word	0x0800592c
 8003e1c:	080058ec 	.word	0x080058ec

08003e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e28:	f000 fd34 	bl	8004894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <prvAddNewTaskToReadyList+0xb8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	4a29      	ldr	r2, [pc, #164]	; (8003ed8 <prvAddNewTaskToReadyList+0xb8>)
 8003e34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e36:	4b29      	ldr	r3, [pc, #164]	; (8003edc <prvAddNewTaskToReadyList+0xbc>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e3e:	4a27      	ldr	r2, [pc, #156]	; (8003edc <prvAddNewTaskToReadyList+0xbc>)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e44:	4b24      	ldr	r3, [pc, #144]	; (8003ed8 <prvAddNewTaskToReadyList+0xb8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d110      	bne.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e4c:	f000 facc 	bl	80043e8 <prvInitialiseTaskLists>
 8003e50:	e00d      	b.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e52:	4b23      	ldr	r3, [pc, #140]	; (8003ee0 <prvAddNewTaskToReadyList+0xc0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e5a:	4b20      	ldr	r3, [pc, #128]	; (8003edc <prvAddNewTaskToReadyList+0xbc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d802      	bhi.n	8003e6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e68:	4a1c      	ldr	r2, [pc, #112]	; (8003edc <prvAddNewTaskToReadyList+0xbc>)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <prvAddNewTaskToReadyList+0xc4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <prvAddNewTaskToReadyList+0xc4>)
 8003e76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <prvAddNewTaskToReadyList+0xc8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	4a18      	ldr	r2, [pc, #96]	; (8003ee8 <prvAddNewTaskToReadyList+0xc8>)
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e8e:	4613      	mov	r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <prvAddNewTaskToReadyList+0xcc>)
 8003e98:	441a      	add	r2, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7ff fdf5 	bl	8003a90 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ea6:	f000 fd25 	bl	80048f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	; (8003ee0 <prvAddNewTaskToReadyList+0xc0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00e      	beq.n	8003ed0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003eb2:	4b0a      	ldr	r3, [pc, #40]	; (8003edc <prvAddNewTaskToReadyList+0xbc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d207      	bcs.n	8003ed0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <prvAddNewTaskToReadyList+0xd0>)
 8003ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000518 	.word	0x20000518
 8003edc:	20000418 	.word	0x20000418
 8003ee0:	20000524 	.word	0x20000524
 8003ee4:	20000534 	.word	0x20000534
 8003ee8:	20000520 	.word	0x20000520
 8003eec:	2000041c 	.word	0x2000041c
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d017      	beq.n	8003f36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f06:	4b13      	ldr	r3, [pc, #76]	; (8003f54 <vTaskDelay+0x60>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <vTaskDelay+0x30>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	60bb      	str	r3, [r7, #8]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f24:	f000 f884 	bl	8004030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f28:	2100      	movs	r1, #0
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fb1e 	bl	800456c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f30:	f000 f88c 	bl	800404c <xTaskResumeAll>
 8003f34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <vTaskDelay+0x64>)
 8003f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f4c:	bf00      	nop
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000540 	.word	0x20000540
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f6a:	463a      	mov	r2, r7
 8003f6c:	1d39      	adds	r1, r7, #4
 8003f6e:	f107 0308 	add.w	r3, r7, #8
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fc fb26 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	9202      	str	r2, [sp, #8]
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	2300      	movs	r3, #0
 8003f88:	460a      	mov	r2, r1
 8003f8a:	4921      	ldr	r1, [pc, #132]	; (8004010 <vTaskStartScheduler+0xb4>)
 8003f8c:	4821      	ldr	r0, [pc, #132]	; (8004014 <vTaskStartScheduler+0xb8>)
 8003f8e:	f7ff fe06 	bl	8003b9e <xTaskCreateStatic>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <vTaskStartScheduler+0xbc>)
 8003f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f98:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <vTaskStartScheduler+0xbc>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e001      	b.n	8003faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d11b      	bne.n	8003fe8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	613b      	str	r3, [r7, #16]
}
 8003fc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <vTaskStartScheduler+0xc0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	334c      	adds	r3, #76	; 0x4c
 8003fca:	4a15      	ldr	r2, [pc, #84]	; (8004020 <vTaskStartScheduler+0xc4>)
 8003fcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <vTaskStartScheduler+0xc8>)
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fd6:	4b14      	ldr	r3, [pc, #80]	; (8004028 <vTaskStartScheduler+0xcc>)
 8003fd8:	2201      	movs	r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fdc:	4b13      	ldr	r3, [pc, #76]	; (800402c <vTaskStartScheduler+0xd0>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fe2:	f000 fbb5 	bl	8004750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fe6:	e00e      	b.n	8004006 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fee:	d10a      	bne.n	8004006 <vTaskStartScheduler+0xaa>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	60fb      	str	r3, [r7, #12]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <vTaskStartScheduler+0xa8>
}
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	080058cc 	.word	0x080058cc
 8004014:	080043b9 	.word	0x080043b9
 8004018:	2000053c 	.word	0x2000053c
 800401c:	20000418 	.word	0x20000418
 8004020:	20000010 	.word	0x20000010
 8004024:	20000538 	.word	0x20000538
 8004028:	20000524 	.word	0x20000524
 800402c:	2000051c 	.word	0x2000051c

08004030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004034:	4b04      	ldr	r3, [pc, #16]	; (8004048 <vTaskSuspendAll+0x18>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	4a03      	ldr	r2, [pc, #12]	; (8004048 <vTaskSuspendAll+0x18>)
 800403c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800403e:	bf00      	nop
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	20000540 	.word	0x20000540

0800404c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800405a:	4b41      	ldr	r3, [pc, #260]	; (8004160 <xTaskResumeAll+0x114>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <xTaskResumeAll+0x2c>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	603b      	str	r3, [r7, #0]
}
 8004074:	bf00      	nop
 8004076:	e7fe      	b.n	8004076 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004078:	f000 fc0c 	bl	8004894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800407c:	4b38      	ldr	r3, [pc, #224]	; (8004160 <xTaskResumeAll+0x114>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3b01      	subs	r3, #1
 8004082:	4a37      	ldr	r2, [pc, #220]	; (8004160 <xTaskResumeAll+0x114>)
 8004084:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004086:	4b36      	ldr	r3, [pc, #216]	; (8004160 <xTaskResumeAll+0x114>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d161      	bne.n	8004152 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800408e:	4b35      	ldr	r3, [pc, #212]	; (8004164 <xTaskResumeAll+0x118>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d05d      	beq.n	8004152 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004096:	e02e      	b.n	80040f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004098:	4b33      	ldr	r3, [pc, #204]	; (8004168 <xTaskResumeAll+0x11c>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3318      	adds	r3, #24
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fd50 	bl	8003b4a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fd4b 	bl	8003b4a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	2201      	movs	r2, #1
 80040ba:	409a      	lsls	r2, r3
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <xTaskResumeAll+0x120>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	4a2a      	ldr	r2, [pc, #168]	; (800416c <xTaskResumeAll+0x120>)
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4a27      	ldr	r2, [pc, #156]	; (8004170 <xTaskResumeAll+0x124>)
 80040d4:	441a      	add	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f7ff fcd7 	bl	8003a90 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e6:	4b23      	ldr	r3, [pc, #140]	; (8004174 <xTaskResumeAll+0x128>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d302      	bcc.n	80040f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040f0:	4b21      	ldr	r3, [pc, #132]	; (8004178 <xTaskResumeAll+0x12c>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040f6:	4b1c      	ldr	r3, [pc, #112]	; (8004168 <xTaskResumeAll+0x11c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1cc      	bne.n	8004098 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004104:	f000 fa12 	bl	800452c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <xTaskResumeAll+0x130>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d010      	beq.n	8004136 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004114:	f000 f836 	bl	8004184 <xTaskIncrementTick>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800411e:	4b16      	ldr	r3, [pc, #88]	; (8004178 <xTaskResumeAll+0x12c>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3b01      	subs	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1f1      	bne.n	8004114 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <xTaskResumeAll+0x130>)
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <xTaskResumeAll+0x12c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800413e:	2301      	movs	r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004142:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <xTaskResumeAll+0x134>)
 8004144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004152:	f000 fbcf 	bl	80048f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004156:	68bb      	ldr	r3, [r7, #8]
}
 8004158:	4618      	mov	r0, r3
 800415a:	3710      	adds	r7, #16
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000540 	.word	0x20000540
 8004164:	20000518 	.word	0x20000518
 8004168:	200004d8 	.word	0x200004d8
 800416c:	20000520 	.word	0x20000520
 8004170:	2000041c 	.word	0x2000041c
 8004174:	20000418 	.word	0x20000418
 8004178:	2000052c 	.word	0x2000052c
 800417c:	20000528 	.word	0x20000528
 8004180:	e000ed04 	.word	0xe000ed04

08004184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800418e:	4b4e      	ldr	r3, [pc, #312]	; (80042c8 <xTaskIncrementTick+0x144>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	f040 808e 	bne.w	80042b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <xTaskIncrementTick+0x148>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3301      	adds	r3, #1
 800419e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041a0:	4a4a      	ldr	r2, [pc, #296]	; (80042cc <xTaskIncrementTick+0x148>)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d120      	bne.n	80041ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80041ac:	4b48      	ldr	r3, [pc, #288]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <xTaskIncrementTick+0x48>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	603b      	str	r3, [r7, #0]
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xTaskIncrementTick+0x46>
 80041cc:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	4b40      	ldr	r3, [pc, #256]	; (80042d4 <xTaskIncrementTick+0x150>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a3e      	ldr	r2, [pc, #248]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4a3e      	ldr	r2, [pc, #248]	; (80042d4 <xTaskIncrementTick+0x150>)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b3d      	ldr	r3, [pc, #244]	; (80042d8 <xTaskIncrementTick+0x154>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <xTaskIncrementTick+0x154>)
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	f000 f99f 	bl	800452c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <xTaskIncrementTick+0x158>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d348      	bcc.n	800428a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041f8:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <xTaskIncrementTick+0x14c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d104      	bne.n	800420c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004202:	4b36      	ldr	r3, [pc, #216]	; (80042dc <xTaskIncrementTick+0x158>)
 8004204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004208:	601a      	str	r2, [r3, #0]
					break;
 800420a:	e03e      	b.n	800428a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <xTaskIncrementTick+0x14c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	429a      	cmp	r2, r3
 8004222:	d203      	bcs.n	800422c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004224:	4a2d      	ldr	r2, [pc, #180]	; (80042dc <xTaskIncrementTick+0x158>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800422a:	e02e      	b.n	800428a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fc8a 	bl	8003b4a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423a:	2b00      	cmp	r3, #0
 800423c:	d004      	beq.n	8004248 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	3318      	adds	r3, #24
 8004242:	4618      	mov	r0, r3
 8004244:	f7ff fc81 	bl	8003b4a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	2201      	movs	r2, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	4b23      	ldr	r3, [pc, #140]	; (80042e0 <xTaskIncrementTick+0x15c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4313      	orrs	r3, r2
 8004256:	4a22      	ldr	r2, [pc, #136]	; (80042e0 <xTaskIncrementTick+0x15c>)
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <xTaskIncrementTick+0x160>)
 8004268:	441a      	add	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3304      	adds	r3, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4610      	mov	r0, r2
 8004272:	f7ff fc0d 	bl	8003a90 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <xTaskIncrementTick+0x164>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	429a      	cmp	r2, r3
 8004282:	d3b9      	bcc.n	80041f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004284:	2301      	movs	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004288:	e7b6      	b.n	80041f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800428a:	4b17      	ldr	r3, [pc, #92]	; (80042e8 <xTaskIncrementTick+0x164>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004290:	4914      	ldr	r1, [pc, #80]	; (80042e4 <xTaskIncrementTick+0x160>)
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d901      	bls.n	80042a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80042a2:	2301      	movs	r3, #1
 80042a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <xTaskIncrementTick+0x168>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d007      	beq.n	80042be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	e004      	b.n	80042be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <xTaskIncrementTick+0x16c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3301      	adds	r3, #1
 80042ba:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <xTaskIncrementTick+0x16c>)
 80042bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042be:	697b      	ldr	r3, [r7, #20]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20000540 	.word	0x20000540
 80042cc:	2000051c 	.word	0x2000051c
 80042d0:	200004d0 	.word	0x200004d0
 80042d4:	200004d4 	.word	0x200004d4
 80042d8:	20000530 	.word	0x20000530
 80042dc:	20000538 	.word	0x20000538
 80042e0:	20000520 	.word	0x20000520
 80042e4:	2000041c 	.word	0x2000041c
 80042e8:	20000418 	.word	0x20000418
 80042ec:	2000052c 	.word	0x2000052c
 80042f0:	20000528 	.word	0x20000528

080042f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <vTaskSwitchContext+0xac>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004302:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <vTaskSwitchContext+0xb0>)
 8004304:	2201      	movs	r2, #1
 8004306:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004308:	e044      	b.n	8004394 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800430a:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <vTaskSwitchContext+0xb0>)
 800430c:	2200      	movs	r2, #0
 800430e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004310:	4b25      	ldr	r3, [pc, #148]	; (80043a8 <vTaskSwitchContext+0xb4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	fab3 f383 	clz	r3, r3
 800431c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800431e:	7afb      	ldrb	r3, [r7, #11]
 8004320:	f1c3 031f 	rsb	r3, r3, #31
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	4921      	ldr	r1, [pc, #132]	; (80043ac <vTaskSwitchContext+0xb8>)
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4613      	mov	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <vTaskSwitchContext+0x5c>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	607b      	str	r3, [r7, #4]
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <vTaskSwitchContext+0x5a>
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4613      	mov	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4a14      	ldr	r2, [pc, #80]	; (80043ac <vTaskSwitchContext+0xb8>)
 800435c:	4413      	add	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	3308      	adds	r3, #8
 8004372:	429a      	cmp	r2, r3
 8004374:	d104      	bne.n	8004380 <vTaskSwitchContext+0x8c>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	605a      	str	r2, [r3, #4]
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4a0a      	ldr	r2, [pc, #40]	; (80043b0 <vTaskSwitchContext+0xbc>)
 8004388:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800438a:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <vTaskSwitchContext+0xbc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	334c      	adds	r3, #76	; 0x4c
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <vTaskSwitchContext+0xc0>)
 8004392:	6013      	str	r3, [r2, #0]
}
 8004394:	bf00      	nop
 8004396:	371c      	adds	r7, #28
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000540 	.word	0x20000540
 80043a4:	2000052c 	.word	0x2000052c
 80043a8:	20000520 	.word	0x20000520
 80043ac:	2000041c 	.word	0x2000041c
 80043b0:	20000418 	.word	0x20000418
 80043b4:	20000010 	.word	0x20000010

080043b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043c0:	f000 f852 	bl	8004468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043c4:	4b06      	ldr	r3, [pc, #24]	; (80043e0 <prvIdleTask+0x28>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d9f9      	bls.n	80043c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <prvIdleTask+0x2c>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043dc:	e7f0      	b.n	80043c0 <prvIdleTask+0x8>
 80043de:	bf00      	nop
 80043e0:	2000041c 	.word	0x2000041c
 80043e4:	e000ed04 	.word	0xe000ed04

080043e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ee:	2300      	movs	r3, #0
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	e00c      	b.n	800440e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4a12      	ldr	r2, [pc, #72]	; (8004448 <prvInitialiseTaskLists+0x60>)
 8004400:	4413      	add	r3, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fb17 	bl	8003a36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3301      	adds	r3, #1
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b06      	cmp	r3, #6
 8004412:	d9ef      	bls.n	80043f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004414:	480d      	ldr	r0, [pc, #52]	; (800444c <prvInitialiseTaskLists+0x64>)
 8004416:	f7ff fb0e 	bl	8003a36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800441a:	480d      	ldr	r0, [pc, #52]	; (8004450 <prvInitialiseTaskLists+0x68>)
 800441c:	f7ff fb0b 	bl	8003a36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004420:	480c      	ldr	r0, [pc, #48]	; (8004454 <prvInitialiseTaskLists+0x6c>)
 8004422:	f7ff fb08 	bl	8003a36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004426:	480c      	ldr	r0, [pc, #48]	; (8004458 <prvInitialiseTaskLists+0x70>)
 8004428:	f7ff fb05 	bl	8003a36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800442c:	480b      	ldr	r0, [pc, #44]	; (800445c <prvInitialiseTaskLists+0x74>)
 800442e:	f7ff fb02 	bl	8003a36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <prvInitialiseTaskLists+0x78>)
 8004434:	4a05      	ldr	r2, [pc, #20]	; (800444c <prvInitialiseTaskLists+0x64>)
 8004436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <prvInitialiseTaskLists+0x7c>)
 800443a:	4a05      	ldr	r2, [pc, #20]	; (8004450 <prvInitialiseTaskLists+0x68>)
 800443c:	601a      	str	r2, [r3, #0]
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000041c 	.word	0x2000041c
 800444c:	200004a8 	.word	0x200004a8
 8004450:	200004bc 	.word	0x200004bc
 8004454:	200004d8 	.word	0x200004d8
 8004458:	200004ec 	.word	0x200004ec
 800445c:	20000504 	.word	0x20000504
 8004460:	200004d0 	.word	0x200004d0
 8004464:	200004d4 	.word	0x200004d4

08004468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800446e:	e019      	b.n	80044a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004470:	f000 fa10 	bl	8004894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004474:	4b10      	ldr	r3, [pc, #64]	; (80044b8 <prvCheckTasksWaitingTermination+0x50>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff fb62 	bl	8003b4a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004486:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <prvCheckTasksWaitingTermination+0x54>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	3b01      	subs	r3, #1
 800448c:	4a0b      	ldr	r2, [pc, #44]	; (80044bc <prvCheckTasksWaitingTermination+0x54>)
 800448e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <prvCheckTasksWaitingTermination+0x58>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3b01      	subs	r3, #1
 8004496:	4a0a      	ldr	r2, [pc, #40]	; (80044c0 <prvCheckTasksWaitingTermination+0x58>)
 8004498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800449a:	f000 fa2b 	bl	80048f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f810 	bl	80044c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <prvCheckTasksWaitingTermination+0x58>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e1      	bne.n	8004470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	200004ec 	.word	0x200004ec
 80044bc:	20000518 	.word	0x20000518
 80044c0:	20000500 	.word	0x20000500

080044c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	334c      	adds	r3, #76	; 0x4c
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fd8f 	bl	8004ff4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d108      	bne.n	80044f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb83 	bl	8004bf0 <vPortFree>
				vPortFree( pxTCB );
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fb80 	bl	8004bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044f0:	e018      	b.n	8004524 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d103      	bne.n	8004504 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb77 	bl	8004bf0 <vPortFree>
	}
 8004502:	e00f      	b.n	8004524 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800450a:	2b02      	cmp	r3, #2
 800450c:	d00a      	beq.n	8004524 <prvDeleteTCB+0x60>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	60fb      	str	r3, [r7, #12]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <prvDeleteTCB+0x5e>
	}
 8004524:	bf00      	nop
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004532:	4b0c      	ldr	r3, [pc, #48]	; (8004564 <prvResetNextTaskUnblockTime+0x38>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <prvResetNextTaskUnblockTime+0x3c>)
 800453e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004544:	e008      	b.n	8004558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <prvResetNextTaskUnblockTime+0x38>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	4a04      	ldr	r2, [pc, #16]	; (8004568 <prvResetNextTaskUnblockTime+0x3c>)
 8004556:	6013      	str	r3, [r2, #0]
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	200004d0 	.word	0x200004d0
 8004568:	20000538 	.word	0x20000538

0800456c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004576:	4b29      	ldr	r3, [pc, #164]	; (800461c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800457c:	4b28      	ldr	r3, [pc, #160]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3304      	adds	r3, #4
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fae1 	bl	8003b4a <uxListRemove>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	2201      	movs	r2, #1
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	43da      	mvns	r2, r3
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4013      	ands	r3, r2
 80045a2:	4a20      	ldr	r2, [pc, #128]	; (8004624 <prvAddCurrentTaskToDelayedList+0xb8>)
 80045a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ac:	d10a      	bne.n	80045c4 <prvAddCurrentTaskToDelayedList+0x58>
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b4:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3304      	adds	r3, #4
 80045ba:	4619      	mov	r1, r3
 80045bc:	481a      	ldr	r0, [pc, #104]	; (8004628 <prvAddCurrentTaskToDelayedList+0xbc>)
 80045be:	f7ff fa67 	bl	8003a90 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045c2:	e026      	b.n	8004612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4413      	add	r3, r2
 80045ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d209      	bcs.n	80045f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045dc:	4b13      	ldr	r3, [pc, #76]	; (800462c <prvAddCurrentTaskToDelayedList+0xc0>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b0f      	ldr	r3, [pc, #60]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f7ff fa75 	bl	8003ad8 <vListInsert>
}
 80045ee:	e010      	b.n	8004612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f0:	4b0f      	ldr	r3, [pc, #60]	; (8004630 <prvAddCurrentTaskToDelayedList+0xc4>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7ff fa6b 	bl	8003ad8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004602:	4b0c      	ldr	r3, [pc, #48]	; (8004634 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	429a      	cmp	r2, r3
 800460a:	d202      	bcs.n	8004612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800460c:	4a09      	ldr	r2, [pc, #36]	; (8004634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	2000051c 	.word	0x2000051c
 8004620:	20000418 	.word	0x20000418
 8004624:	20000520 	.word	0x20000520
 8004628:	20000504 	.word	0x20000504
 800462c:	200004d4 	.word	0x200004d4
 8004630:	200004d0 	.word	0x200004d0
 8004634:	20000538 	.word	0x20000538

08004638 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3b04      	subs	r3, #4
 8004648:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004650:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3b04      	subs	r3, #4
 8004656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3b04      	subs	r3, #4
 8004666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004668:	4a0c      	ldr	r2, [pc, #48]	; (800469c <pxPortInitialiseStack+0x64>)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3b14      	subs	r3, #20
 8004672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b04      	subs	r3, #4
 800467e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f06f 0202 	mvn.w	r2, #2
 8004686:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b20      	subs	r3, #32
 800468c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	080046a1 	.word	0x080046a1

080046a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <prvTaskExitError+0x54>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b2:	d00a      	beq.n	80046ca <prvTaskExitError+0x2a>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	60fb      	str	r3, [r7, #12]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <prvTaskExitError+0x28>
	__asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	60bb      	str	r3, [r7, #8]
}
 80046dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046de:	bf00      	nop
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0fc      	beq.n	80046e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	3714      	adds	r7, #20
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	2000000c 	.word	0x2000000c
	...

08004700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004700:	4b07      	ldr	r3, [pc, #28]	; (8004720 <pxCurrentTCBConst2>)
 8004702:	6819      	ldr	r1, [r3, #0]
 8004704:	6808      	ldr	r0, [r1, #0]
 8004706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470a:	f380 8809 	msr	PSP, r0
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f04f 0000 	mov.w	r0, #0
 8004716:	f380 8811 	msr	BASEPRI, r0
 800471a:	4770      	bx	lr
 800471c:	f3af 8000 	nop.w

08004720 <pxCurrentTCBConst2>:
 8004720:	20000418 	.word	0x20000418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004724:	bf00      	nop
 8004726:	bf00      	nop

08004728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004728:	4808      	ldr	r0, [pc, #32]	; (800474c <prvPortStartFirstTask+0x24>)
 800472a:	6800      	ldr	r0, [r0, #0]
 800472c:	6800      	ldr	r0, [r0, #0]
 800472e:	f380 8808 	msr	MSP, r0
 8004732:	f04f 0000 	mov.w	r0, #0
 8004736:	f380 8814 	msr	CONTROL, r0
 800473a:	b662      	cpsie	i
 800473c:	b661      	cpsie	f
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	df00      	svc	0
 8004748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800474a:	bf00      	nop
 800474c:	e000ed08 	.word	0xe000ed08

08004750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004756:	4b46      	ldr	r3, [pc, #280]	; (8004870 <xPortStartScheduler+0x120>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a46      	ldr	r2, [pc, #280]	; (8004874 <xPortStartScheduler+0x124>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d10a      	bne.n	8004776 <xPortStartScheduler+0x26>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	613b      	str	r3, [r7, #16]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004776:	4b3e      	ldr	r3, [pc, #248]	; (8004870 <xPortStartScheduler+0x120>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a3f      	ldr	r2, [pc, #252]	; (8004878 <xPortStartScheduler+0x128>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d10a      	bne.n	8004796 <xPortStartScheduler+0x46>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	60fb      	str	r3, [r7, #12]
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004796:	4b39      	ldr	r3, [pc, #228]	; (800487c <xPortStartScheduler+0x12c>)
 8004798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	22ff      	movs	r2, #255	; 0xff
 80047a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b0:	78fb      	ldrb	r3, [r7, #3]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4b31      	ldr	r3, [pc, #196]	; (8004880 <xPortStartScheduler+0x130>)
 80047bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047be:	4b31      	ldr	r3, [pc, #196]	; (8004884 <xPortStartScheduler+0x134>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047c4:	e009      	b.n	80047da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047c6:	4b2f      	ldr	r3, [pc, #188]	; (8004884 <xPortStartScheduler+0x134>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <xPortStartScheduler+0x134>)
 80047ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d0:	78fb      	ldrb	r3, [r7, #3]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b80      	cmp	r3, #128	; 0x80
 80047e4:	d0ef      	beq.n	80047c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047e6:	4b27      	ldr	r3, [pc, #156]	; (8004884 <xPortStartScheduler+0x134>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1c3 0307 	rsb	r3, r3, #7
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d00a      	beq.n	8004808 <xPortStartScheduler+0xb8>
	__asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	60bb      	str	r3, [r7, #8]
}
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004808:	4b1e      	ldr	r3, [pc, #120]	; (8004884 <xPortStartScheduler+0x134>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	4a1d      	ldr	r2, [pc, #116]	; (8004884 <xPortStartScheduler+0x134>)
 8004810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004812:	4b1c      	ldr	r3, [pc, #112]	; (8004884 <xPortStartScheduler+0x134>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800481a:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <xPortStartScheduler+0x134>)
 800481c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004826:	4b18      	ldr	r3, [pc, #96]	; (8004888 <xPortStartScheduler+0x138>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a17      	ldr	r2, [pc, #92]	; (8004888 <xPortStartScheduler+0x138>)
 800482c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004832:	4b15      	ldr	r3, [pc, #84]	; (8004888 <xPortStartScheduler+0x138>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a14      	ldr	r2, [pc, #80]	; (8004888 <xPortStartScheduler+0x138>)
 8004838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800483c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800483e:	f000 f8dd 	bl	80049fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004842:	4b12      	ldr	r3, [pc, #72]	; (800488c <xPortStartScheduler+0x13c>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004848:	f000 f8fc 	bl	8004a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800484c:	4b10      	ldr	r3, [pc, #64]	; (8004890 <xPortStartScheduler+0x140>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0f      	ldr	r2, [pc, #60]	; (8004890 <xPortStartScheduler+0x140>)
 8004852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004858:	f7ff ff66 	bl	8004728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800485c:	f7ff fd4a 	bl	80042f4 <vTaskSwitchContext>
	prvTaskExitError();
 8004860:	f7ff ff1e 	bl	80046a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	e000ed00 	.word	0xe000ed00
 8004874:	410fc271 	.word	0x410fc271
 8004878:	410fc270 	.word	0x410fc270
 800487c:	e000e400 	.word	0xe000e400
 8004880:	20000544 	.word	0x20000544
 8004884:	20000548 	.word	0x20000548
 8004888:	e000ed20 	.word	0xe000ed20
 800488c:	2000000c 	.word	0x2000000c
 8004890:	e000ef34 	.word	0xe000ef34

08004894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	607b      	str	r3, [r7, #4]
}
 80048ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048ae:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <vPortEnterCritical+0x58>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <vPortEnterCritical+0x58>)
 80048b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <vPortEnterCritical+0x58>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d10f      	bne.n	80048e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <vPortEnterCritical+0x5c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	603b      	str	r3, [r7, #0]
}
 80048dc:	bf00      	nop
 80048de:	e7fe      	b.n	80048de <vPortEnterCritical+0x4a>
	}
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	2000000c 	.word	0x2000000c
 80048f0:	e000ed04 	.word	0xe000ed04

080048f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <vPortExitCritical+0x50>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <vPortExitCritical+0x24>
	__asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	607b      	str	r3, [r7, #4]
}
 8004914:	bf00      	nop
 8004916:	e7fe      	b.n	8004916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <vPortExitCritical+0x50>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3b01      	subs	r3, #1
 800491e:	4a09      	ldr	r2, [pc, #36]	; (8004944 <vPortExitCritical+0x50>)
 8004920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004922:	4b08      	ldr	r3, [pc, #32]	; (8004944 <vPortExitCritical+0x50>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <vPortExitCritical+0x42>
 800492a:	2300      	movs	r3, #0
 800492c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	2000000c 	.word	0x2000000c
	...

08004950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004950:	f3ef 8009 	mrs	r0, PSP
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <pxCurrentTCBConst>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	f01e 0f10 	tst.w	lr, #16
 8004960:	bf08      	it	eq
 8004962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	6010      	str	r0, [r2, #0]
 800496c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004974:	f380 8811 	msr	BASEPRI, r0
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f7ff fcb8 	bl	80042f4 <vTaskSwitchContext>
 8004984:	f04f 0000 	mov.w	r0, #0
 8004988:	f380 8811 	msr	BASEPRI, r0
 800498c:	bc09      	pop	{r0, r3}
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	6808      	ldr	r0, [r1, #0]
 8004992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004996:	f01e 0f10 	tst.w	lr, #16
 800499a:	bf08      	it	eq
 800499c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049a0:	f380 8809 	msr	PSP, r0
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	f3af 8000 	nop.w

080049b0 <pxCurrentTCBConst>:
 80049b0:	20000418 	.word	0x20000418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop

080049b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	607b      	str	r3, [r7, #4]
}
 80049d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049d2:	f7ff fbd7 	bl	8004184 <xTaskIncrementTick>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d003      	beq.n	80049e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <SysTick_Handler+0x40>)
 80049de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f383 8811 	msr	BASEPRI, r3
}
 80049ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <vPortSetupTimerInterrupt+0x38>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <vPortSetupTimerInterrupt+0x3c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <vPortSetupTimerInterrupt+0x40>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	099b      	lsrs	r3, r3, #6
 8004a18:	4a09      	ldr	r2, [pc, #36]	; (8004a40 <vPortSetupTimerInterrupt+0x44>)
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <vPortSetupTimerInterrupt+0x34>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010
 8004a34:	e000e018 	.word	0xe000e018
 8004a38:	20000000 	.word	0x20000000
 8004a3c:	10624dd3 	.word	0x10624dd3
 8004a40:	e000e014 	.word	0xe000e014

08004a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a54 <vPortEnableVFP+0x10>
 8004a48:	6801      	ldr	r1, [r0, #0]
 8004a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a4e:	6001      	str	r1, [r0, #0]
 8004a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a52:	bf00      	nop
 8004a54:	e000ed88 	.word	0xe000ed88

08004a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08a      	sub	sp, #40	; 0x28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a64:	f7ff fae4 	bl	8004030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a68:	4b5b      	ldr	r3, [pc, #364]	; (8004bd8 <pvPortMalloc+0x180>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a70:	f000 f920 	bl	8004cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <pvPortMalloc+0x184>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 8093 	bne.w	8004ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01d      	beq.n	8004ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a88:	2208      	movs	r2, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d014      	beq.n	8004ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f023 0307 	bic.w	r3, r3, #7
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	617b      	str	r3, [r7, #20]
}
 8004ac0:	bf00      	nop
 8004ac2:	e7fe      	b.n	8004ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d06e      	beq.n	8004ba8 <pvPortMalloc+0x150>
 8004aca:	4b45      	ldr	r3, [pc, #276]	; (8004be0 <pvPortMalloc+0x188>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d869      	bhi.n	8004ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ad4:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ad8:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <pvPortMalloc+0x18c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ade:	e004      	b.n	8004aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d903      	bls.n	8004afc <pvPortMalloc+0xa4>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1f1      	bne.n	8004ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004afc:	4b36      	ldr	r3, [pc, #216]	; (8004bd8 <pvPortMalloc+0x180>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d050      	beq.n	8004ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b06:	6a3b      	ldr	r3, [r7, #32]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2208      	movs	r2, #8
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	1ad2      	subs	r2, r2, r3
 8004b20:	2308      	movs	r3, #8
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d91f      	bls.n	8004b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <pvPortMalloc+0xf8>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	613b      	str	r3, [r7, #16]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b62:	69b8      	ldr	r0, [r7, #24]
 8004b64:	f000 f908 	bl	8004d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	; (8004be0 <pvPortMalloc+0x188>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	4a1b      	ldr	r2, [pc, #108]	; (8004be0 <pvPortMalloc+0x188>)
 8004b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b76:	4b1a      	ldr	r3, [pc, #104]	; (8004be0 <pvPortMalloc+0x188>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	; (8004be8 <pvPortMalloc+0x190>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d203      	bcs.n	8004b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b82:	4b17      	ldr	r3, [pc, #92]	; (8004be0 <pvPortMalloc+0x188>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <pvPortMalloc+0x190>)
 8004b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <pvPortMalloc+0x184>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <pvPortMalloc+0x194>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <pvPortMalloc+0x194>)
 8004ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ba8:	f7ff fa50 	bl	800404c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <pvPortMalloc+0x174>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	60fb      	str	r3, [r7, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	e7fe      	b.n	8004bca <pvPortMalloc+0x172>
	return pvReturn;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3728      	adds	r7, #40	; 0x28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20004154 	.word	0x20004154
 8004bdc:	20004168 	.word	0x20004168
 8004be0:	20004158 	.word	0x20004158
 8004be4:	2000414c 	.word	0x2000414c
 8004be8:	2000415c 	.word	0x2000415c
 8004bec:	20004160 	.word	0x20004160

08004bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d04d      	beq.n	8004c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c02:	2308      	movs	r3, #8
 8004c04:	425b      	negs	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <vPortFree+0xb8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <vPortFree+0x44>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	60fb      	str	r3, [r7, #12]
}
 8004c30:	bf00      	nop
 8004c32:	e7fe      	b.n	8004c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <vPortFree+0x62>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	60bb      	str	r3, [r7, #8]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	4b14      	ldr	r3, [pc, #80]	; (8004ca8 <vPortFree+0xb8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d01e      	beq.n	8004c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d11a      	bne.n	8004c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <vPortFree+0xb8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c78:	f7ff f9da 	bl	8004030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685a      	ldr	r2, [r3, #4]
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <vPortFree+0xbc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4413      	add	r3, r2
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <vPortFree+0xbc>)
 8004c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8a:	6938      	ldr	r0, [r7, #16]
 8004c8c:	f000 f874 	bl	8004d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <vPortFree+0xc0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a06      	ldr	r2, [pc, #24]	; (8004cb0 <vPortFree+0xc0>)
 8004c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c9a:	f7ff f9d7 	bl	800404c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c9e:	bf00      	nop
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20004168 	.word	0x20004168
 8004cac:	20004158 	.word	0x20004158
 8004cb0:	20004164 	.word	0x20004164

08004cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cc0:	4b27      	ldr	r3, [pc, #156]	; (8004d60 <prvHeapInit+0xac>)
 8004cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3307      	adds	r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0307 	bic.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	4a1f      	ldr	r2, [pc, #124]	; (8004d60 <prvHeapInit+0xac>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <prvHeapInit+0xb0>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <prvHeapInit+0xb0>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d00:	2208      	movs	r2, #8
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <prvHeapInit+0xb4>)
 8004d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <prvHeapInit+0xb4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <prvHeapInit+0xb4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	1ad2      	subs	r2, r2, r3
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d34:	4b0c      	ldr	r3, [pc, #48]	; (8004d68 <prvHeapInit+0xb4>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <prvHeapInit+0xb8>)
 8004d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <prvHeapInit+0xbc>)
 8004d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d4c:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <prvHeapInit+0xc0>)
 8004d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	2000054c 	.word	0x2000054c
 8004d64:	2000414c 	.word	0x2000414c
 8004d68:	20004154 	.word	0x20004154
 8004d6c:	2000415c 	.word	0x2000415c
 8004d70:	20004158 	.word	0x20004158
 8004d74:	20004168 	.word	0x20004168

08004d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <prvInsertBlockIntoFreeList+0xac>)
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e002      	b.n	8004d8c <prvInsertBlockIntoFreeList+0x14>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d8f7      	bhi.n	8004d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	4413      	add	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d108      	bne.n	8004dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685a      	ldr	r2, [r3, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d118      	bne.n	8004e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d00d      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	441a      	add	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e008      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <prvInsertBlockIntoFreeList+0xb0>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	e003      	b.n	8004e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d002      	beq.n	8004e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	2000414c 	.word	0x2000414c
 8004e28:	20004154 	.word	0x20004154

08004e2c <__errno>:
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <__errno+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000010 	.word	0x20000010

08004e38 <__libc_init_array>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4d0d      	ldr	r5, [pc, #52]	; (8004e70 <__libc_init_array+0x38>)
 8004e3c:	4c0d      	ldr	r4, [pc, #52]	; (8004e74 <__libc_init_array+0x3c>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	2600      	movs	r6, #0
 8004e44:	42a6      	cmp	r6, r4
 8004e46:	d109      	bne.n	8004e5c <__libc_init_array+0x24>
 8004e48:	4d0b      	ldr	r5, [pc, #44]	; (8004e78 <__libc_init_array+0x40>)
 8004e4a:	4c0c      	ldr	r4, [pc, #48]	; (8004e7c <__libc_init_array+0x44>)
 8004e4c:	f000 fcf8 	bl	8005840 <_init>
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	2600      	movs	r6, #0
 8004e56:	42a6      	cmp	r6, r4
 8004e58:	d105      	bne.n	8004e66 <__libc_init_array+0x2e>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e60:	4798      	blx	r3
 8004e62:	3601      	adds	r6, #1
 8004e64:	e7ee      	b.n	8004e44 <__libc_init_array+0xc>
 8004e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6a:	4798      	blx	r3
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7f2      	b.n	8004e56 <__libc_init_array+0x1e>
 8004e70:	08005988 	.word	0x08005988
 8004e74:	08005988 	.word	0x08005988
 8004e78:	08005988 	.word	0x08005988
 8004e7c:	0800598c 	.word	0x0800598c

08004e80 <__retarget_lock_acquire_recursive>:
 8004e80:	4770      	bx	lr

08004e82 <__retarget_lock_release_recursive>:
 8004e82:	4770      	bx	lr

08004e84 <memcpy>:
 8004e84:	440a      	add	r2, r1
 8004e86:	4291      	cmp	r1, r2
 8004e88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e8c:	d100      	bne.n	8004e90 <memcpy+0xc>
 8004e8e:	4770      	bx	lr
 8004e90:	b510      	push	{r4, lr}
 8004e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e9a:	4291      	cmp	r1, r2
 8004e9c:	d1f9      	bne.n	8004e92 <memcpy+0xe>
 8004e9e:	bd10      	pop	{r4, pc}

08004ea0 <memset>:
 8004ea0:	4402      	add	r2, r0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d100      	bne.n	8004eaa <memset+0xa>
 8004ea8:	4770      	bx	lr
 8004eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004eae:	e7f9      	b.n	8004ea4 <memset+0x4>

08004eb0 <sbrk_aligned>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	4e0e      	ldr	r6, [pc, #56]	; (8004eec <sbrk_aligned+0x3c>)
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	6831      	ldr	r1, [r6, #0]
 8004eb8:	4605      	mov	r5, r0
 8004eba:	b911      	cbnz	r1, 8004ec2 <sbrk_aligned+0x12>
 8004ebc:	f000 f8f6 	bl	80050ac <_sbrk_r>
 8004ec0:	6030      	str	r0, [r6, #0]
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f000 f8f1 	bl	80050ac <_sbrk_r>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	d00a      	beq.n	8004ee4 <sbrk_aligned+0x34>
 8004ece:	1cc4      	adds	r4, r0, #3
 8004ed0:	f024 0403 	bic.w	r4, r4, #3
 8004ed4:	42a0      	cmp	r0, r4
 8004ed6:	d007      	beq.n	8004ee8 <sbrk_aligned+0x38>
 8004ed8:	1a21      	subs	r1, r4, r0
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f8e6 	bl	80050ac <_sbrk_r>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d101      	bne.n	8004ee8 <sbrk_aligned+0x38>
 8004ee4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ee8:	4620      	mov	r0, r4
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	20004174 	.word	0x20004174

08004ef0 <_malloc_r>:
 8004ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ef4:	1ccd      	adds	r5, r1, #3
 8004ef6:	f025 0503 	bic.w	r5, r5, #3
 8004efa:	3508      	adds	r5, #8
 8004efc:	2d0c      	cmp	r5, #12
 8004efe:	bf38      	it	cc
 8004f00:	250c      	movcc	r5, #12
 8004f02:	2d00      	cmp	r5, #0
 8004f04:	4607      	mov	r7, r0
 8004f06:	db01      	blt.n	8004f0c <_malloc_r+0x1c>
 8004f08:	42a9      	cmp	r1, r5
 8004f0a:	d905      	bls.n	8004f18 <_malloc_r+0x28>
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	603b      	str	r3, [r7, #0]
 8004f10:	2600      	movs	r6, #0
 8004f12:	4630      	mov	r0, r6
 8004f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f18:	4e2e      	ldr	r6, [pc, #184]	; (8004fd4 <_malloc_r+0xe4>)
 8004f1a:	f000 f8f7 	bl	800510c <__malloc_lock>
 8004f1e:	6833      	ldr	r3, [r6, #0]
 8004f20:	461c      	mov	r4, r3
 8004f22:	bb34      	cbnz	r4, 8004f72 <_malloc_r+0x82>
 8004f24:	4629      	mov	r1, r5
 8004f26:	4638      	mov	r0, r7
 8004f28:	f7ff ffc2 	bl	8004eb0 <sbrk_aligned>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	4604      	mov	r4, r0
 8004f30:	d14d      	bne.n	8004fce <_malloc_r+0xde>
 8004f32:	6834      	ldr	r4, [r6, #0]
 8004f34:	4626      	mov	r6, r4
 8004f36:	2e00      	cmp	r6, #0
 8004f38:	d140      	bne.n	8004fbc <_malloc_r+0xcc>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4638      	mov	r0, r7
 8004f40:	eb04 0803 	add.w	r8, r4, r3
 8004f44:	f000 f8b2 	bl	80050ac <_sbrk_r>
 8004f48:	4580      	cmp	r8, r0
 8004f4a:	d13a      	bne.n	8004fc2 <_malloc_r+0xd2>
 8004f4c:	6821      	ldr	r1, [r4, #0]
 8004f4e:	3503      	adds	r5, #3
 8004f50:	1a6d      	subs	r5, r5, r1
 8004f52:	f025 0503 	bic.w	r5, r5, #3
 8004f56:	3508      	adds	r5, #8
 8004f58:	2d0c      	cmp	r5, #12
 8004f5a:	bf38      	it	cc
 8004f5c:	250c      	movcc	r5, #12
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4638      	mov	r0, r7
 8004f62:	f7ff ffa5 	bl	8004eb0 <sbrk_aligned>
 8004f66:	3001      	adds	r0, #1
 8004f68:	d02b      	beq.n	8004fc2 <_malloc_r+0xd2>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	442b      	add	r3, r5
 8004f6e:	6023      	str	r3, [r4, #0]
 8004f70:	e00e      	b.n	8004f90 <_malloc_r+0xa0>
 8004f72:	6822      	ldr	r2, [r4, #0]
 8004f74:	1b52      	subs	r2, r2, r5
 8004f76:	d41e      	bmi.n	8004fb6 <_malloc_r+0xc6>
 8004f78:	2a0b      	cmp	r2, #11
 8004f7a:	d916      	bls.n	8004faa <_malloc_r+0xba>
 8004f7c:	1961      	adds	r1, r4, r5
 8004f7e:	42a3      	cmp	r3, r4
 8004f80:	6025      	str	r5, [r4, #0]
 8004f82:	bf18      	it	ne
 8004f84:	6059      	strne	r1, [r3, #4]
 8004f86:	6863      	ldr	r3, [r4, #4]
 8004f88:	bf08      	it	eq
 8004f8a:	6031      	streq	r1, [r6, #0]
 8004f8c:	5162      	str	r2, [r4, r5]
 8004f8e:	604b      	str	r3, [r1, #4]
 8004f90:	4638      	mov	r0, r7
 8004f92:	f104 060b 	add.w	r6, r4, #11
 8004f96:	f000 f8bf 	bl	8005118 <__malloc_unlock>
 8004f9a:	f026 0607 	bic.w	r6, r6, #7
 8004f9e:	1d23      	adds	r3, r4, #4
 8004fa0:	1af2      	subs	r2, r6, r3
 8004fa2:	d0b6      	beq.n	8004f12 <_malloc_r+0x22>
 8004fa4:	1b9b      	subs	r3, r3, r6
 8004fa6:	50a3      	str	r3, [r4, r2]
 8004fa8:	e7b3      	b.n	8004f12 <_malloc_r+0x22>
 8004faa:	6862      	ldr	r2, [r4, #4]
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	bf0c      	ite	eq
 8004fb0:	6032      	streq	r2, [r6, #0]
 8004fb2:	605a      	strne	r2, [r3, #4]
 8004fb4:	e7ec      	b.n	8004f90 <_malloc_r+0xa0>
 8004fb6:	4623      	mov	r3, r4
 8004fb8:	6864      	ldr	r4, [r4, #4]
 8004fba:	e7b2      	b.n	8004f22 <_malloc_r+0x32>
 8004fbc:	4634      	mov	r4, r6
 8004fbe:	6876      	ldr	r6, [r6, #4]
 8004fc0:	e7b9      	b.n	8004f36 <_malloc_r+0x46>
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4638      	mov	r0, r7
 8004fc8:	f000 f8a6 	bl	8005118 <__malloc_unlock>
 8004fcc:	e7a1      	b.n	8004f12 <_malloc_r+0x22>
 8004fce:	6025      	str	r5, [r4, #0]
 8004fd0:	e7de      	b.n	8004f90 <_malloc_r+0xa0>
 8004fd2:	bf00      	nop
 8004fd4:	20004170 	.word	0x20004170

08004fd8 <cleanup_glue>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	460c      	mov	r4, r1
 8004fdc:	6809      	ldr	r1, [r1, #0]
 8004fde:	4605      	mov	r5, r0
 8004fe0:	b109      	cbz	r1, 8004fe6 <cleanup_glue+0xe>
 8004fe2:	f7ff fff9 	bl	8004fd8 <cleanup_glue>
 8004fe6:	4621      	mov	r1, r4
 8004fe8:	4628      	mov	r0, r5
 8004fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fee:	f000 b899 	b.w	8005124 <_free_r>
	...

08004ff4 <_reclaim_reent>:
 8004ff4:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <_reclaim_reent+0xb4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4283      	cmp	r3, r0
 8004ffa:	b570      	push	{r4, r5, r6, lr}
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	d051      	beq.n	80050a4 <_reclaim_reent+0xb0>
 8005000:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005002:	b143      	cbz	r3, 8005016 <_reclaim_reent+0x22>
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d14a      	bne.n	80050a0 <_reclaim_reent+0xac>
 800500a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800500c:	6819      	ldr	r1, [r3, #0]
 800500e:	b111      	cbz	r1, 8005016 <_reclaim_reent+0x22>
 8005010:	4620      	mov	r0, r4
 8005012:	f000 f887 	bl	8005124 <_free_r>
 8005016:	6961      	ldr	r1, [r4, #20]
 8005018:	b111      	cbz	r1, 8005020 <_reclaim_reent+0x2c>
 800501a:	4620      	mov	r0, r4
 800501c:	f000 f882 	bl	8005124 <_free_r>
 8005020:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005022:	b111      	cbz	r1, 800502a <_reclaim_reent+0x36>
 8005024:	4620      	mov	r0, r4
 8005026:	f000 f87d 	bl	8005124 <_free_r>
 800502a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800502c:	b111      	cbz	r1, 8005034 <_reclaim_reent+0x40>
 800502e:	4620      	mov	r0, r4
 8005030:	f000 f878 	bl	8005124 <_free_r>
 8005034:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005036:	b111      	cbz	r1, 800503e <_reclaim_reent+0x4a>
 8005038:	4620      	mov	r0, r4
 800503a:	f000 f873 	bl	8005124 <_free_r>
 800503e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005040:	b111      	cbz	r1, 8005048 <_reclaim_reent+0x54>
 8005042:	4620      	mov	r0, r4
 8005044:	f000 f86e 	bl	8005124 <_free_r>
 8005048:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800504a:	b111      	cbz	r1, 8005052 <_reclaim_reent+0x5e>
 800504c:	4620      	mov	r0, r4
 800504e:	f000 f869 	bl	8005124 <_free_r>
 8005052:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005054:	b111      	cbz	r1, 800505c <_reclaim_reent+0x68>
 8005056:	4620      	mov	r0, r4
 8005058:	f000 f864 	bl	8005124 <_free_r>
 800505c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800505e:	b111      	cbz	r1, 8005066 <_reclaim_reent+0x72>
 8005060:	4620      	mov	r0, r4
 8005062:	f000 f85f 	bl	8005124 <_free_r>
 8005066:	69a3      	ldr	r3, [r4, #24]
 8005068:	b1e3      	cbz	r3, 80050a4 <_reclaim_reent+0xb0>
 800506a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800506c:	4620      	mov	r0, r4
 800506e:	4798      	blx	r3
 8005070:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005072:	b1b9      	cbz	r1, 80050a4 <_reclaim_reent+0xb0>
 8005074:	4620      	mov	r0, r4
 8005076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800507a:	f7ff bfad 	b.w	8004fd8 <cleanup_glue>
 800507e:	5949      	ldr	r1, [r1, r5]
 8005080:	b941      	cbnz	r1, 8005094 <_reclaim_reent+0xa0>
 8005082:	3504      	adds	r5, #4
 8005084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005086:	2d80      	cmp	r5, #128	; 0x80
 8005088:	68d9      	ldr	r1, [r3, #12]
 800508a:	d1f8      	bne.n	800507e <_reclaim_reent+0x8a>
 800508c:	4620      	mov	r0, r4
 800508e:	f000 f849 	bl	8005124 <_free_r>
 8005092:	e7ba      	b.n	800500a <_reclaim_reent+0x16>
 8005094:	680e      	ldr	r6, [r1, #0]
 8005096:	4620      	mov	r0, r4
 8005098:	f000 f844 	bl	8005124 <_free_r>
 800509c:	4631      	mov	r1, r6
 800509e:	e7ef      	b.n	8005080 <_reclaim_reent+0x8c>
 80050a0:	2500      	movs	r5, #0
 80050a2:	e7ef      	b.n	8005084 <_reclaim_reent+0x90>
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
 80050a6:	bf00      	nop
 80050a8:	20000010 	.word	0x20000010

080050ac <_sbrk_r>:
 80050ac:	b538      	push	{r3, r4, r5, lr}
 80050ae:	4d06      	ldr	r5, [pc, #24]	; (80050c8 <_sbrk_r+0x1c>)
 80050b0:	2300      	movs	r3, #0
 80050b2:	4604      	mov	r4, r0
 80050b4:	4608      	mov	r0, r1
 80050b6:	602b      	str	r3, [r5, #0]
 80050b8:	f7fb fe2e 	bl	8000d18 <_sbrk>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d102      	bne.n	80050c6 <_sbrk_r+0x1a>
 80050c0:	682b      	ldr	r3, [r5, #0]
 80050c2:	b103      	cbz	r3, 80050c6 <_sbrk_r+0x1a>
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	bd38      	pop	{r3, r4, r5, pc}
 80050c8:	20004178 	.word	0x20004178

080050cc <siprintf>:
 80050cc:	b40e      	push	{r1, r2, r3}
 80050ce:	b500      	push	{lr}
 80050d0:	b09c      	sub	sp, #112	; 0x70
 80050d2:	ab1d      	add	r3, sp, #116	; 0x74
 80050d4:	9002      	str	r0, [sp, #8]
 80050d6:	9006      	str	r0, [sp, #24]
 80050d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050dc:	4809      	ldr	r0, [pc, #36]	; (8005104 <siprintf+0x38>)
 80050de:	9107      	str	r1, [sp, #28]
 80050e0:	9104      	str	r1, [sp, #16]
 80050e2:	4909      	ldr	r1, [pc, #36]	; (8005108 <siprintf+0x3c>)
 80050e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e8:	9105      	str	r1, [sp, #20]
 80050ea:	6800      	ldr	r0, [r0, #0]
 80050ec:	9301      	str	r3, [sp, #4]
 80050ee:	a902      	add	r1, sp, #8
 80050f0:	f000 f8c0 	bl	8005274 <_svfiprintf_r>
 80050f4:	9b02      	ldr	r3, [sp, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	b01c      	add	sp, #112	; 0x70
 80050fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005100:	b003      	add	sp, #12
 8005102:	4770      	bx	lr
 8005104:	20000010 	.word	0x20000010
 8005108:	ffff0208 	.word	0xffff0208

0800510c <__malloc_lock>:
 800510c:	4801      	ldr	r0, [pc, #4]	; (8005114 <__malloc_lock+0x8>)
 800510e:	f7ff beb7 	b.w	8004e80 <__retarget_lock_acquire_recursive>
 8005112:	bf00      	nop
 8005114:	2000416c 	.word	0x2000416c

08005118 <__malloc_unlock>:
 8005118:	4801      	ldr	r0, [pc, #4]	; (8005120 <__malloc_unlock+0x8>)
 800511a:	f7ff beb2 	b.w	8004e82 <__retarget_lock_release_recursive>
 800511e:	bf00      	nop
 8005120:	2000416c 	.word	0x2000416c

08005124 <_free_r>:
 8005124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005126:	2900      	cmp	r1, #0
 8005128:	d044      	beq.n	80051b4 <_free_r+0x90>
 800512a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800512e:	9001      	str	r0, [sp, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	f1a1 0404 	sub.w	r4, r1, #4
 8005136:	bfb8      	it	lt
 8005138:	18e4      	addlt	r4, r4, r3
 800513a:	f7ff ffe7 	bl	800510c <__malloc_lock>
 800513e:	4a1e      	ldr	r2, [pc, #120]	; (80051b8 <_free_r+0x94>)
 8005140:	9801      	ldr	r0, [sp, #4]
 8005142:	6813      	ldr	r3, [r2, #0]
 8005144:	b933      	cbnz	r3, 8005154 <_free_r+0x30>
 8005146:	6063      	str	r3, [r4, #4]
 8005148:	6014      	str	r4, [r2, #0]
 800514a:	b003      	add	sp, #12
 800514c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005150:	f7ff bfe2 	b.w	8005118 <__malloc_unlock>
 8005154:	42a3      	cmp	r3, r4
 8005156:	d908      	bls.n	800516a <_free_r+0x46>
 8005158:	6825      	ldr	r5, [r4, #0]
 800515a:	1961      	adds	r1, r4, r5
 800515c:	428b      	cmp	r3, r1
 800515e:	bf01      	itttt	eq
 8005160:	6819      	ldreq	r1, [r3, #0]
 8005162:	685b      	ldreq	r3, [r3, #4]
 8005164:	1949      	addeq	r1, r1, r5
 8005166:	6021      	streq	r1, [r4, #0]
 8005168:	e7ed      	b.n	8005146 <_free_r+0x22>
 800516a:	461a      	mov	r2, r3
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	b10b      	cbz	r3, 8005174 <_free_r+0x50>
 8005170:	42a3      	cmp	r3, r4
 8005172:	d9fa      	bls.n	800516a <_free_r+0x46>
 8005174:	6811      	ldr	r1, [r2, #0]
 8005176:	1855      	adds	r5, r2, r1
 8005178:	42a5      	cmp	r5, r4
 800517a:	d10b      	bne.n	8005194 <_free_r+0x70>
 800517c:	6824      	ldr	r4, [r4, #0]
 800517e:	4421      	add	r1, r4
 8005180:	1854      	adds	r4, r2, r1
 8005182:	42a3      	cmp	r3, r4
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	d1e0      	bne.n	800514a <_free_r+0x26>
 8005188:	681c      	ldr	r4, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	6053      	str	r3, [r2, #4]
 800518e:	4421      	add	r1, r4
 8005190:	6011      	str	r1, [r2, #0]
 8005192:	e7da      	b.n	800514a <_free_r+0x26>
 8005194:	d902      	bls.n	800519c <_free_r+0x78>
 8005196:	230c      	movs	r3, #12
 8005198:	6003      	str	r3, [r0, #0]
 800519a:	e7d6      	b.n	800514a <_free_r+0x26>
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	1961      	adds	r1, r4, r5
 80051a0:	428b      	cmp	r3, r1
 80051a2:	bf04      	itt	eq
 80051a4:	6819      	ldreq	r1, [r3, #0]
 80051a6:	685b      	ldreq	r3, [r3, #4]
 80051a8:	6063      	str	r3, [r4, #4]
 80051aa:	bf04      	itt	eq
 80051ac:	1949      	addeq	r1, r1, r5
 80051ae:	6021      	streq	r1, [r4, #0]
 80051b0:	6054      	str	r4, [r2, #4]
 80051b2:	e7ca      	b.n	800514a <_free_r+0x26>
 80051b4:	b003      	add	sp, #12
 80051b6:	bd30      	pop	{r4, r5, pc}
 80051b8:	20004170 	.word	0x20004170

080051bc <__ssputs_r>:
 80051bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	688e      	ldr	r6, [r1, #8]
 80051c2:	429e      	cmp	r6, r3
 80051c4:	4682      	mov	sl, r0
 80051c6:	460c      	mov	r4, r1
 80051c8:	4690      	mov	r8, r2
 80051ca:	461f      	mov	r7, r3
 80051cc:	d838      	bhi.n	8005240 <__ssputs_r+0x84>
 80051ce:	898a      	ldrh	r2, [r1, #12]
 80051d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051d4:	d032      	beq.n	800523c <__ssputs_r+0x80>
 80051d6:	6825      	ldr	r5, [r4, #0]
 80051d8:	6909      	ldr	r1, [r1, #16]
 80051da:	eba5 0901 	sub.w	r9, r5, r1
 80051de:	6965      	ldr	r5, [r4, #20]
 80051e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051e8:	3301      	adds	r3, #1
 80051ea:	444b      	add	r3, r9
 80051ec:	106d      	asrs	r5, r5, #1
 80051ee:	429d      	cmp	r5, r3
 80051f0:	bf38      	it	cc
 80051f2:	461d      	movcc	r5, r3
 80051f4:	0553      	lsls	r3, r2, #21
 80051f6:	d531      	bpl.n	800525c <__ssputs_r+0xa0>
 80051f8:	4629      	mov	r1, r5
 80051fa:	f7ff fe79 	bl	8004ef0 <_malloc_r>
 80051fe:	4606      	mov	r6, r0
 8005200:	b950      	cbnz	r0, 8005218 <__ssputs_r+0x5c>
 8005202:	230c      	movs	r3, #12
 8005204:	f8ca 3000 	str.w	r3, [sl]
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800520e:	81a3      	strh	r3, [r4, #12]
 8005210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005218:	6921      	ldr	r1, [r4, #16]
 800521a:	464a      	mov	r2, r9
 800521c:	f7ff fe32 	bl	8004e84 <memcpy>
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800522a:	81a3      	strh	r3, [r4, #12]
 800522c:	6126      	str	r6, [r4, #16]
 800522e:	6165      	str	r5, [r4, #20]
 8005230:	444e      	add	r6, r9
 8005232:	eba5 0509 	sub.w	r5, r5, r9
 8005236:	6026      	str	r6, [r4, #0]
 8005238:	60a5      	str	r5, [r4, #8]
 800523a:	463e      	mov	r6, r7
 800523c:	42be      	cmp	r6, r7
 800523e:	d900      	bls.n	8005242 <__ssputs_r+0x86>
 8005240:	463e      	mov	r6, r7
 8005242:	6820      	ldr	r0, [r4, #0]
 8005244:	4632      	mov	r2, r6
 8005246:	4641      	mov	r1, r8
 8005248:	f000 faa8 	bl	800579c <memmove>
 800524c:	68a3      	ldr	r3, [r4, #8]
 800524e:	1b9b      	subs	r3, r3, r6
 8005250:	60a3      	str	r3, [r4, #8]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	4433      	add	r3, r6
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	2000      	movs	r0, #0
 800525a:	e7db      	b.n	8005214 <__ssputs_r+0x58>
 800525c:	462a      	mov	r2, r5
 800525e:	f000 fab7 	bl	80057d0 <_realloc_r>
 8005262:	4606      	mov	r6, r0
 8005264:	2800      	cmp	r0, #0
 8005266:	d1e1      	bne.n	800522c <__ssputs_r+0x70>
 8005268:	6921      	ldr	r1, [r4, #16]
 800526a:	4650      	mov	r0, sl
 800526c:	f7ff ff5a 	bl	8005124 <_free_r>
 8005270:	e7c7      	b.n	8005202 <__ssputs_r+0x46>
	...

08005274 <_svfiprintf_r>:
 8005274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	4698      	mov	r8, r3
 800527a:	898b      	ldrh	r3, [r1, #12]
 800527c:	061b      	lsls	r3, r3, #24
 800527e:	b09d      	sub	sp, #116	; 0x74
 8005280:	4607      	mov	r7, r0
 8005282:	460d      	mov	r5, r1
 8005284:	4614      	mov	r4, r2
 8005286:	d50e      	bpl.n	80052a6 <_svfiprintf_r+0x32>
 8005288:	690b      	ldr	r3, [r1, #16]
 800528a:	b963      	cbnz	r3, 80052a6 <_svfiprintf_r+0x32>
 800528c:	2140      	movs	r1, #64	; 0x40
 800528e:	f7ff fe2f 	bl	8004ef0 <_malloc_r>
 8005292:	6028      	str	r0, [r5, #0]
 8005294:	6128      	str	r0, [r5, #16]
 8005296:	b920      	cbnz	r0, 80052a2 <_svfiprintf_r+0x2e>
 8005298:	230c      	movs	r3, #12
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052a0:	e0d1      	b.n	8005446 <_svfiprintf_r+0x1d2>
 80052a2:	2340      	movs	r3, #64	; 0x40
 80052a4:	616b      	str	r3, [r5, #20]
 80052a6:	2300      	movs	r3, #0
 80052a8:	9309      	str	r3, [sp, #36]	; 0x24
 80052aa:	2320      	movs	r3, #32
 80052ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80052b4:	2330      	movs	r3, #48	; 0x30
 80052b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005460 <_svfiprintf_r+0x1ec>
 80052ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052be:	f04f 0901 	mov.w	r9, #1
 80052c2:	4623      	mov	r3, r4
 80052c4:	469a      	mov	sl, r3
 80052c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052ca:	b10a      	cbz	r2, 80052d0 <_svfiprintf_r+0x5c>
 80052cc:	2a25      	cmp	r2, #37	; 0x25
 80052ce:	d1f9      	bne.n	80052c4 <_svfiprintf_r+0x50>
 80052d0:	ebba 0b04 	subs.w	fp, sl, r4
 80052d4:	d00b      	beq.n	80052ee <_svfiprintf_r+0x7a>
 80052d6:	465b      	mov	r3, fp
 80052d8:	4622      	mov	r2, r4
 80052da:	4629      	mov	r1, r5
 80052dc:	4638      	mov	r0, r7
 80052de:	f7ff ff6d 	bl	80051bc <__ssputs_r>
 80052e2:	3001      	adds	r0, #1
 80052e4:	f000 80aa 	beq.w	800543c <_svfiprintf_r+0x1c8>
 80052e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ea:	445a      	add	r2, fp
 80052ec:	9209      	str	r2, [sp, #36]	; 0x24
 80052ee:	f89a 3000 	ldrb.w	r3, [sl]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 80a2 	beq.w	800543c <_svfiprintf_r+0x1c8>
 80052f8:	2300      	movs	r3, #0
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005302:	f10a 0a01 	add.w	sl, sl, #1
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	9307      	str	r3, [sp, #28]
 800530a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800530e:	931a      	str	r3, [sp, #104]	; 0x68
 8005310:	4654      	mov	r4, sl
 8005312:	2205      	movs	r2, #5
 8005314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005318:	4851      	ldr	r0, [pc, #324]	; (8005460 <_svfiprintf_r+0x1ec>)
 800531a:	f7fa ff81 	bl	8000220 <memchr>
 800531e:	9a04      	ldr	r2, [sp, #16]
 8005320:	b9d8      	cbnz	r0, 800535a <_svfiprintf_r+0xe6>
 8005322:	06d0      	lsls	r0, r2, #27
 8005324:	bf44      	itt	mi
 8005326:	2320      	movmi	r3, #32
 8005328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800532c:	0711      	lsls	r1, r2, #28
 800532e:	bf44      	itt	mi
 8005330:	232b      	movmi	r3, #43	; 0x2b
 8005332:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005336:	f89a 3000 	ldrb.w	r3, [sl]
 800533a:	2b2a      	cmp	r3, #42	; 0x2a
 800533c:	d015      	beq.n	800536a <_svfiprintf_r+0xf6>
 800533e:	9a07      	ldr	r2, [sp, #28]
 8005340:	4654      	mov	r4, sl
 8005342:	2000      	movs	r0, #0
 8005344:	f04f 0c0a 	mov.w	ip, #10
 8005348:	4621      	mov	r1, r4
 800534a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800534e:	3b30      	subs	r3, #48	; 0x30
 8005350:	2b09      	cmp	r3, #9
 8005352:	d94e      	bls.n	80053f2 <_svfiprintf_r+0x17e>
 8005354:	b1b0      	cbz	r0, 8005384 <_svfiprintf_r+0x110>
 8005356:	9207      	str	r2, [sp, #28]
 8005358:	e014      	b.n	8005384 <_svfiprintf_r+0x110>
 800535a:	eba0 0308 	sub.w	r3, r0, r8
 800535e:	fa09 f303 	lsl.w	r3, r9, r3
 8005362:	4313      	orrs	r3, r2
 8005364:	9304      	str	r3, [sp, #16]
 8005366:	46a2      	mov	sl, r4
 8005368:	e7d2      	b.n	8005310 <_svfiprintf_r+0x9c>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	1d19      	adds	r1, r3, #4
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	9103      	str	r1, [sp, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	bfbb      	ittet	lt
 8005376:	425b      	neglt	r3, r3
 8005378:	f042 0202 	orrlt.w	r2, r2, #2
 800537c:	9307      	strge	r3, [sp, #28]
 800537e:	9307      	strlt	r3, [sp, #28]
 8005380:	bfb8      	it	lt
 8005382:	9204      	strlt	r2, [sp, #16]
 8005384:	7823      	ldrb	r3, [r4, #0]
 8005386:	2b2e      	cmp	r3, #46	; 0x2e
 8005388:	d10c      	bne.n	80053a4 <_svfiprintf_r+0x130>
 800538a:	7863      	ldrb	r3, [r4, #1]
 800538c:	2b2a      	cmp	r3, #42	; 0x2a
 800538e:	d135      	bne.n	80053fc <_svfiprintf_r+0x188>
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	1d1a      	adds	r2, r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	9203      	str	r2, [sp, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	bfb8      	it	lt
 800539c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80053a0:	3402      	adds	r4, #2
 80053a2:	9305      	str	r3, [sp, #20]
 80053a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005470 <_svfiprintf_r+0x1fc>
 80053a8:	7821      	ldrb	r1, [r4, #0]
 80053aa:	2203      	movs	r2, #3
 80053ac:	4650      	mov	r0, sl
 80053ae:	f7fa ff37 	bl	8000220 <memchr>
 80053b2:	b140      	cbz	r0, 80053c6 <_svfiprintf_r+0x152>
 80053b4:	2340      	movs	r3, #64	; 0x40
 80053b6:	eba0 000a 	sub.w	r0, r0, sl
 80053ba:	fa03 f000 	lsl.w	r0, r3, r0
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	4303      	orrs	r3, r0
 80053c2:	3401      	adds	r4, #1
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ca:	4826      	ldr	r0, [pc, #152]	; (8005464 <_svfiprintf_r+0x1f0>)
 80053cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d0:	2206      	movs	r2, #6
 80053d2:	f7fa ff25 	bl	8000220 <memchr>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d038      	beq.n	800544c <_svfiprintf_r+0x1d8>
 80053da:	4b23      	ldr	r3, [pc, #140]	; (8005468 <_svfiprintf_r+0x1f4>)
 80053dc:	bb1b      	cbnz	r3, 8005426 <_svfiprintf_r+0x1b2>
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	3307      	adds	r3, #7
 80053e2:	f023 0307 	bic.w	r3, r3, #7
 80053e6:	3308      	adds	r3, #8
 80053e8:	9303      	str	r3, [sp, #12]
 80053ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ec:	4433      	add	r3, r6
 80053ee:	9309      	str	r3, [sp, #36]	; 0x24
 80053f0:	e767      	b.n	80052c2 <_svfiprintf_r+0x4e>
 80053f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053f6:	460c      	mov	r4, r1
 80053f8:	2001      	movs	r0, #1
 80053fa:	e7a5      	b.n	8005348 <_svfiprintf_r+0xd4>
 80053fc:	2300      	movs	r3, #0
 80053fe:	3401      	adds	r4, #1
 8005400:	9305      	str	r3, [sp, #20]
 8005402:	4619      	mov	r1, r3
 8005404:	f04f 0c0a 	mov.w	ip, #10
 8005408:	4620      	mov	r0, r4
 800540a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800540e:	3a30      	subs	r2, #48	; 0x30
 8005410:	2a09      	cmp	r2, #9
 8005412:	d903      	bls.n	800541c <_svfiprintf_r+0x1a8>
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0c5      	beq.n	80053a4 <_svfiprintf_r+0x130>
 8005418:	9105      	str	r1, [sp, #20]
 800541a:	e7c3      	b.n	80053a4 <_svfiprintf_r+0x130>
 800541c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005420:	4604      	mov	r4, r0
 8005422:	2301      	movs	r3, #1
 8005424:	e7f0      	b.n	8005408 <_svfiprintf_r+0x194>
 8005426:	ab03      	add	r3, sp, #12
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	462a      	mov	r2, r5
 800542c:	4b0f      	ldr	r3, [pc, #60]	; (800546c <_svfiprintf_r+0x1f8>)
 800542e:	a904      	add	r1, sp, #16
 8005430:	4638      	mov	r0, r7
 8005432:	f3af 8000 	nop.w
 8005436:	1c42      	adds	r2, r0, #1
 8005438:	4606      	mov	r6, r0
 800543a:	d1d6      	bne.n	80053ea <_svfiprintf_r+0x176>
 800543c:	89ab      	ldrh	r3, [r5, #12]
 800543e:	065b      	lsls	r3, r3, #25
 8005440:	f53f af2c 	bmi.w	800529c <_svfiprintf_r+0x28>
 8005444:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005446:	b01d      	add	sp, #116	; 0x74
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	ab03      	add	r3, sp, #12
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	462a      	mov	r2, r5
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <_svfiprintf_r+0x1f8>)
 8005454:	a904      	add	r1, sp, #16
 8005456:	4638      	mov	r0, r7
 8005458:	f000 f87a 	bl	8005550 <_printf_i>
 800545c:	e7eb      	b.n	8005436 <_svfiprintf_r+0x1c2>
 800545e:	bf00      	nop
 8005460:	0800594c 	.word	0x0800594c
 8005464:	08005956 	.word	0x08005956
 8005468:	00000000 	.word	0x00000000
 800546c:	080051bd 	.word	0x080051bd
 8005470:	08005952 	.word	0x08005952

08005474 <_printf_common>:
 8005474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005478:	4616      	mov	r6, r2
 800547a:	4699      	mov	r9, r3
 800547c:	688a      	ldr	r2, [r1, #8]
 800547e:	690b      	ldr	r3, [r1, #16]
 8005480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005484:	4293      	cmp	r3, r2
 8005486:	bfb8      	it	lt
 8005488:	4613      	movlt	r3, r2
 800548a:	6033      	str	r3, [r6, #0]
 800548c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005490:	4607      	mov	r7, r0
 8005492:	460c      	mov	r4, r1
 8005494:	b10a      	cbz	r2, 800549a <_printf_common+0x26>
 8005496:	3301      	adds	r3, #1
 8005498:	6033      	str	r3, [r6, #0]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	0699      	lsls	r1, r3, #26
 800549e:	bf42      	ittt	mi
 80054a0:	6833      	ldrmi	r3, [r6, #0]
 80054a2:	3302      	addmi	r3, #2
 80054a4:	6033      	strmi	r3, [r6, #0]
 80054a6:	6825      	ldr	r5, [r4, #0]
 80054a8:	f015 0506 	ands.w	r5, r5, #6
 80054ac:	d106      	bne.n	80054bc <_printf_common+0x48>
 80054ae:	f104 0a19 	add.w	sl, r4, #25
 80054b2:	68e3      	ldr	r3, [r4, #12]
 80054b4:	6832      	ldr	r2, [r6, #0]
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	42ab      	cmp	r3, r5
 80054ba:	dc26      	bgt.n	800550a <_printf_common+0x96>
 80054bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054c0:	1e13      	subs	r3, r2, #0
 80054c2:	6822      	ldr	r2, [r4, #0]
 80054c4:	bf18      	it	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	0692      	lsls	r2, r2, #26
 80054ca:	d42b      	bmi.n	8005524 <_printf_common+0xb0>
 80054cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d0:	4649      	mov	r1, r9
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c0      	blx	r8
 80054d6:	3001      	adds	r0, #1
 80054d8:	d01e      	beq.n	8005518 <_printf_common+0xa4>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	68e5      	ldr	r5, [r4, #12]
 80054de:	6832      	ldr	r2, [r6, #0]
 80054e0:	f003 0306 	and.w	r3, r3, #6
 80054e4:	2b04      	cmp	r3, #4
 80054e6:	bf08      	it	eq
 80054e8:	1aad      	subeq	r5, r5, r2
 80054ea:	68a3      	ldr	r3, [r4, #8]
 80054ec:	6922      	ldr	r2, [r4, #16]
 80054ee:	bf0c      	ite	eq
 80054f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054f4:	2500      	movne	r5, #0
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bfc4      	itt	gt
 80054fa:	1a9b      	subgt	r3, r3, r2
 80054fc:	18ed      	addgt	r5, r5, r3
 80054fe:	2600      	movs	r6, #0
 8005500:	341a      	adds	r4, #26
 8005502:	42b5      	cmp	r5, r6
 8005504:	d11a      	bne.n	800553c <_printf_common+0xc8>
 8005506:	2000      	movs	r0, #0
 8005508:	e008      	b.n	800551c <_printf_common+0xa8>
 800550a:	2301      	movs	r3, #1
 800550c:	4652      	mov	r2, sl
 800550e:	4649      	mov	r1, r9
 8005510:	4638      	mov	r0, r7
 8005512:	47c0      	blx	r8
 8005514:	3001      	adds	r0, #1
 8005516:	d103      	bne.n	8005520 <_printf_common+0xac>
 8005518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	3501      	adds	r5, #1
 8005522:	e7c6      	b.n	80054b2 <_printf_common+0x3e>
 8005524:	18e1      	adds	r1, r4, r3
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	2030      	movs	r0, #48	; 0x30
 800552a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800552e:	4422      	add	r2, r4
 8005530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005538:	3302      	adds	r3, #2
 800553a:	e7c7      	b.n	80054cc <_printf_common+0x58>
 800553c:	2301      	movs	r3, #1
 800553e:	4622      	mov	r2, r4
 8005540:	4649      	mov	r1, r9
 8005542:	4638      	mov	r0, r7
 8005544:	47c0      	blx	r8
 8005546:	3001      	adds	r0, #1
 8005548:	d0e6      	beq.n	8005518 <_printf_common+0xa4>
 800554a:	3601      	adds	r6, #1
 800554c:	e7d9      	b.n	8005502 <_printf_common+0x8e>
	...

08005550 <_printf_i>:
 8005550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	7e0f      	ldrb	r7, [r1, #24]
 8005556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005558:	2f78      	cmp	r7, #120	; 0x78
 800555a:	4691      	mov	r9, r2
 800555c:	4680      	mov	r8, r0
 800555e:	460c      	mov	r4, r1
 8005560:	469a      	mov	sl, r3
 8005562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005566:	d807      	bhi.n	8005578 <_printf_i+0x28>
 8005568:	2f62      	cmp	r7, #98	; 0x62
 800556a:	d80a      	bhi.n	8005582 <_printf_i+0x32>
 800556c:	2f00      	cmp	r7, #0
 800556e:	f000 80d8 	beq.w	8005722 <_printf_i+0x1d2>
 8005572:	2f58      	cmp	r7, #88	; 0x58
 8005574:	f000 80a3 	beq.w	80056be <_printf_i+0x16e>
 8005578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005580:	e03a      	b.n	80055f8 <_printf_i+0xa8>
 8005582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005586:	2b15      	cmp	r3, #21
 8005588:	d8f6      	bhi.n	8005578 <_printf_i+0x28>
 800558a:	a101      	add	r1, pc, #4	; (adr r1, 8005590 <_printf_i+0x40>)
 800558c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005590:	080055e9 	.word	0x080055e9
 8005594:	080055fd 	.word	0x080055fd
 8005598:	08005579 	.word	0x08005579
 800559c:	08005579 	.word	0x08005579
 80055a0:	08005579 	.word	0x08005579
 80055a4:	08005579 	.word	0x08005579
 80055a8:	080055fd 	.word	0x080055fd
 80055ac:	08005579 	.word	0x08005579
 80055b0:	08005579 	.word	0x08005579
 80055b4:	08005579 	.word	0x08005579
 80055b8:	08005579 	.word	0x08005579
 80055bc:	08005709 	.word	0x08005709
 80055c0:	0800562d 	.word	0x0800562d
 80055c4:	080056eb 	.word	0x080056eb
 80055c8:	08005579 	.word	0x08005579
 80055cc:	08005579 	.word	0x08005579
 80055d0:	0800572b 	.word	0x0800572b
 80055d4:	08005579 	.word	0x08005579
 80055d8:	0800562d 	.word	0x0800562d
 80055dc:	08005579 	.word	0x08005579
 80055e0:	08005579 	.word	0x08005579
 80055e4:	080056f3 	.word	0x080056f3
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	602a      	str	r2, [r5, #0]
 80055f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055f8:	2301      	movs	r3, #1
 80055fa:	e0a3      	b.n	8005744 <_printf_i+0x1f4>
 80055fc:	6820      	ldr	r0, [r4, #0]
 80055fe:	6829      	ldr	r1, [r5, #0]
 8005600:	0606      	lsls	r6, r0, #24
 8005602:	f101 0304 	add.w	r3, r1, #4
 8005606:	d50a      	bpl.n	800561e <_printf_i+0xce>
 8005608:	680e      	ldr	r6, [r1, #0]
 800560a:	602b      	str	r3, [r5, #0]
 800560c:	2e00      	cmp	r6, #0
 800560e:	da03      	bge.n	8005618 <_printf_i+0xc8>
 8005610:	232d      	movs	r3, #45	; 0x2d
 8005612:	4276      	negs	r6, r6
 8005614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005618:	485e      	ldr	r0, [pc, #376]	; (8005794 <_printf_i+0x244>)
 800561a:	230a      	movs	r3, #10
 800561c:	e019      	b.n	8005652 <_printf_i+0x102>
 800561e:	680e      	ldr	r6, [r1, #0]
 8005620:	602b      	str	r3, [r5, #0]
 8005622:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005626:	bf18      	it	ne
 8005628:	b236      	sxthne	r6, r6
 800562a:	e7ef      	b.n	800560c <_printf_i+0xbc>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	6820      	ldr	r0, [r4, #0]
 8005630:	1d19      	adds	r1, r3, #4
 8005632:	6029      	str	r1, [r5, #0]
 8005634:	0601      	lsls	r1, r0, #24
 8005636:	d501      	bpl.n	800563c <_printf_i+0xec>
 8005638:	681e      	ldr	r6, [r3, #0]
 800563a:	e002      	b.n	8005642 <_printf_i+0xf2>
 800563c:	0646      	lsls	r6, r0, #25
 800563e:	d5fb      	bpl.n	8005638 <_printf_i+0xe8>
 8005640:	881e      	ldrh	r6, [r3, #0]
 8005642:	4854      	ldr	r0, [pc, #336]	; (8005794 <_printf_i+0x244>)
 8005644:	2f6f      	cmp	r7, #111	; 0x6f
 8005646:	bf0c      	ite	eq
 8005648:	2308      	moveq	r3, #8
 800564a:	230a      	movne	r3, #10
 800564c:	2100      	movs	r1, #0
 800564e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005652:	6865      	ldr	r5, [r4, #4]
 8005654:	60a5      	str	r5, [r4, #8]
 8005656:	2d00      	cmp	r5, #0
 8005658:	bfa2      	ittt	ge
 800565a:	6821      	ldrge	r1, [r4, #0]
 800565c:	f021 0104 	bicge.w	r1, r1, #4
 8005660:	6021      	strge	r1, [r4, #0]
 8005662:	b90e      	cbnz	r6, 8005668 <_printf_i+0x118>
 8005664:	2d00      	cmp	r5, #0
 8005666:	d04d      	beq.n	8005704 <_printf_i+0x1b4>
 8005668:	4615      	mov	r5, r2
 800566a:	fbb6 f1f3 	udiv	r1, r6, r3
 800566e:	fb03 6711 	mls	r7, r3, r1, r6
 8005672:	5dc7      	ldrb	r7, [r0, r7]
 8005674:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005678:	4637      	mov	r7, r6
 800567a:	42bb      	cmp	r3, r7
 800567c:	460e      	mov	r6, r1
 800567e:	d9f4      	bls.n	800566a <_printf_i+0x11a>
 8005680:	2b08      	cmp	r3, #8
 8005682:	d10b      	bne.n	800569c <_printf_i+0x14c>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	07de      	lsls	r6, r3, #31
 8005688:	d508      	bpl.n	800569c <_printf_i+0x14c>
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	6861      	ldr	r1, [r4, #4]
 800568e:	4299      	cmp	r1, r3
 8005690:	bfde      	ittt	le
 8005692:	2330      	movle	r3, #48	; 0x30
 8005694:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005698:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800569c:	1b52      	subs	r2, r2, r5
 800569e:	6122      	str	r2, [r4, #16]
 80056a0:	f8cd a000 	str.w	sl, [sp]
 80056a4:	464b      	mov	r3, r9
 80056a6:	aa03      	add	r2, sp, #12
 80056a8:	4621      	mov	r1, r4
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7ff fee2 	bl	8005474 <_printf_common>
 80056b0:	3001      	adds	r0, #1
 80056b2:	d14c      	bne.n	800574e <_printf_i+0x1fe>
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056b8:	b004      	add	sp, #16
 80056ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056be:	4835      	ldr	r0, [pc, #212]	; (8005794 <_printf_i+0x244>)
 80056c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056c4:	6829      	ldr	r1, [r5, #0]
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80056cc:	6029      	str	r1, [r5, #0]
 80056ce:	061d      	lsls	r5, r3, #24
 80056d0:	d514      	bpl.n	80056fc <_printf_i+0x1ac>
 80056d2:	07df      	lsls	r7, r3, #31
 80056d4:	bf44      	itt	mi
 80056d6:	f043 0320 	orrmi.w	r3, r3, #32
 80056da:	6023      	strmi	r3, [r4, #0]
 80056dc:	b91e      	cbnz	r6, 80056e6 <_printf_i+0x196>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f023 0320 	bic.w	r3, r3, #32
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	2310      	movs	r3, #16
 80056e8:	e7b0      	b.n	800564c <_printf_i+0xfc>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	f043 0320 	orr.w	r3, r3, #32
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	2378      	movs	r3, #120	; 0x78
 80056f4:	4828      	ldr	r0, [pc, #160]	; (8005798 <_printf_i+0x248>)
 80056f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056fa:	e7e3      	b.n	80056c4 <_printf_i+0x174>
 80056fc:	0659      	lsls	r1, r3, #25
 80056fe:	bf48      	it	mi
 8005700:	b2b6      	uxthmi	r6, r6
 8005702:	e7e6      	b.n	80056d2 <_printf_i+0x182>
 8005704:	4615      	mov	r5, r2
 8005706:	e7bb      	b.n	8005680 <_printf_i+0x130>
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	6826      	ldr	r6, [r4, #0]
 800570c:	6961      	ldr	r1, [r4, #20]
 800570e:	1d18      	adds	r0, r3, #4
 8005710:	6028      	str	r0, [r5, #0]
 8005712:	0635      	lsls	r5, r6, #24
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	d501      	bpl.n	800571c <_printf_i+0x1cc>
 8005718:	6019      	str	r1, [r3, #0]
 800571a:	e002      	b.n	8005722 <_printf_i+0x1d2>
 800571c:	0670      	lsls	r0, r6, #25
 800571e:	d5fb      	bpl.n	8005718 <_printf_i+0x1c8>
 8005720:	8019      	strh	r1, [r3, #0]
 8005722:	2300      	movs	r3, #0
 8005724:	6123      	str	r3, [r4, #16]
 8005726:	4615      	mov	r5, r2
 8005728:	e7ba      	b.n	80056a0 <_printf_i+0x150>
 800572a:	682b      	ldr	r3, [r5, #0]
 800572c:	1d1a      	adds	r2, r3, #4
 800572e:	602a      	str	r2, [r5, #0]
 8005730:	681d      	ldr	r5, [r3, #0]
 8005732:	6862      	ldr	r2, [r4, #4]
 8005734:	2100      	movs	r1, #0
 8005736:	4628      	mov	r0, r5
 8005738:	f7fa fd72 	bl	8000220 <memchr>
 800573c:	b108      	cbz	r0, 8005742 <_printf_i+0x1f2>
 800573e:	1b40      	subs	r0, r0, r5
 8005740:	6060      	str	r0, [r4, #4]
 8005742:	6863      	ldr	r3, [r4, #4]
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	2300      	movs	r3, #0
 8005748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800574c:	e7a8      	b.n	80056a0 <_printf_i+0x150>
 800574e:	6923      	ldr	r3, [r4, #16]
 8005750:	462a      	mov	r2, r5
 8005752:	4649      	mov	r1, r9
 8005754:	4640      	mov	r0, r8
 8005756:	47d0      	blx	sl
 8005758:	3001      	adds	r0, #1
 800575a:	d0ab      	beq.n	80056b4 <_printf_i+0x164>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	079b      	lsls	r3, r3, #30
 8005760:	d413      	bmi.n	800578a <_printf_i+0x23a>
 8005762:	68e0      	ldr	r0, [r4, #12]
 8005764:	9b03      	ldr	r3, [sp, #12]
 8005766:	4298      	cmp	r0, r3
 8005768:	bfb8      	it	lt
 800576a:	4618      	movlt	r0, r3
 800576c:	e7a4      	b.n	80056b8 <_printf_i+0x168>
 800576e:	2301      	movs	r3, #1
 8005770:	4632      	mov	r2, r6
 8005772:	4649      	mov	r1, r9
 8005774:	4640      	mov	r0, r8
 8005776:	47d0      	blx	sl
 8005778:	3001      	adds	r0, #1
 800577a:	d09b      	beq.n	80056b4 <_printf_i+0x164>
 800577c:	3501      	adds	r5, #1
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	9903      	ldr	r1, [sp, #12]
 8005782:	1a5b      	subs	r3, r3, r1
 8005784:	42ab      	cmp	r3, r5
 8005786:	dcf2      	bgt.n	800576e <_printf_i+0x21e>
 8005788:	e7eb      	b.n	8005762 <_printf_i+0x212>
 800578a:	2500      	movs	r5, #0
 800578c:	f104 0619 	add.w	r6, r4, #25
 8005790:	e7f5      	b.n	800577e <_printf_i+0x22e>
 8005792:	bf00      	nop
 8005794:	0800595d 	.word	0x0800595d
 8005798:	0800596e 	.word	0x0800596e

0800579c <memmove>:
 800579c:	4288      	cmp	r0, r1
 800579e:	b510      	push	{r4, lr}
 80057a0:	eb01 0402 	add.w	r4, r1, r2
 80057a4:	d902      	bls.n	80057ac <memmove+0x10>
 80057a6:	4284      	cmp	r4, r0
 80057a8:	4623      	mov	r3, r4
 80057aa:	d807      	bhi.n	80057bc <memmove+0x20>
 80057ac:	1e43      	subs	r3, r0, #1
 80057ae:	42a1      	cmp	r1, r4
 80057b0:	d008      	beq.n	80057c4 <memmove+0x28>
 80057b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057ba:	e7f8      	b.n	80057ae <memmove+0x12>
 80057bc:	4402      	add	r2, r0
 80057be:	4601      	mov	r1, r0
 80057c0:	428a      	cmp	r2, r1
 80057c2:	d100      	bne.n	80057c6 <memmove+0x2a>
 80057c4:	bd10      	pop	{r4, pc}
 80057c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057ce:	e7f7      	b.n	80057c0 <memmove+0x24>

080057d0 <_realloc_r>:
 80057d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057d4:	4680      	mov	r8, r0
 80057d6:	4614      	mov	r4, r2
 80057d8:	460e      	mov	r6, r1
 80057da:	b921      	cbnz	r1, 80057e6 <_realloc_r+0x16>
 80057dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057e0:	4611      	mov	r1, r2
 80057e2:	f7ff bb85 	b.w	8004ef0 <_malloc_r>
 80057e6:	b92a      	cbnz	r2, 80057f4 <_realloc_r+0x24>
 80057e8:	f7ff fc9c 	bl	8005124 <_free_r>
 80057ec:	4625      	mov	r5, r4
 80057ee:	4628      	mov	r0, r5
 80057f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057f4:	f000 f81b 	bl	800582e <_malloc_usable_size_r>
 80057f8:	4284      	cmp	r4, r0
 80057fa:	4607      	mov	r7, r0
 80057fc:	d802      	bhi.n	8005804 <_realloc_r+0x34>
 80057fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005802:	d812      	bhi.n	800582a <_realloc_r+0x5a>
 8005804:	4621      	mov	r1, r4
 8005806:	4640      	mov	r0, r8
 8005808:	f7ff fb72 	bl	8004ef0 <_malloc_r>
 800580c:	4605      	mov	r5, r0
 800580e:	2800      	cmp	r0, #0
 8005810:	d0ed      	beq.n	80057ee <_realloc_r+0x1e>
 8005812:	42bc      	cmp	r4, r7
 8005814:	4622      	mov	r2, r4
 8005816:	4631      	mov	r1, r6
 8005818:	bf28      	it	cs
 800581a:	463a      	movcs	r2, r7
 800581c:	f7ff fb32 	bl	8004e84 <memcpy>
 8005820:	4631      	mov	r1, r6
 8005822:	4640      	mov	r0, r8
 8005824:	f7ff fc7e 	bl	8005124 <_free_r>
 8005828:	e7e1      	b.n	80057ee <_realloc_r+0x1e>
 800582a:	4635      	mov	r5, r6
 800582c:	e7df      	b.n	80057ee <_realloc_r+0x1e>

0800582e <_malloc_usable_size_r>:
 800582e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005832:	1f18      	subs	r0, r3, #4
 8005834:	2b00      	cmp	r3, #0
 8005836:	bfbc      	itt	lt
 8005838:	580b      	ldrlt	r3, [r1, r0]
 800583a:	18c0      	addlt	r0, r0, r3
 800583c:	4770      	bx	lr
	...

08005840 <_init>:
 8005840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005842:	bf00      	nop
 8005844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005846:	bc08      	pop	{r3}
 8005848:	469e      	mov	lr, r3
 800584a:	4770      	bx	lr

0800584c <_fini>:
 800584c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800584e:	bf00      	nop
 8005850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005852:	bc08      	pop	{r3}
 8005854:	469e      	mov	lr, r3
 8005856:	4770      	bx	lr
