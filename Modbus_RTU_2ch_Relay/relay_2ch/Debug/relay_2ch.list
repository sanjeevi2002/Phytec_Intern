
relay_2ch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004238  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004408  08004408  00014408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004530  08004530  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004530  08004530  00014530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004538  08004538  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  080045b0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080045b0  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e32  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a74  00000000  00000000  00029ed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0002b948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002c150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c99  00000000  00000000  0002c8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6b5  00000000  00000000  0004e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9b7e  00000000  00000000  00058bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012277c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  001227cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080043f0 	.word	0x080043f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080043f0 	.word	0x080043f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <calculateCRC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Function to calculate CRC16
uint16_t calculateCRC(uint8_t *buf, int len) {
 80005b4:	b480      	push	{r7}
 80005b6:	b087      	sub	sp, #28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	82fb      	strh	r3, [r7, #22]
    for (int pos = 0; pos < len; pos++) {
 80005c4:	2300      	movs	r3, #0
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	e026      	b.n	8000618 <calculateCRC+0x64>
        crc ^= (uint16_t)buf[pos];
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	8afb      	ldrh	r3, [r7, #22]
 80005d6:	4053      	eors	r3, r2
 80005d8:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 80005da:	2308      	movs	r3, #8
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e015      	b.n	800060c <calculateCRC+0x58>
            if ((crc & 0x0001) != 0) {
 80005e0:	8afb      	ldrh	r3, [r7, #22]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00a      	beq.n	8000600 <calculateCRC+0x4c>
                crc >>= 1;
 80005ea:	8afb      	ldrh	r3, [r7, #22]
 80005ec:	085b      	lsrs	r3, r3, #1
 80005ee:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80005f0:	8afb      	ldrh	r3, [r7, #22]
 80005f2:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80005f6:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80005fa:	43db      	mvns	r3, r3
 80005fc:	82fb      	strh	r3, [r7, #22]
 80005fe:	e002      	b.n	8000606 <calculateCRC+0x52>
            } else {
                crc >>= 1;
 8000600:	8afb      	ldrh	r3, [r7, #22]
 8000602:	085b      	lsrs	r3, r3, #1
 8000604:	82fb      	strh	r3, [r7, #22]
        for (int i = 8; i != 0; i--) {
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	3b01      	subs	r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1e6      	bne.n	80005e0 <calculateCRC+0x2c>
    for (int pos = 0; pos < len; pos++) {
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	3301      	adds	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	dbd4      	blt.n	80005ca <calculateCRC+0x16>
            }
        }
    }
    return crc;
 8000620:	8afb      	ldrh	r3, [r7, #22]
}
 8000622:	4618      	mov	r0, r3
 8000624:	371c      	adds	r7, #28
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <sendModbusFrame>:

// Function to send a Modbus RTU frame
void sendModbusFrame(UART_HandleTypeDef *huart, uint8_t *frame, int len) {
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
    uint16_t crc = calculateCRC(frame, len - 2);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	3b02      	subs	r3, #2
 800063e:	4619      	mov	r1, r3
 8000640:	68b8      	ldr	r0, [r7, #8]
 8000642:	f7ff ffb7 	bl	80005b4 <calculateCRC>
 8000646:	4603      	mov	r3, r0
 8000648:	82fb      	strh	r3, [r7, #22]
    frame[len - 2] = crc & 0xFF;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	3b02      	subs	r3, #2
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	4413      	add	r3, r2
 8000652:	8afa      	ldrh	r2, [r7, #22]
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	701a      	strb	r2, [r3, #0]
    frame[len - 1] = (crc >> 8) & 0xFF;
 8000658:	8afb      	ldrh	r3, [r7, #22]
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	b299      	uxth	r1, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	3b01      	subs	r3, #1
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	4413      	add	r3, r2
 8000666:	b2ca      	uxtb	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit(huart, frame, len, HAL_MAX_DELAY);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	b29a      	uxth	r2, r3
 800066e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000672:	68b9      	ldr	r1, [r7, #8]
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f001 fe72 	bl	800235e <HAL_UART_Transmit>
}
 800067a:	bf00      	nop
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fc4b 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f8e9 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f9b7 	bl	8000a04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000696:	f000 f98b 	bl	80009b0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800069a:	f000 f951 	bl	8000940 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Turn ON relay no. 1 and LED
      frame[0] = 0xFF;
 800069e:	23ff      	movs	r3, #255	; 0xff
 80006a0:	703b      	strb	r3, [r7, #0]
      frame[1] = 0x05;
 80006a2:	2305      	movs	r3, #5
 80006a4:	707b      	strb	r3, [r7, #1]
      frame[2] = 0x00;
 80006a6:	2300      	movs	r3, #0
 80006a8:	70bb      	strb	r3, [r7, #2]
      frame[3] = 0x00;
 80006aa:	2300      	movs	r3, #0
 80006ac:	70fb      	strb	r3, [r7, #3]
      frame[4] = 0xFF;
 80006ae:	23ff      	movs	r3, #255	; 0xff
 80006b0:	713b      	strb	r3, [r7, #4]
      frame[5] = 0x00;
 80006b2:	2300      	movs	r3, #0
 80006b4:	717b      	strb	r3, [r7, #5]
      sendModbusFrame(&huart1, frame, 8);
 80006b6:	463b      	mov	r3, r7
 80006b8:	2208      	movs	r2, #8
 80006ba:	4619      	mov	r1, r3
 80006bc:	4860      	ldr	r0, [pc, #384]	; (8000840 <main+0x1bc>)
 80006be:	f7ff ffb6 	bl	800062e <sendModbusFrame>

      // Turn ON LED
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	485f      	ldr	r0, [pc, #380]	; (8000844 <main+0x1c0>)
 80006c8:	f000 fffa 	bl	80016c0 <HAL_GPIO_WritePin>

      // Wait for response
      while (!responseComplete) {
 80006cc:	bf00      	nop
 80006ce:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <main+0x1c4>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0fa      	beq.n	80006ce <main+0x4a>
          // Do nothing, wait for ISR to complete
      }
      responseComplete = 0; // Reset flag
 80006d8:	4b5b      	ldr	r3, [pc, #364]	; (8000848 <main+0x1c4>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]

      // Print response
      printf("Relay-1 Turn ON Response: ");
 80006de:	485b      	ldr	r0, [pc, #364]	; (800084c <main+0x1c8>)
 80006e0:	f002 fe9a 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	e00b      	b.n	8000702 <main+0x7e>
          printf("%02X ", response[i]);
 80006ea:	4a59      	ldr	r2, [pc, #356]	; (8000850 <main+0x1cc>)
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4619      	mov	r1, r3
 80006f6:	4857      	ldr	r0, [pc, #348]	; (8000854 <main+0x1d0>)
 80006f8:	f002 fe8e 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	3301      	adds	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	2b07      	cmp	r3, #7
 8000706:	ddf0      	ble.n	80006ea <main+0x66>
      }
      printf("\n");
 8000708:	200a      	movs	r0, #10
 800070a:	f002 fe9d 	bl	8003448 <putchar>

      HAL_Delay(2000); // Wait for 2 seconds
 800070e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000712:	f000 fc79 	bl	8001008 <HAL_Delay>

      // Turn OFF relay no. 1 and LED
      frame[4] = 0x00;
 8000716:	2300      	movs	r3, #0
 8000718:	713b      	strb	r3, [r7, #4]
      frame[5] = 0x00;
 800071a:	2300      	movs	r3, #0
 800071c:	717b      	strb	r3, [r7, #5]
      sendModbusFrame(&huart1, frame, 8);
 800071e:	463b      	mov	r3, r7
 8000720:	2208      	movs	r2, #8
 8000722:	4619      	mov	r1, r3
 8000724:	4846      	ldr	r0, [pc, #280]	; (8000840 <main+0x1bc>)
 8000726:	f7ff ff82 	bl	800062e <sendModbusFrame>

      // Turn OFF LED
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	4845      	ldr	r0, [pc, #276]	; (8000844 <main+0x1c0>)
 8000730:	f000 ffc6 	bl	80016c0 <HAL_GPIO_WritePin>

      // Wait for response
      while (!responseComplete) {
 8000734:	bf00      	nop
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <main+0x1c4>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d0fa      	beq.n	8000736 <main+0xb2>
          // Do nothing, wait for ISR to complete
      }
      responseComplete = 0; // Reset flag
 8000740:	4b41      	ldr	r3, [pc, #260]	; (8000848 <main+0x1c4>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]

      // Print response
      printf("Relay-1 Turn OFF Response: ");
 8000746:	4844      	ldr	r0, [pc, #272]	; (8000858 <main+0x1d4>)
 8000748:	f002 fe66 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	e00b      	b.n	800076a <main+0xe6>
          printf("%02X ", response[i]);
 8000752:	4a3f      	ldr	r2, [pc, #252]	; (8000850 <main+0x1cc>)
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	483d      	ldr	r0, [pc, #244]	; (8000854 <main+0x1d0>)
 8000760:	f002 fe5a 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	3301      	adds	r3, #1
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]
 800076c:	2b07      	cmp	r3, #7
 800076e:	ddf0      	ble.n	8000752 <main+0xce>
      }
      printf("\n");
 8000770:	200a      	movs	r0, #10
 8000772:	f002 fe69 	bl	8003448 <putchar>

      HAL_Delay(2000); // Wait for 2 seconds
 8000776:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800077a:	f000 fc45 	bl	8001008 <HAL_Delay>

      // Open relay no. 2
      frame[3] = 0x01; // Change relay address
 800077e:	2301      	movs	r3, #1
 8000780:	70fb      	strb	r3, [r7, #3]
      frame[4] = 0xFF;
 8000782:	23ff      	movs	r3, #255	; 0xff
 8000784:	713b      	strb	r3, [r7, #4]
      frame[5] = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	717b      	strb	r3, [r7, #5]
      sendModbusFrame(&huart1, frame, 8);
 800078a:	463b      	mov	r3, r7
 800078c:	2208      	movs	r2, #8
 800078e:	4619      	mov	r1, r3
 8000790:	482b      	ldr	r0, [pc, #172]	; (8000840 <main+0x1bc>)
 8000792:	f7ff ff4c 	bl	800062e <sendModbusFrame>

      // Wait for response
      while (!responseComplete) {
 8000796:	bf00      	nop
 8000798:	4b2b      	ldr	r3, [pc, #172]	; (8000848 <main+0x1c4>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0fa      	beq.n	8000798 <main+0x114>
          // Do nothing, wait for ISR to complete
      }
      responseComplete = 0; // Reset flag
 80007a2:	4b29      	ldr	r3, [pc, #164]	; (8000848 <main+0x1c4>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]

      // Print response
      printf("Relay-2 Turn ON Response: ");
 80007a8:	482c      	ldr	r0, [pc, #176]	; (800085c <main+0x1d8>)
 80007aa:	f002 fe35 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e00b      	b.n	80007cc <main+0x148>
          printf("%02X ", response[i]);
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <main+0x1cc>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4619      	mov	r1, r3
 80007c0:	4824      	ldr	r0, [pc, #144]	; (8000854 <main+0x1d0>)
 80007c2:	f002 fe29 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	3301      	adds	r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	2b07      	cmp	r3, #7
 80007d0:	ddf0      	ble.n	80007b4 <main+0x130>
      }
      printf("\n");
 80007d2:	200a      	movs	r0, #10
 80007d4:	f002 fe38 	bl	8003448 <putchar>

      HAL_Delay(2000); // Wait for 2 seconds
 80007d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007dc:	f000 fc14 	bl	8001008 <HAL_Delay>

      // Turn off relay no. 2
      frame[4] = 0x00;
 80007e0:	2300      	movs	r3, #0
 80007e2:	713b      	strb	r3, [r7, #4]
      frame[5] = 0x00;
 80007e4:	2300      	movs	r3, #0
 80007e6:	717b      	strb	r3, [r7, #5]
      sendModbusFrame(&huart1, frame, 8);
 80007e8:	463b      	mov	r3, r7
 80007ea:	2208      	movs	r2, #8
 80007ec:	4619      	mov	r1, r3
 80007ee:	4814      	ldr	r0, [pc, #80]	; (8000840 <main+0x1bc>)
 80007f0:	f7ff ff1d 	bl	800062e <sendModbusFrame>

      // Wait for response
      while (!responseComplete) {
 80007f4:	bf00      	nop
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <main+0x1c4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0fa      	beq.n	80007f6 <main+0x172>
          // Do nothing, wait for ISR to complete
      }
      responseComplete = 0; // Reset flag
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <main+0x1c4>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]

      // Print response
      printf("Relay-2 Turn OFF Response: ");
 8000806:	4816      	ldr	r0, [pc, #88]	; (8000860 <main+0x1dc>)
 8000808:	f002 fe06 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	e00b      	b.n	800082a <main+0x1a6>
          printf("%02X ", response[i]);
 8000812:	4a0f      	ldr	r2, [pc, #60]	; (8000850 <main+0x1cc>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <main+0x1d0>)
 8000820:	f002 fdfa 	bl	8003418 <iprintf>
      for (int i = 0; i < 8; i++) {
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	3301      	adds	r3, #1
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b07      	cmp	r3, #7
 800082e:	ddf0      	ble.n	8000812 <main+0x18e>
      }
      printf("\n");
 8000830:	200a      	movs	r0, #10
 8000832:	f002 fe09 	bl	8003448 <putchar>

      HAL_Delay(2000); // Wait for 2 seconds
 8000836:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800083a:	f000 fbe5 	bl	8001008 <HAL_Delay>
      frame[0] = 0xFF;
 800083e:	e72e      	b.n	800069e <main+0x1a>
 8000840:	2000008c 	.word	0x2000008c
 8000844:	40020000 	.word	0x40020000
 8000848:	2000011d 	.word	0x2000011d
 800084c:	08004408 	.word	0x08004408
 8000850:	20000114 	.word	0x20000114
 8000854:	08004424 	.word	0x08004424
 8000858:	0800442c 	.word	0x0800442c
 800085c:	08004448 	.word	0x08004448
 8000860:	08004464 	.word	0x08004464

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	; 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2234      	movs	r2, #52	; 0x34
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fdc8 	bl	8003408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <SystemClock_Config+0xd4>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000890:	4a29      	ldr	r2, [pc, #164]	; (8000938 <SystemClock_Config+0xd4>)
 8000892:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000896:	6413      	str	r3, [r2, #64]	; 0x40
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <SystemClock_Config+0xd4>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	4b24      	ldr	r3, [pc, #144]	; (800093c <SystemClock_Config+0xd8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008b0:	4a22      	ldr	r2, [pc, #136]	; (800093c <SystemClock_Config+0xd8>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <SystemClock_Config+0xd8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008cc:	2310      	movs	r3, #16
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008d8:	2310      	movs	r3, #16
 80008da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fa48 	bl	8001d88 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008fe:	f000 f923 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2302      	movs	r3, #2
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2102      	movs	r1, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f000 fee8 	bl	80016f4 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800092a:	f000 f90d 	bl	8000b48 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3750      	adds	r7, #80	; 0x50
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800
 800093c:	40007000 	.word	0x40007000

08000940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000944:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <MX_USART1_UART_Init+0x64>)
 8000948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 800094c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000976:	480a      	ldr	r0, [pc, #40]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 8000978:	f001 fca4 	bl	80022c4 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000982:	f000 f8e1 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  // Enable the UART Receive interrupt
      HAL_UART_Receive_IT(&huart1, (uint8_t *)&response[responseIndex], 1);
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART1_UART_Init+0x68>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	461a      	mov	r2, r3
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_USART1_UART_Init+0x6c>)
 8000990:	4413      	add	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	4619      	mov	r1, r3
 8000996:	4802      	ldr	r0, [pc, #8]	; (80009a0 <MX_USART1_UART_Init+0x60>)
 8000998:	f001 fd73 	bl	8002482 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	40011000 	.word	0x40011000
 80009a8:	2000011c 	.word	0x2000011c
 80009ac:	20000114 	.word	0x20000114

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_USART2_UART_Init+0x50>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART2_UART_Init+0x4c>)
 80009e8:	f001 fc6c 	bl	80022c4 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009f2:	f000 f8a9 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000d0 	.word	0x200000d0
 8000a00:	40004400 	.word	0x40004400

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a2c      	ldr	r2, [pc, #176]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a25      	ldr	r2, [pc, #148]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a17      	ldr	r2, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_GPIO_Init+0xd0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_GPIO_Init+0xd4>)
 8000a90:	f000 fe16 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480c      	ldr	r0, [pc, #48]	; (8000adc <MX_GPIO_Init+0xd8>)
 8000aac:	f000 fc74 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab0:	2320      	movs	r3, #32
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0xd4>)
 8000ac8:	f000 fc66 	bl	8001398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020800 	.word	0x40020800

08000ae0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// UART RX Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_UART_RxCpltCallback+0x54>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d11c      	bne.n	8000b2c <HAL_UART_RxCpltCallback+0x4c>
        responseIndex++;
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000afe:	701a      	strb	r2, [r3, #0]
        if (responseIndex >= 8) {  // Adjust based on expected frame length
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b07      	cmp	r3, #7
 8000b08:	d905      	bls.n	8000b16 <HAL_UART_RxCpltCallback+0x36>
            responseComplete = 1;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_UART_RxCpltCallback+0x5c>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	701a      	strb	r2, [r3, #0]
            responseIndex = 0;  // Reset index for next frame
 8000b10:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
        }
        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart1, (uint8_t *)&response[responseIndex], 1);
 8000b16:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_UART_RxCpltCallback+0x58>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_UART_RxCpltCallback+0x60>)
 8000b20:	4413      	add	r3, r2
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <HAL_UART_RxCpltCallback+0x64>)
 8000b28:	f001 fcab 	bl	8002482 <HAL_UART_Receive_IT>
    }
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40011000 	.word	0x40011000
 8000b38:	2000011c 	.word	0x2000011c
 8000b3c:	2000011d 	.word	0x2000011d
 8000b40:	20000114 	.word	0x20000114
 8000b44:	2000008c 	.word	0x2000008c

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b84:	6413      	str	r3, [r2, #64]	; 0x40
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x4c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b92:	2007      	movs	r0, #7
 8000b94:	f000 fb2c 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08c      	sub	sp, #48	; 0x30
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a36      	ldr	r2, [pc, #216]	; (8000c9c <HAL_UART_MspInit+0xf8>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d135      	bne.n	8000c32 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
 8000bca:	4b35      	ldr	r3, [pc, #212]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a34      	ldr	r2, [pc, #208]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bd0:	f043 0310 	orr.w	r3, r3, #16
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	61bb      	str	r3, [r7, #24]
 8000be0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	4b2e      	ldr	r3, [pc, #184]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a2d      	ldr	r2, [pc, #180]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000bfe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c10:	2307      	movs	r3, #7
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4822      	ldr	r0, [pc, #136]	; (8000ca4 <HAL_UART_MspInit+0x100>)
 8000c1c:	f000 fbbc 	bl	8001398 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2025      	movs	r0, #37	; 0x25
 8000c26:	f000 faee 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c2a:	2025      	movs	r0, #37	; 0x25
 8000c2c:	f000 fb07 	bl	800123e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c30:	e030      	b.n	8000c94 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_UART_MspInit+0x104>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d12b      	bne.n	8000c94 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a16      	ldr	r2, [pc, #88]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c60:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6313      	str	r3, [r2, #48]	; 0x30
 8000c68:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_UART_MspInit+0xfc>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c74:	230c      	movs	r3, #12
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c84:	2307      	movs	r3, #7
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_UART_MspInit+0x100>)
 8000c90:	f000 fb82 	bl	8001398 <HAL_GPIO_Init>
}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40011000 	.word	0x40011000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	40004400 	.word	0x40004400

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 f966 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <USART1_IRQHandler+0x10>)
 8000d06:	f001 fbed 	bl	80024e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000008c 	.word	0x2000008c

08000d14 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <ITM_SendChar+0x48>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <ITM_SendChar+0x48>)
 8000d24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d28:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <ITM_SendChar+0x4c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <ITM_SendChar+0x4c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000d36:	bf00      	nop
 8000d38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d0f8      	beq.n	8000d38 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d46:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	6013      	str	r3, [r2, #0]
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000edfc 	.word	0xe000edfc
 8000d60:	e0000e00 	.word	0xe0000e00

08000d64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
 8000d74:	e00a      	b.n	8000d8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d76:	f3af 8000 	nop.w
 8000d7a:	4601      	mov	r1, r0
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697a      	ldr	r2, [r7, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	dbf0      	blt.n	8000d76 <_read+0x12>
  }

  return len;
 8000d94:	687b      	ldr	r3, [r7, #4]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e009      	b.n	8000dc4 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1c5a      	adds	r2, r3, #1
 8000db4:	60ba      	str	r2, [r7, #8]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ffab 	bl	8000d14 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697a      	ldr	r2, [r7, #20]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dbf1      	blt.n	8000db0 <_write+0x12>
  }
  return len;
 8000dcc:	687b      	ldr	r3, [r7, #4]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_close>:

int _close(int file)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dfe:	605a      	str	r2, [r3, #4]
  return 0;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <_isatty>:

int _isatty(int file)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <_sbrk+0x5c>)
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <_sbrk+0x60>)
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d102      	bne.n	8000e62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <_sbrk+0x64>)
 8000e5e:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <_sbrk+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d207      	bcs.n	8000e80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e70:	f002 faa0 	bl	80033b4 <__errno>
 8000e74:	4603      	mov	r3, r0
 8000e76:	220c      	movs	r2, #12
 8000e78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e7e:	e009      	b.n	8000e94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e86:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <_sbrk+0x64>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a05      	ldr	r2, [pc, #20]	; (8000ea4 <_sbrk+0x64>)
 8000e90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20020000 	.word	0x20020000
 8000ea0:	00000400 	.word	0x00000400
 8000ea4:	20000120 	.word	0x20000120
 8000ea8:	20000138 	.word	0x20000138

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SystemInit+0x20>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a05      	ldr	r2, [pc, #20]	; (8000ecc <SystemInit+0x20>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ed6:	490e      	ldr	r1, [pc, #56]	; (8000f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eec:	4c0b      	ldr	r4, [pc, #44]	; (8000f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000efa:	f7ff ffd7 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efe:	f002 fa5f 	bl	80033c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f02:	f7ff fbbf 	bl	8000684 <main>
  bx  lr    
 8000f06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f14:	08004540 	.word	0x08004540
  ldr r2, =_sbss
 8000f18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f1c:	20000138 	.word	0x20000138

08000f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f28:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <HAL_Init+0x40>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_Init+0x40>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_Init+0x40>)
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	; (8000f64 <HAL_Init+0x40>)
 8000f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f94f 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f000 f808 	bl	8000f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fdfc 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023c00 	.word	0x40023c00

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x54>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x58>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f967 	bl	800125a <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa4:	f000 f92f 	bl	8001206 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	; (8000fc4 <HAL_InitTick+0x5c>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000124 	.word	0x20000124

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000124 	.word	0x20000124

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
         );
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001218:	f7ff ff3e 	bl	8001098 <__NVIC_GetPriorityGrouping>
 800121c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68b9      	ldr	r1, [r7, #8]
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff8e 	bl	8001144 <NVIC_EncodePriority>
 8001228:	4602      	mov	r2, r0
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122e:	4611      	mov	r1, r2
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff5d 	bl	80010f0 <__NVIC_SetPriority>
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff31 	bl	80010b4 <__NVIC_EnableIRQ>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ffa2 	bl	80011ac <SysTick_Config>
 8001268:	4603      	mov	r3, r0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff feb6 	bl	8000ff0 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d008      	beq.n	80012a4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2280      	movs	r2, #128	; 0x80
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e052      	b.n	800134a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 0216 	bic.w	r2, r2, #22
 80012b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d103      	bne.n	80012d4 <HAL_DMA_Abort+0x62>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0208 	bic.w	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f4:	e013      	b.n	800131e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f6:	f7ff fe7b 	bl	8000ff0 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b05      	cmp	r3, #5
 8001302:	d90c      	bls.n	800131e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2220      	movs	r2, #32
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e015      	b.n	800134a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e4      	bne.n	80012f6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001330:	223f      	movs	r2, #63	; 0x3f
 8001332:	409a      	lsls	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d004      	beq.n	8001370 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e00c      	b.n	800138a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2205      	movs	r2, #5
 8001374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0201 	bic.w	r2, r2, #1
 8001386:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e165      	b.n	8001680 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 8154 	bne.w	800167a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80ae 	beq.w	800167a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b5d      	ldr	r3, [pc, #372]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5c      	ldr	r2, [pc, #368]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <HAL_GPIO_Init+0x300>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_GPIO_Init+0x304>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4f      	ldr	r2, [pc, #316]	; (80016a0 <HAL_GPIO_Init+0x308>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d025      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4e      	ldr	r2, [pc, #312]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01f      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4d      	ldr	r2, [pc, #308]	; (80016a8 <HAL_GPIO_Init+0x310>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d019      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x314>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d013      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x318>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x20a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x206>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x320>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x202>
 8001596:	2306      	movs	r3, #6
 8001598:	e00c      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 800159a:	2307      	movs	r3, #7
 800159c:	e00a      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 800159e:	2305      	movs	r3, #5
 80015a0:	e008      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e006      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015a6:	2303      	movs	r3, #3
 80015a8:	e004      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e002      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <HAL_GPIO_Init+0x21c>
 80015b2:	2300      	movs	r3, #0
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	f002 0203 	and.w	r2, r2, #3
 80015ba:	0092      	lsls	r2, r2, #2
 80015bc:	4093      	lsls	r3, r2
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c4:	4935      	ldr	r1, [pc, #212]	; (800169c <HAL_GPIO_Init+0x304>)
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_GPIO_Init+0x324>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a31      	ldr	r2, [pc, #196]	; (80016bc <HAL_GPIO_Init+0x324>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <HAL_GPIO_Init+0x324>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a26      	ldr	r2, [pc, #152]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001626:	4b25      	ldr	r3, [pc, #148]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <HAL_GPIO_Init+0x324>)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001674:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2b0f      	cmp	r3, #15
 8001684:	f67f ae96 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001688:	bf00      	nop
 800168a:	bf00      	nop
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40013800 	.word	0x40013800
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020400 	.word	0x40020400
 80016a8:	40020800 	.word	0x40020800
 80016ac:	40020c00 	.word	0x40020c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40013c00 	.word	0x40013c00

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016dc:	e003      	b.n	80016e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016de:	887b      	ldrh	r3, [r7, #2]
 80016e0:	041a      	lsls	r2, r3, #16
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	619a      	str	r2, [r3, #24]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0cc      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 030f 	and.w	r3, r3, #15
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d001      	beq.n	8001730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0b8      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d020      	beq.n	800177e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001748:	4b59      	ldr	r3, [pc, #356]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001760:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	4a52      	ldr	r2, [pc, #328]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800176a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	494d      	ldr	r1, [pc, #308]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d044      	beq.n	8001814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d119      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e07f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b2:	4b3f      	ldr	r3, [pc, #252]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d109      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e06f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e067      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f023 0203 	bic.w	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	4934      	ldr	r1, [pc, #208]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	f7ff fc04 	bl	8000ff0 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ea:	e00a      	b.n	8001802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ec:	f7ff fc00 	bl	8000ff0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e04f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 020c 	and.w	r2, r3, #12
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	429a      	cmp	r2, r3
 8001812:	d1eb      	bne.n	80017ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 030f 	and.w	r3, r3, #15
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d20c      	bcs.n	800183c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e032      	b.n	80018a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d008      	beq.n	800185a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001848:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	4916      	ldr	r1, [pc, #88]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	4313      	orrs	r3, r2
 8001858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800187a:	f000 f855 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 800187e:	4602      	mov	r2, r0
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	091b      	lsrs	r3, r3, #4
 8001886:	f003 030f 	and.w	r3, r3, #15
 800188a:	490a      	ldr	r1, [pc, #40]	; (80018b4 <HAL_RCC_ClockConfig+0x1c0>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	fa22 f303 	lsr.w	r3, r2, r3
 8001892:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fb64 	bl	8000f68 <HAL_InitTick>

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023c00 	.word	0x40023c00
 80018b0:	40023800 	.word	0x40023800
 80018b4:	08004480 	.word	0x08004480
 80018b8:	20000000 	.word	0x20000000
 80018bc:	20000004 	.word	0x20000004

080018c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80018c6:	681b      	ldr	r3, [r3, #0]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	20000000 	.word	0x20000000

080018d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018dc:	f7ff fff0 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 80018e0:	4602      	mov	r2, r0
 80018e2:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	0a9b      	lsrs	r3, r3, #10
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	4903      	ldr	r1, [pc, #12]	; (80018fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ee:	5ccb      	ldrb	r3, [r1, r3]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08004490 	.word	0x08004490

08001900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001904:	f7ff ffdc 	bl	80018c0 <HAL_RCC_GetHCLKFreq>
 8001908:	4602      	mov	r2, r0
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	0b5b      	lsrs	r3, r3, #13
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	4903      	ldr	r1, [pc, #12]	; (8001924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001916:	5ccb      	ldrb	r3, [r1, r3]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800
 8001924:	08004490 	.word	0x08004490

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800192c:	b0ae      	sub	sp, #184	; 0xb8
 800192e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800194e:	4bcb      	ldr	r3, [pc, #812]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b0c      	cmp	r3, #12
 8001958:	f200 8206 	bhi.w	8001d68 <HAL_RCC_GetSysClockFreq+0x440>
 800195c:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <HAL_RCC_GetSysClockFreq+0x3c>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001999 	.word	0x08001999
 8001968:	08001d69 	.word	0x08001d69
 800196c:	08001d69 	.word	0x08001d69
 8001970:	08001d69 	.word	0x08001d69
 8001974:	080019a1 	.word	0x080019a1
 8001978:	08001d69 	.word	0x08001d69
 800197c:	08001d69 	.word	0x08001d69
 8001980:	08001d69 	.word	0x08001d69
 8001984:	080019a9 	.word	0x080019a9
 8001988:	08001d69 	.word	0x08001d69
 800198c:	08001d69 	.word	0x08001d69
 8001990:	08001d69 	.word	0x08001d69
 8001994:	08001b99 	.word	0x08001b99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001998:	4bb9      	ldr	r3, [pc, #740]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x358>)
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800199e:	e1e7      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a0:	4bb8      	ldr	r3, [pc, #736]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80019a6:	e1e3      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4bb4      	ldr	r3, [pc, #720]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b4:	4bb1      	ldr	r3, [pc, #708]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d071      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c0:	4bae      	ldr	r3, [pc, #696]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	099b      	lsrs	r3, r3, #6
 80019c6:	2200      	movs	r2, #0
 80019c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80019cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80019d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80019e6:	4622      	mov	r2, r4
 80019e8:	462b      	mov	r3, r5
 80019ea:	f04f 0000 	mov.w	r0, #0
 80019ee:	f04f 0100 	mov.w	r1, #0
 80019f2:	0159      	lsls	r1, r3, #5
 80019f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f8:	0150      	lsls	r0, r2, #5
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4621      	mov	r1, r4
 8001a00:	1a51      	subs	r1, r2, r1
 8001a02:	6439      	str	r1, [r7, #64]	; 0x40
 8001a04:	4629      	mov	r1, r5
 8001a06:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a18:	4649      	mov	r1, r9
 8001a1a:	018b      	lsls	r3, r1, #6
 8001a1c:	4641      	mov	r1, r8
 8001a1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a22:	4641      	mov	r1, r8
 8001a24:	018a      	lsls	r2, r1, #6
 8001a26:	4641      	mov	r1, r8
 8001a28:	1a51      	subs	r1, r2, r1
 8001a2a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	f04f 0300 	mov.w	r3, #0
 8001a3c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001a40:	4649      	mov	r1, r9
 8001a42:	00cb      	lsls	r3, r1, #3
 8001a44:	4641      	mov	r1, r8
 8001a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a4a:	4641      	mov	r1, r8
 8001a4c:	00ca      	lsls	r2, r1, #3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	4622      	mov	r2, r4
 8001a56:	189b      	adds	r3, r3, r2
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	eb42 0303 	adc.w	r3, r2, r3
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a70:	4629      	mov	r1, r5
 8001a72:	024b      	lsls	r3, r1, #9
 8001a74:	4621      	mov	r1, r4
 8001a76:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	024a      	lsls	r2, r1, #9
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a86:	2200      	movs	r2, #0
 8001a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001a90:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001a94:	f7fe fc0c 	bl	80002b0 <__aeabi_uldivmod>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001aa2:	e067      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa4:	4b75      	ldr	r3, [pc, #468]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ab0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001abe:	2300      	movs	r3, #0
 8001ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ac2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001ac6:	4622      	mov	r2, r4
 8001ac8:	462b      	mov	r3, r5
 8001aca:	f04f 0000 	mov.w	r0, #0
 8001ace:	f04f 0100 	mov.w	r1, #0
 8001ad2:	0159      	lsls	r1, r3, #5
 8001ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad8:	0150      	lsls	r0, r2, #5
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4621      	mov	r1, r4
 8001ae0:	1a51      	subs	r1, r2, r1
 8001ae2:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001af8:	4649      	mov	r1, r9
 8001afa:	018b      	lsls	r3, r1, #6
 8001afc:	4641      	mov	r1, r8
 8001afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b02:	4641      	mov	r1, r8
 8001b04:	018a      	lsls	r2, r1, #6
 8001b06:	4641      	mov	r1, r8
 8001b08:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b0c:	4649      	mov	r1, r9
 8001b0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b26:	4692      	mov	sl, r2
 8001b28:	469b      	mov	fp, r3
 8001b2a:	4623      	mov	r3, r4
 8001b2c:	eb1a 0303 	adds.w	r3, sl, r3
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	462b      	mov	r3, r5
 8001b34:	eb4b 0303 	adc.w	r3, fp, r3
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b46:	4629      	mov	r1, r5
 8001b48:	028b      	lsls	r3, r1, #10
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b50:	4621      	mov	r1, r4
 8001b52:	028a      	lsls	r2, r1, #10
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	673b      	str	r3, [r7, #112]	; 0x70
 8001b60:	677a      	str	r2, [r7, #116]	; 0x74
 8001b62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001b66:	f7fe fba3 	bl	80002b0 <__aeabi_uldivmod>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4613      	mov	r3, r2
 8001b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001b86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001b96:	e0eb      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b98:	4b38      	ldr	r3, [pc, #224]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba4:	4b35      	ldr	r3, [pc, #212]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d06b      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb0:	4b32      	ldr	r3, [pc, #200]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x354>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	099b      	lsrs	r3, r3, #6
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8001bba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001bbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc2:	663b      	str	r3, [r7, #96]	; 0x60
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8001bc8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001bcc:	4622      	mov	r2, r4
 8001bce:	462b      	mov	r3, r5
 8001bd0:	f04f 0000 	mov.w	r0, #0
 8001bd4:	f04f 0100 	mov.w	r1, #0
 8001bd8:	0159      	lsls	r1, r3, #5
 8001bda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bde:	0150      	lsls	r0, r2, #5
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4621      	mov	r1, r4
 8001be6:	1a51      	subs	r1, r2, r1
 8001be8:	61b9      	str	r1, [r7, #24]
 8001bea:	4629      	mov	r1, r5
 8001bec:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001bfe:	4659      	mov	r1, fp
 8001c00:	018b      	lsls	r3, r1, #6
 8001c02:	4651      	mov	r1, sl
 8001c04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c08:	4651      	mov	r1, sl
 8001c0a:	018a      	lsls	r2, r1, #6
 8001c0c:	4651      	mov	r1, sl
 8001c0e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c12:	4659      	mov	r1, fp
 8001c14:	eb63 0901 	sbc.w	r9, r3, r1
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2c:	4690      	mov	r8, r2
 8001c2e:	4699      	mov	r9, r3
 8001c30:	4623      	mov	r3, r4
 8001c32:	eb18 0303 	adds.w	r3, r8, r3
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	462b      	mov	r3, r5
 8001c3a:	eb49 0303 	adc.w	r3, r9, r3
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	024b      	lsls	r3, r1, #9
 8001c50:	4621      	mov	r1, r4
 8001c52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c56:	4621      	mov	r1, r4
 8001c58:	024a      	lsls	r2, r1, #9
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c62:	2200      	movs	r2, #0
 8001c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c66:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001c68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c6c:	f7fe fb20 	bl	80002b0 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4613      	mov	r3, r2
 8001c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c7a:	e065      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x420>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	00f42400 	.word	0x00f42400
 8001c84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c88:	4b3d      	ldr	r3, [pc, #244]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	4611      	mov	r1, r2
 8001c94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c98:	653b      	str	r3, [r7, #80]	; 0x50
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	657b      	str	r3, [r7, #84]	; 0x54
 8001c9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001ca2:	4642      	mov	r2, r8
 8001ca4:	464b      	mov	r3, r9
 8001ca6:	f04f 0000 	mov.w	r0, #0
 8001caa:	f04f 0100 	mov.w	r1, #0
 8001cae:	0159      	lsls	r1, r3, #5
 8001cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb4:	0150      	lsls	r0, r2, #5
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4641      	mov	r1, r8
 8001cbc:	1a51      	subs	r1, r2, r1
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001cd4:	4659      	mov	r1, fp
 8001cd6:	018b      	lsls	r3, r1, #6
 8001cd8:	4651      	mov	r1, sl
 8001cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cde:	4651      	mov	r1, sl
 8001ce0:	018a      	lsls	r2, r1, #6
 8001ce2:	4651      	mov	r1, sl
 8001ce4:	1a54      	subs	r4, r2, r1
 8001ce6:	4659      	mov	r1, fp
 8001ce8:	eb63 0501 	sbc.w	r5, r3, r1
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	00eb      	lsls	r3, r5, #3
 8001cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cfa:	00e2      	lsls	r2, r4, #3
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	461d      	mov	r5, r3
 8001d00:	4643      	mov	r3, r8
 8001d02:	18e3      	adds	r3, r4, r3
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	464b      	mov	r3, r9
 8001d08:	eb45 0303 	adc.w	r3, r5, r3
 8001d0c:	607b      	str	r3, [r7, #4]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	028b      	lsls	r3, r1, #10
 8001d1e:	4621      	mov	r1, r4
 8001d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d24:	4621      	mov	r1, r4
 8001d26:	028a      	lsls	r2, r1, #10
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d30:	2200      	movs	r2, #0
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d34:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001d3a:	f7fe fab9 	bl	80002b0 <__aeabi_uldivmod>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4613      	mov	r3, r2
 8001d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	0f1b      	lsrs	r3, r3, #28
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001d56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d66:	e003      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	37b8      	adds	r7, #184	; 0xb8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	00f42400 	.word	0x00f42400

08001d88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e28d      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8083 	beq.w	8001eae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001da8:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d019      	beq.n	8001de8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001db4:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d106      	bne.n	8001dce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dc0:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dcc:	d00c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d112      	bne.n	8001e00 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dda:	4b88      	ldr	r3, [pc, #544]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de6:	d10b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	4b84      	ldr	r3, [pc, #528]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d05b      	beq.n	8001eac <HAL_RCC_OscConfig+0x124>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d157      	bne.n	8001eac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e25a      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_OscConfig+0x90>
 8001e0a:	4b7c      	ldr	r3, [pc, #496]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7b      	ldr	r2, [pc, #492]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e01d      	b.n	8001e54 <HAL_RCC_OscConfig+0xcc>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0xb4>
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0xcc>
 8001e3c:	4b6f      	ldr	r3, [pc, #444]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b6c      	ldr	r3, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6b      	ldr	r2, [pc, #428]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff f8c8 	bl	8000ff0 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff f8c4 	bl	8000ff0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e21f      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0xdc>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8b4 	bl	8000ff0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7ff f8b0 	bl	8000ff0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e20b      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x104>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d06f      	beq.n	8001f9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001eba:	4b50      	ldr	r3, [pc, #320]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d017      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d105      	bne.n	8001ede <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x186>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1d3      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4937      	ldr	r1, [pc, #220]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b34      	ldr	r3, [pc, #208]	; (8002000 <HAL_RCC_OscConfig+0x278>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff f85d 	bl	8000ff0 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff f859 	bl	8000ff0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1b4      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4925      	ldr	r1, [pc, #148]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x278>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff f83c 	bl	8000ff0 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7ff f838 	bl	8000ff0 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e193      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d036      	beq.n	8002014 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_RCC_OscConfig+0x27c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7ff f81c 	bl	8000ff0 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff f818 	bl	8000ff0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e173      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_OscConfig+0x274>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x234>
 8001fda:	e01b      	b.n	8002014 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7ff f805 	bl	8000ff0 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	e00e      	b.n	8002008 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff f801 	bl	8000ff0 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d907      	bls.n	8002008 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e15c      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	42470000 	.word	0x42470000
 8002004:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4b8a      	ldr	r3, [pc, #552]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ea      	bne.n	8001fea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8097 	beq.w	8002150 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b83      	ldr	r3, [pc, #524]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b7f      	ldr	r3, [pc, #508]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	4a7e      	ldr	r2, [pc, #504]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	; 0x40
 8002042:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b79      	ldr	r3, [pc, #484]	; (8002238 <HAL_RCC_OscConfig+0x4b0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b76      	ldr	r3, [pc, #472]	; (8002238 <HAL_RCC_OscConfig+0x4b0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a75      	ldr	r2, [pc, #468]	; (8002238 <HAL_RCC_OscConfig+0x4b0>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7fe ffc1 	bl	8000ff0 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7fe ffbd 	bl	8000ff0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e118      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	4b6c      	ldr	r3, [pc, #432]	; (8002238 <HAL_RCC_OscConfig+0x4b0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x31e>
 8002098:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	4a65      	ldr	r2, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	; 0x70
 80020a4:	e01c      	b.n	80020e0 <HAL_RCC_OscConfig+0x358>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x340>
 80020ae:	4b61      	ldr	r3, [pc, #388]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	4a60      	ldr	r2, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6713      	str	r3, [r2, #112]	; 0x70
 80020ba:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a5d      	ldr	r2, [pc, #372]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0x358>
 80020c8:	4b5a      	ldr	r3, [pc, #360]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a59      	ldr	r2, [pc, #356]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	f023 0304 	bic.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7fe ff82 	bl	8000ff0 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe ff7e 	bl	8000ff0 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0d7      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	4b4b      	ldr	r3, [pc, #300]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ee      	beq.n	80020f0 <HAL_RCC_OscConfig+0x368>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002114:	f7fe ff6c 	bl	8000ff0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7fe ff68 	bl	8000ff0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0c1      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002132:	4b40      	ldr	r3, [pc, #256]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ee      	bne.n	800211c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	4a3a      	ldr	r2, [pc, #232]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80ad 	beq.w	80022b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800215a:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b08      	cmp	r3, #8
 8002164:	d060      	beq.n	8002228 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d145      	bne.n	80021fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b33      	ldr	r3, [pc, #204]	; (800223c <HAL_RCC_OscConfig+0x4b4>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe ff3c 	bl	8000ff0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217c:	f7fe ff38 	bl	8000ff0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e093      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c4:	071b      	lsls	r3, r3, #28
 80021c6:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x4b4>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d2:	f7fe ff0d 	bl	8000ff0 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe ff09 	bl	8000ff0 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e064      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x452>
 80021f8:	e05c      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x4b4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7fe fef6 	bl	8000ff0 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fef2 	bl	8000ff0 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e04d      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x4ac>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x480>
 8002226:	e045      	b.n	80022b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e040      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_RCC_OscConfig+0x538>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d030      	beq.n	80022b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d129      	bne.n	80022b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d122      	bne.n	80022b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002278:	4293      	cmp	r3, r2
 800227a:	d119      	bne.n	80022b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d10f      	bne.n	80022b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800

080022c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e03f      	b.n	8002356 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fc5a 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 fddf 	bl	8002ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800231c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800232c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800233c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b08a      	sub	sp, #40	; 0x28
 8002362:	af02      	add	r7, sp, #8
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	d17c      	bne.n	8002478 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_UART_Transmit+0x2c>
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e075      	b.n	800247a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_UART_Transmit+0x3e>
 8002398:	2302      	movs	r3, #2
 800239a:	e06e      	b.n	800247a <HAL_UART_Transmit+0x11c>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2221      	movs	r2, #33	; 0x21
 80023ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023b2:	f7fe fe1d 	bl	8000ff0 <HAL_GetTick>
 80023b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	88fa      	ldrh	r2, [r7, #6]
 80023bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023cc:	d108      	bne.n	80023e0 <HAL_UART_Transmit+0x82>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d104      	bne.n	80023e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e003      	b.n	80023e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023f0:	e02a      	b.n	8002448 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2200      	movs	r2, #0
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fb1f 	bl	8002a40 <UART_WaitOnFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e036      	b.n	800247a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002420:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	3302      	adds	r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	e007      	b.n	800243a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	3301      	adds	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800244c:	b29b      	uxth	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1cf      	bne.n	80023f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2200      	movs	r2, #0
 800245a:	2140      	movs	r1, #64	; 0x40
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 faef 	bl	8002a40 <UART_WaitOnFlagUntilTimeout>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e006      	b.n	800247a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	60f8      	str	r0, [r7, #12]
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	4613      	mov	r3, r2
 800248e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b20      	cmp	r3, #32
 800249a:	d11d      	bne.n	80024d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_UART_Receive_IT+0x26>
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e016      	b.n	80024da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_UART_Receive_IT+0x38>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e00f      	b.n	80024da <HAL_UART_Receive_IT+0x58>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fb24 	bl	8002b1c <UART_Start_Receive_IT>
 80024d4:	4603      	mov	r3, r0
 80024d6:	e000      	b.n	80024da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b0ba      	sub	sp, #232	; 0xe8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10f      	bne.n	800254a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800252a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d009      	beq.n	800254a <HAL_UART_IRQHandler+0x66>
 8002536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fc07 	bl	8002d56 <UART_Receive_IT>
      return;
 8002548:	e256      	b.n	80029f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800254a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80de 	beq.w	8002710 <HAL_UART_IRQHandler+0x22c>
 8002554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d106      	bne.n	800256e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002564:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80d1 	beq.w	8002710 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800256e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_UART_IRQHandler+0xae>
 800257a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f043 0201 	orr.w	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_UART_IRQHandler+0xd2>
 800259e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f043 0202 	orr.w	r2, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_UART_IRQHandler+0xf6>
 80025c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f043 0204 	orr.w	r2, r3, #4
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d011      	beq.n	800260a <HAL_UART_IRQHandler+0x126>
 80025e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d005      	beq.n	800260a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f043 0208 	orr.w	r2, r3, #8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	f000 81ed 	beq.w	80029ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_UART_IRQHandler+0x14e>
 8002620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fb92 	bl	8002d56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_UART_IRQHandler+0x17a>
 8002656:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d04f      	beq.n	80026fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa9a 	bl	8002b98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b40      	cmp	r3, #64	; 0x40
 8002670:	d141      	bne.n	80026f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3314      	adds	r3, #20
 8002678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002680:	e853 3f00 	ldrex	r3, [r3]
 8002684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800268c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3314      	adds	r3, #20
 800269a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800269e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80026ae:	e841 2300 	strex	r3, r2, [r1]
 80026b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80026b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1d9      	bne.n	8002672 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d013      	beq.n	80026ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	4a7d      	ldr	r2, [pc, #500]	; (80028c0 <HAL_UART_IRQHandler+0x3dc>)
 80026cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fe3d 	bl	8001352 <HAL_DMA_Abort_IT>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d016      	beq.n	800270c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026e8:	4610      	mov	r0, r2
 80026ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ec:	e00e      	b.n	800270c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f990 	bl	8002a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026f4:	e00a      	b.n	800270c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f98c 	bl	8002a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026fc:	e006      	b.n	800270c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f988 	bl	8002a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800270a:	e170      	b.n	80029ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800270c:	bf00      	nop
    return;
 800270e:	e16e      	b.n	80029ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 814a 	bne.w	80029ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f003 0310 	and.w	r3, r3, #16
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8143 	beq.w	80029ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 813c 	beq.w	80029ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002736:	2300      	movs	r3, #0
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60bb      	str	r3, [r7, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b40      	cmp	r3, #64	; 0x40
 8002758:	f040 80b4 	bne.w	80028c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002768:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 8140 	beq.w	80029f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800277a:	429a      	cmp	r2, r3
 800277c:	f080 8139 	bcs.w	80029f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002786:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002792:	f000 8088 	beq.w	80028a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	330c      	adds	r3, #12
 800279c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027a4:	e853 3f00 	ldrex	r3, [r3]
 80027a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80027ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	330c      	adds	r3, #12
 80027be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80027c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80027c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80027ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80027d2:	e841 2300 	strex	r3, r2, [r1]
 80027d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80027da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1d9      	bne.n	8002796 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3314      	adds	r3, #20
 80027e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ec:	e853 3f00 	ldrex	r3, [r3]
 80027f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027f4:	f023 0301 	bic.w	r3, r3, #1
 80027f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	3314      	adds	r3, #20
 8002802:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002806:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800280a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800280e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002812:	e841 2300 	strex	r3, r2, [r1]
 8002816:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1e1      	bne.n	80027e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002828:	e853 3f00 	ldrex	r3, [r3]
 800282c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800282e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002834:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3314      	adds	r3, #20
 800283e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002842:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002844:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002848:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e3      	bne.n	800281e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286e:	e853 3f00 	ldrex	r3, [r3]
 8002872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002876:	f023 0310 	bic.w	r3, r3, #16
 800287a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	330c      	adds	r3, #12
 8002884:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002888:	65ba      	str	r2, [r7, #88]	; 0x58
 800288a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800288e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002890:	e841 2300 	strex	r3, r2, [r1]
 8002894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e3      	bne.n	8002864 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fce6 	bl	8001272 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f8b6 	bl	8002a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028bc:	e099      	b.n	80029f2 <HAL_UART_IRQHandler+0x50e>
 80028be:	bf00      	nop
 80028c0:	08002c5f 	.word	0x08002c5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 808b 	beq.w	80029f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80028e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8086 	beq.w	80029f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	e853 3f00 	ldrex	r3, [r3]
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800290e:	647a      	str	r2, [r7, #68]	; 0x44
 8002910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800291c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1e3      	bne.n	80028ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3314      	adds	r3, #20
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	623b      	str	r3, [r7, #32]
   return(result);
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	3314      	adds	r3, #20
 8002942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002946:	633a      	str	r2, [r7, #48]	; 0x30
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800294a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800294c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294e:	e841 2300 	strex	r3, r2, [r1]
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1e3      	bne.n	8002922 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2220      	movs	r2, #32
 800295e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	330c      	adds	r3, #12
 800296e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	e853 3f00 	ldrex	r3, [r3]
 8002976:	60fb      	str	r3, [r7, #12]
   return(result);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0310 	bic.w	r3, r3, #16
 800297e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800298c:	61fa      	str	r2, [r7, #28]
 800298e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	69b9      	ldr	r1, [r7, #24]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	617b      	str	r3, [r7, #20]
   return(result);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e3      	bne.n	8002968 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f83e 	bl	8002a28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029ac:	e023      	b.n	80029f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_UART_IRQHandler+0x4ea>
 80029ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f95d 	bl	8002c86 <UART_Transmit_IT>
    return;
 80029cc:	e014      	b.n	80029f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00e      	beq.n	80029f8 <HAL_UART_IRQHandler+0x514>
 80029da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d008      	beq.n	80029f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f99d 	bl	8002d26 <UART_EndTransmit_IT>
    return;
 80029ec:	e004      	b.n	80029f8 <HAL_UART_IRQHandler+0x514>
    return;
 80029ee:	bf00      	nop
 80029f0:	e002      	b.n	80029f8 <HAL_UART_IRQHandler+0x514>
      return;
 80029f2:	bf00      	nop
 80029f4:	e000      	b.n	80029f8 <HAL_UART_IRQHandler+0x514>
      return;
 80029f6:	bf00      	nop
  }
}
 80029f8:	37e8      	adds	r7, #232	; 0xe8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop

08002a00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b090      	sub	sp, #64	; 0x40
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a50:	e050      	b.n	8002af4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a58:	d04c      	beq.n	8002af4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d007      	beq.n	8002a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a60:	f7fe fac6 	bl	8000ff0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d241      	bcs.n	8002af4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a90:	637a      	str	r2, [r7, #52]	; 0x34
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3314      	adds	r3, #20
 8002aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3314      	adds	r3, #20
 8002ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ac4:	623a      	str	r2, [r7, #32]
 8002ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	69f9      	ldr	r1, [r7, #28]
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e5      	bne.n	8002aa4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e00f      	b.n	8002b14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d09f      	beq.n	8002a52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3740      	adds	r7, #64	; 0x40
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	88fa      	ldrh	r2, [r7, #6]
 8002b34:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2222      	movs	r2, #34	; 0x22
 8002b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695a      	ldr	r2, [r3, #20]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0201 	orr.w	r2, r2, #1
 8002b78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0220 	orr.w	r2, r2, #32
 8002b88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b095      	sub	sp, #84	; 0x54
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	330c      	adds	r3, #12
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002baa:	e853 3f00 	ldrex	r3, [r3]
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bc0:	643a      	str	r2, [r7, #64]	; 0x40
 8002bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e5      	bne.n	8002ba0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	e853 3f00 	ldrex	r3, [r3]
 8002be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3314      	adds	r3, #20
 8002bf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfc:	e841 2300 	strex	r3, r2, [r1]
 8002c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1e5      	bne.n	8002bd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d119      	bne.n	8002c44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	e853 3f00 	ldrex	r3, [r3]
 8002c1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0310 	bic.w	r3, r3, #16
 8002c26:	647b      	str	r3, [r7, #68]	; 0x44
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	330c      	adds	r3, #12
 8002c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c30:	61ba      	str	r2, [r7, #24]
 8002c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c34:	6979      	ldr	r1, [r7, #20]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	e841 2300 	strex	r3, r2, [r1]
 8002c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e5      	bne.n	8002c10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c52:	bf00      	nop
 8002c54:	3754      	adds	r7, #84	; 0x54
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff fecb 	bl	8002a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b21      	cmp	r3, #33	; 0x21
 8002c98:	d13e      	bne.n	8002d18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	d114      	bne.n	8002cce <UART_Transmit_IT+0x48>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d110      	bne.n	8002cce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	1c9a      	adds	r2, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	621a      	str	r2, [r3, #32]
 8002ccc:	e008      	b.n	8002ce0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	1c59      	adds	r1, r3, #1
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6211      	str	r1, [r2, #32]
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	4619      	mov	r1, r3
 8002cee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10f      	bne.n	8002d14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	e000      	b.n	8002d1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d18:	2302      	movs	r3, #2
  }
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f7ff fe5a 	bl	8002a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b08c      	sub	sp, #48	; 0x30
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b22      	cmp	r3, #34	; 0x22
 8002d68:	f040 80ab 	bne.w	8002ec2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	d117      	bne.n	8002da6 <UART_Receive_IT+0x50>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d113      	bne.n	8002da6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	1c9a      	adds	r2, r3, #2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	e026      	b.n	8002df4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db8:	d007      	beq.n	8002dca <UART_Receive_IT+0x74>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10a      	bne.n	8002dd8 <UART_Receive_IT+0x82>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e008      	b.n	8002dea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4619      	mov	r1, r3
 8002e02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d15a      	bne.n	8002ebe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0220 	bic.w	r2, r2, #32
 8002e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695a      	ldr	r2, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d135      	bne.n	8002eb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	330c      	adds	r3, #12
 8002e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f023 0310 	bic.w	r3, r3, #16
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	330c      	adds	r3, #12
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	623a      	str	r2, [r7, #32]
 8002e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	69f9      	ldr	r1, [r7, #28]
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e5      	bne.n	8002e4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d10a      	bne.n	8002ea6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002eaa:	4619      	mov	r1, r3
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff fdbb 	bl	8002a28 <HAL_UARTEx_RxEventCallback>
 8002eb2:	e002      	b.n	8002eba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fd fe13 	bl	8000ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e002      	b.n	8002ec4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3730      	adds	r7, #48	; 0x30
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed0:	b0c0      	sub	sp, #256	; 0x100
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	68d9      	ldr	r1, [r3, #12]
 8002eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	ea40 0301 	orr.w	r3, r0, r1
 8002ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f24:	f021 010c 	bic.w	r1, r1, #12
 8002f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f32:	430b      	orrs	r3, r1
 8002f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f46:	6999      	ldr	r1, [r3, #24]
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	ea40 0301 	orr.w	r3, r0, r1
 8002f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b8f      	ldr	r3, [pc, #572]	; (8003198 <UART_SetConfig+0x2cc>)
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d005      	beq.n	8002f6c <UART_SetConfig+0xa0>
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b8d      	ldr	r3, [pc, #564]	; (800319c <UART_SetConfig+0x2d0>)
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d104      	bne.n	8002f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f6c:	f7fe fcc8 	bl	8001900 <HAL_RCC_GetPCLK2Freq>
 8002f70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f74:	e003      	b.n	8002f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f76:	f7fe fcaf 	bl	80018d8 <HAL_RCC_GetPCLK1Freq>
 8002f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f88:	f040 810c 	bne.w	80031a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f90:	2200      	movs	r2, #0
 8002f92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	462b      	mov	r3, r5
 8002fa2:	1891      	adds	r1, r2, r2
 8002fa4:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fa6:	415b      	adcs	r3, r3
 8002fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fae:	4621      	mov	r1, r4
 8002fb0:	eb12 0801 	adds.w	r8, r2, r1
 8002fb4:	4629      	mov	r1, r5
 8002fb6:	eb43 0901 	adc.w	r9, r3, r1
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fce:	4690      	mov	r8, r2
 8002fd0:	4699      	mov	r9, r3
 8002fd2:	4623      	mov	r3, r4
 8002fd4:	eb18 0303 	adds.w	r3, r8, r3
 8002fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fdc:	462b      	mov	r3, r5
 8002fde:	eb49 0303 	adc.w	r3, r9, r3
 8002fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	18db      	adds	r3, r3, r3
 8002ffe:	653b      	str	r3, [r7, #80]	; 0x50
 8003000:	4613      	mov	r3, r2
 8003002:	eb42 0303 	adc.w	r3, r2, r3
 8003006:	657b      	str	r3, [r7, #84]	; 0x54
 8003008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800300c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003010:	f7fd f94e 	bl	80002b0 <__aeabi_uldivmod>
 8003014:	4602      	mov	r2, r0
 8003016:	460b      	mov	r3, r1
 8003018:	4b61      	ldr	r3, [pc, #388]	; (80031a0 <UART_SetConfig+0x2d4>)
 800301a:	fba3 2302 	umull	r2, r3, r3, r2
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	011c      	lsls	r4, r3, #4
 8003022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003026:	2200      	movs	r2, #0
 8003028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800302c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003034:	4642      	mov	r2, r8
 8003036:	464b      	mov	r3, r9
 8003038:	1891      	adds	r1, r2, r2
 800303a:	64b9      	str	r1, [r7, #72]	; 0x48
 800303c:	415b      	adcs	r3, r3
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003044:	4641      	mov	r1, r8
 8003046:	eb12 0a01 	adds.w	sl, r2, r1
 800304a:	4649      	mov	r1, r9
 800304c:	eb43 0b01 	adc.w	fp, r3, r1
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800305c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003064:	4692      	mov	sl, r2
 8003066:	469b      	mov	fp, r3
 8003068:	4643      	mov	r3, r8
 800306a:	eb1a 0303 	adds.w	r3, sl, r3
 800306e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003072:	464b      	mov	r3, r9
 8003074:	eb4b 0303 	adc.w	r3, fp, r3
 8003078:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800307c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003088:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800308c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003090:	460b      	mov	r3, r1
 8003092:	18db      	adds	r3, r3, r3
 8003094:	643b      	str	r3, [r7, #64]	; 0x40
 8003096:	4613      	mov	r3, r2
 8003098:	eb42 0303 	adc.w	r3, r2, r3
 800309c:	647b      	str	r3, [r7, #68]	; 0x44
 800309e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80030a6:	f7fd f903 	bl	80002b0 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	4b3b      	ldr	r3, [pc, #236]	; (80031a0 <UART_SetConfig+0x2d4>)
 80030b2:	fba3 2301 	umull	r2, r3, r3, r1
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2264      	movs	r2, #100	; 0x64
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	1acb      	subs	r3, r1, r3
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030c6:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <UART_SetConfig+0x2d4>)
 80030c8:	fba3 2302 	umull	r2, r3, r3, r2
 80030cc:	095b      	lsrs	r3, r3, #5
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030d4:	441c      	add	r4, r3
 80030d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	1891      	adds	r1, r2, r2
 80030ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80030f0:	415b      	adcs	r3, r3
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030f8:	4641      	mov	r1, r8
 80030fa:	1851      	adds	r1, r2, r1
 80030fc:	6339      	str	r1, [r7, #48]	; 0x30
 80030fe:	4649      	mov	r1, r9
 8003100:	414b      	adcs	r3, r1
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003110:	4659      	mov	r1, fp
 8003112:	00cb      	lsls	r3, r1, #3
 8003114:	4651      	mov	r1, sl
 8003116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800311a:	4651      	mov	r1, sl
 800311c:	00ca      	lsls	r2, r1, #3
 800311e:	4610      	mov	r0, r2
 8003120:	4619      	mov	r1, r3
 8003122:	4603      	mov	r3, r0
 8003124:	4642      	mov	r2, r8
 8003126:	189b      	adds	r3, r3, r2
 8003128:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800312c:	464b      	mov	r3, r9
 800312e:	460a      	mov	r2, r1
 8003130:	eb42 0303 	adc.w	r3, r2, r3
 8003134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003144:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800314c:	460b      	mov	r3, r1
 800314e:	18db      	adds	r3, r3, r3
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
 8003152:	4613      	mov	r3, r2
 8003154:	eb42 0303 	adc.w	r3, r2, r3
 8003158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800315e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003162:	f7fd f8a5 	bl	80002b0 <__aeabi_uldivmod>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <UART_SetConfig+0x2d4>)
 800316c:	fba3 1302 	umull	r1, r3, r3, r2
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	2164      	movs	r1, #100	; 0x64
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	3332      	adds	r3, #50	; 0x32
 800317e:	4a08      	ldr	r2, [pc, #32]	; (80031a0 <UART_SetConfig+0x2d4>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	095b      	lsrs	r3, r3, #5
 8003186:	f003 0207 	and.w	r2, r3, #7
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4422      	add	r2, r4
 8003192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003194:	e105      	b.n	80033a2 <UART_SetConfig+0x4d6>
 8003196:	bf00      	nop
 8003198:	40011000 	.word	0x40011000
 800319c:	40011400 	.word	0x40011400
 80031a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a8:	2200      	movs	r2, #0
 80031aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80031ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80031b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80031b6:	4642      	mov	r2, r8
 80031b8:	464b      	mov	r3, r9
 80031ba:	1891      	adds	r1, r2, r2
 80031bc:	6239      	str	r1, [r7, #32]
 80031be:	415b      	adcs	r3, r3
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24
 80031c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031c6:	4641      	mov	r1, r8
 80031c8:	1854      	adds	r4, r2, r1
 80031ca:	4649      	mov	r1, r9
 80031cc:	eb43 0501 	adc.w	r5, r3, r1
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	f04f 0300 	mov.w	r3, #0
 80031d8:	00eb      	lsls	r3, r5, #3
 80031da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031de:	00e2      	lsls	r2, r4, #3
 80031e0:	4614      	mov	r4, r2
 80031e2:	461d      	mov	r5, r3
 80031e4:	4643      	mov	r3, r8
 80031e6:	18e3      	adds	r3, r4, r3
 80031e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031ec:	464b      	mov	r3, r9
 80031ee:	eb45 0303 	adc.w	r3, r5, r3
 80031f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003202:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003212:	4629      	mov	r1, r5
 8003214:	008b      	lsls	r3, r1, #2
 8003216:	4621      	mov	r1, r4
 8003218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800321c:	4621      	mov	r1, r4
 800321e:	008a      	lsls	r2, r1, #2
 8003220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003224:	f7fd f844 	bl	80002b0 <__aeabi_uldivmod>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4b60      	ldr	r3, [pc, #384]	; (80033b0 <UART_SetConfig+0x4e4>)
 800322e:	fba3 2302 	umull	r2, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	011c      	lsls	r4, r3, #4
 8003236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800323a:	2200      	movs	r2, #0
 800323c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003240:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003248:	4642      	mov	r2, r8
 800324a:	464b      	mov	r3, r9
 800324c:	1891      	adds	r1, r2, r2
 800324e:	61b9      	str	r1, [r7, #24]
 8003250:	415b      	adcs	r3, r3
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003258:	4641      	mov	r1, r8
 800325a:	1851      	adds	r1, r2, r1
 800325c:	6139      	str	r1, [r7, #16]
 800325e:	4649      	mov	r1, r9
 8003260:	414b      	adcs	r3, r1
 8003262:	617b      	str	r3, [r7, #20]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003270:	4659      	mov	r1, fp
 8003272:	00cb      	lsls	r3, r1, #3
 8003274:	4651      	mov	r1, sl
 8003276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800327a:	4651      	mov	r1, sl
 800327c:	00ca      	lsls	r2, r1, #3
 800327e:	4610      	mov	r0, r2
 8003280:	4619      	mov	r1, r3
 8003282:	4603      	mov	r3, r0
 8003284:	4642      	mov	r2, r8
 8003286:	189b      	adds	r3, r3, r2
 8003288:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800328c:	464b      	mov	r3, r9
 800328e:	460a      	mov	r2, r1
 8003290:	eb42 0303 	adc.w	r3, r2, r3
 8003294:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80032a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80032b0:	4649      	mov	r1, r9
 80032b2:	008b      	lsls	r3, r1, #2
 80032b4:	4641      	mov	r1, r8
 80032b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ba:	4641      	mov	r1, r8
 80032bc:	008a      	lsls	r2, r1, #2
 80032be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032c2:	f7fc fff5 	bl	80002b0 <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4b39      	ldr	r3, [pc, #228]	; (80033b0 <UART_SetConfig+0x4e4>)
 80032cc:	fba3 1302 	umull	r1, r3, r3, r2
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	2164      	movs	r1, #100	; 0x64
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	3332      	adds	r3, #50	; 0x32
 80032de:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <UART_SetConfig+0x4e4>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ea:	441c      	add	r4, r3
 80032ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032f0:	2200      	movs	r2, #0
 80032f2:	673b      	str	r3, [r7, #112]	; 0x70
 80032f4:	677a      	str	r2, [r7, #116]	; 0x74
 80032f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032fa:	4642      	mov	r2, r8
 80032fc:	464b      	mov	r3, r9
 80032fe:	1891      	adds	r1, r2, r2
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	415b      	adcs	r3, r3
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800330a:	4641      	mov	r1, r8
 800330c:	1851      	adds	r1, r2, r1
 800330e:	6039      	str	r1, [r7, #0]
 8003310:	4649      	mov	r1, r9
 8003312:	414b      	adcs	r3, r1
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003322:	4659      	mov	r1, fp
 8003324:	00cb      	lsls	r3, r1, #3
 8003326:	4651      	mov	r1, sl
 8003328:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332c:	4651      	mov	r1, sl
 800332e:	00ca      	lsls	r2, r1, #3
 8003330:	4610      	mov	r0, r2
 8003332:	4619      	mov	r1, r3
 8003334:	4603      	mov	r3, r0
 8003336:	4642      	mov	r2, r8
 8003338:	189b      	adds	r3, r3, r2
 800333a:	66bb      	str	r3, [r7, #104]	; 0x68
 800333c:	464b      	mov	r3, r9
 800333e:	460a      	mov	r2, r1
 8003340:	eb42 0303 	adc.w	r3, r2, r3
 8003344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	663b      	str	r3, [r7, #96]	; 0x60
 8003350:	667a      	str	r2, [r7, #100]	; 0x64
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800335e:	4649      	mov	r1, r9
 8003360:	008b      	lsls	r3, r1, #2
 8003362:	4641      	mov	r1, r8
 8003364:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003368:	4641      	mov	r1, r8
 800336a:	008a      	lsls	r2, r1, #2
 800336c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003370:	f7fc ff9e 	bl	80002b0 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <UART_SetConfig+0x4e4>)
 800337a:	fba3 1302 	umull	r1, r3, r3, r2
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2164      	movs	r1, #100	; 0x64
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	3332      	adds	r3, #50	; 0x32
 800338c:	4a08      	ldr	r2, [pc, #32]	; (80033b0 <UART_SetConfig+0x4e4>)
 800338e:	fba2 2303 	umull	r2, r3, r2, r3
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4422      	add	r2, r4
 80033a0:	609a      	str	r2, [r3, #8]
}
 80033a2:	bf00      	nop
 80033a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80033a8:	46bd      	mov	sp, r7
 80033aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ae:	bf00      	nop
 80033b0:	51eb851f 	.word	0x51eb851f

080033b4 <__errno>:
 80033b4:	4b01      	ldr	r3, [pc, #4]	; (80033bc <__errno+0x8>)
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <__libc_init_array>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	4d0d      	ldr	r5, [pc, #52]	; (80033f8 <__libc_init_array+0x38>)
 80033c4:	4c0d      	ldr	r4, [pc, #52]	; (80033fc <__libc_init_array+0x3c>)
 80033c6:	1b64      	subs	r4, r4, r5
 80033c8:	10a4      	asrs	r4, r4, #2
 80033ca:	2600      	movs	r6, #0
 80033cc:	42a6      	cmp	r6, r4
 80033ce:	d109      	bne.n	80033e4 <__libc_init_array+0x24>
 80033d0:	4d0b      	ldr	r5, [pc, #44]	; (8003400 <__libc_init_array+0x40>)
 80033d2:	4c0c      	ldr	r4, [pc, #48]	; (8003404 <__libc_init_array+0x44>)
 80033d4:	f001 f80c 	bl	80043f0 <_init>
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	2600      	movs	r6, #0
 80033de:	42a6      	cmp	r6, r4
 80033e0:	d105      	bne.n	80033ee <__libc_init_array+0x2e>
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80033e8:	4798      	blx	r3
 80033ea:	3601      	adds	r6, #1
 80033ec:	e7ee      	b.n	80033cc <__libc_init_array+0xc>
 80033ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f2:	4798      	blx	r3
 80033f4:	3601      	adds	r6, #1
 80033f6:	e7f2      	b.n	80033de <__libc_init_array+0x1e>
 80033f8:	08004538 	.word	0x08004538
 80033fc:	08004538 	.word	0x08004538
 8003400:	08004538 	.word	0x08004538
 8003404:	0800453c 	.word	0x0800453c

08003408 <memset>:
 8003408:	4402      	add	r2, r0
 800340a:	4603      	mov	r3, r0
 800340c:	4293      	cmp	r3, r2
 800340e:	d100      	bne.n	8003412 <memset+0xa>
 8003410:	4770      	bx	lr
 8003412:	f803 1b01 	strb.w	r1, [r3], #1
 8003416:	e7f9      	b.n	800340c <memset+0x4>

08003418 <iprintf>:
 8003418:	b40f      	push	{r0, r1, r2, r3}
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <iprintf+0x2c>)
 800341c:	b513      	push	{r0, r1, r4, lr}
 800341e:	681c      	ldr	r4, [r3, #0]
 8003420:	b124      	cbz	r4, 800342c <iprintf+0x14>
 8003422:	69a3      	ldr	r3, [r4, #24]
 8003424:	b913      	cbnz	r3, 800342c <iprintf+0x14>
 8003426:	4620      	mov	r0, r4
 8003428:	f000 f87c 	bl	8003524 <__sinit>
 800342c:	ab05      	add	r3, sp, #20
 800342e:	9a04      	ldr	r2, [sp, #16]
 8003430:	68a1      	ldr	r1, [r4, #8]
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	4620      	mov	r0, r4
 8003436:	f000 f9d3 	bl	80037e0 <_vfiprintf_r>
 800343a:	b002      	add	sp, #8
 800343c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003440:	b004      	add	sp, #16
 8003442:	4770      	bx	lr
 8003444:	2000000c 	.word	0x2000000c

08003448 <putchar>:
 8003448:	4b09      	ldr	r3, [pc, #36]	; (8003470 <putchar+0x28>)
 800344a:	b513      	push	{r0, r1, r4, lr}
 800344c:	681c      	ldr	r4, [r3, #0]
 800344e:	4601      	mov	r1, r0
 8003450:	b134      	cbz	r4, 8003460 <putchar+0x18>
 8003452:	69a3      	ldr	r3, [r4, #24]
 8003454:	b923      	cbnz	r3, 8003460 <putchar+0x18>
 8003456:	9001      	str	r0, [sp, #4]
 8003458:	4620      	mov	r0, r4
 800345a:	f000 f863 	bl	8003524 <__sinit>
 800345e:	9901      	ldr	r1, [sp, #4]
 8003460:	68a2      	ldr	r2, [r4, #8]
 8003462:	4620      	mov	r0, r4
 8003464:	b002      	add	sp, #8
 8003466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800346a:	f000 bc7d 	b.w	8003d68 <_putc_r>
 800346e:	bf00      	nop
 8003470:	2000000c 	.word	0x2000000c

08003474 <std>:
 8003474:	2300      	movs	r3, #0
 8003476:	b510      	push	{r4, lr}
 8003478:	4604      	mov	r4, r0
 800347a:	e9c0 3300 	strd	r3, r3, [r0]
 800347e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003482:	6083      	str	r3, [r0, #8]
 8003484:	8181      	strh	r1, [r0, #12]
 8003486:	6643      	str	r3, [r0, #100]	; 0x64
 8003488:	81c2      	strh	r2, [r0, #14]
 800348a:	6183      	str	r3, [r0, #24]
 800348c:	4619      	mov	r1, r3
 800348e:	2208      	movs	r2, #8
 8003490:	305c      	adds	r0, #92	; 0x5c
 8003492:	f7ff ffb9 	bl	8003408 <memset>
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <std+0x38>)
 8003498:	6263      	str	r3, [r4, #36]	; 0x24
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <std+0x3c>)
 800349c:	62a3      	str	r3, [r4, #40]	; 0x28
 800349e:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <std+0x40>)
 80034a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <std+0x44>)
 80034a4:	6224      	str	r4, [r4, #32]
 80034a6:	6323      	str	r3, [r4, #48]	; 0x30
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	bf00      	nop
 80034ac:	08003e19 	.word	0x08003e19
 80034b0:	08003e3b 	.word	0x08003e3b
 80034b4:	08003e73 	.word	0x08003e73
 80034b8:	08003e97 	.word	0x08003e97

080034bc <_cleanup_r>:
 80034bc:	4901      	ldr	r1, [pc, #4]	; (80034c4 <_cleanup_r+0x8>)
 80034be:	f000 b8af 	b.w	8003620 <_fwalk_reent>
 80034c2:	bf00      	nop
 80034c4:	08004171 	.word	0x08004171

080034c8 <__sfmoreglue>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	2268      	movs	r2, #104	; 0x68
 80034cc:	1e4d      	subs	r5, r1, #1
 80034ce:	4355      	muls	r5, r2
 80034d0:	460e      	mov	r6, r1
 80034d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034d6:	f000 f8e5 	bl	80036a4 <_malloc_r>
 80034da:	4604      	mov	r4, r0
 80034dc:	b140      	cbz	r0, 80034f0 <__sfmoreglue+0x28>
 80034de:	2100      	movs	r1, #0
 80034e0:	e9c0 1600 	strd	r1, r6, [r0]
 80034e4:	300c      	adds	r0, #12
 80034e6:	60a0      	str	r0, [r4, #8]
 80034e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034ec:	f7ff ff8c 	bl	8003408 <memset>
 80034f0:	4620      	mov	r0, r4
 80034f2:	bd70      	pop	{r4, r5, r6, pc}

080034f4 <__sfp_lock_acquire>:
 80034f4:	4801      	ldr	r0, [pc, #4]	; (80034fc <__sfp_lock_acquire+0x8>)
 80034f6:	f000 b8b3 	b.w	8003660 <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	20000129 	.word	0x20000129

08003500 <__sfp_lock_release>:
 8003500:	4801      	ldr	r0, [pc, #4]	; (8003508 <__sfp_lock_release+0x8>)
 8003502:	f000 b8ae 	b.w	8003662 <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	20000129 	.word	0x20000129

0800350c <__sinit_lock_acquire>:
 800350c:	4801      	ldr	r0, [pc, #4]	; (8003514 <__sinit_lock_acquire+0x8>)
 800350e:	f000 b8a7 	b.w	8003660 <__retarget_lock_acquire_recursive>
 8003512:	bf00      	nop
 8003514:	2000012a 	.word	0x2000012a

08003518 <__sinit_lock_release>:
 8003518:	4801      	ldr	r0, [pc, #4]	; (8003520 <__sinit_lock_release+0x8>)
 800351a:	f000 b8a2 	b.w	8003662 <__retarget_lock_release_recursive>
 800351e:	bf00      	nop
 8003520:	2000012a 	.word	0x2000012a

08003524 <__sinit>:
 8003524:	b510      	push	{r4, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	f7ff fff0 	bl	800350c <__sinit_lock_acquire>
 800352c:	69a3      	ldr	r3, [r4, #24]
 800352e:	b11b      	cbz	r3, 8003538 <__sinit+0x14>
 8003530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003534:	f7ff bff0 	b.w	8003518 <__sinit_lock_release>
 8003538:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800353c:	6523      	str	r3, [r4, #80]	; 0x50
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <__sinit+0x68>)
 8003540:	4a13      	ldr	r2, [pc, #76]	; (8003590 <__sinit+0x6c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	62a2      	str	r2, [r4, #40]	; 0x28
 8003546:	42a3      	cmp	r3, r4
 8003548:	bf04      	itt	eq
 800354a:	2301      	moveq	r3, #1
 800354c:	61a3      	streq	r3, [r4, #24]
 800354e:	4620      	mov	r0, r4
 8003550:	f000 f820 	bl	8003594 <__sfp>
 8003554:	6060      	str	r0, [r4, #4]
 8003556:	4620      	mov	r0, r4
 8003558:	f000 f81c 	bl	8003594 <__sfp>
 800355c:	60a0      	str	r0, [r4, #8]
 800355e:	4620      	mov	r0, r4
 8003560:	f000 f818 	bl	8003594 <__sfp>
 8003564:	2200      	movs	r2, #0
 8003566:	60e0      	str	r0, [r4, #12]
 8003568:	2104      	movs	r1, #4
 800356a:	6860      	ldr	r0, [r4, #4]
 800356c:	f7ff ff82 	bl	8003474 <std>
 8003570:	68a0      	ldr	r0, [r4, #8]
 8003572:	2201      	movs	r2, #1
 8003574:	2109      	movs	r1, #9
 8003576:	f7ff ff7d 	bl	8003474 <std>
 800357a:	68e0      	ldr	r0, [r4, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	2112      	movs	r1, #18
 8003580:	f7ff ff78 	bl	8003474 <std>
 8003584:	2301      	movs	r3, #1
 8003586:	61a3      	str	r3, [r4, #24]
 8003588:	e7d2      	b.n	8003530 <__sinit+0xc>
 800358a:	bf00      	nop
 800358c:	08004498 	.word	0x08004498
 8003590:	080034bd 	.word	0x080034bd

08003594 <__sfp>:
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	4607      	mov	r7, r0
 8003598:	f7ff ffac 	bl	80034f4 <__sfp_lock_acquire>
 800359c:	4b1e      	ldr	r3, [pc, #120]	; (8003618 <__sfp+0x84>)
 800359e:	681e      	ldr	r6, [r3, #0]
 80035a0:	69b3      	ldr	r3, [r6, #24]
 80035a2:	b913      	cbnz	r3, 80035aa <__sfp+0x16>
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7ff ffbd 	bl	8003524 <__sinit>
 80035aa:	3648      	adds	r6, #72	; 0x48
 80035ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	d503      	bpl.n	80035bc <__sfp+0x28>
 80035b4:	6833      	ldr	r3, [r6, #0]
 80035b6:	b30b      	cbz	r3, 80035fc <__sfp+0x68>
 80035b8:	6836      	ldr	r6, [r6, #0]
 80035ba:	e7f7      	b.n	80035ac <__sfp+0x18>
 80035bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035c0:	b9d5      	cbnz	r5, 80035f8 <__sfp+0x64>
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <__sfp+0x88>)
 80035c4:	60e3      	str	r3, [r4, #12]
 80035c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035ca:	6665      	str	r5, [r4, #100]	; 0x64
 80035cc:	f000 f847 	bl	800365e <__retarget_lock_init_recursive>
 80035d0:	f7ff ff96 	bl	8003500 <__sfp_lock_release>
 80035d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035dc:	6025      	str	r5, [r4, #0]
 80035de:	61a5      	str	r5, [r4, #24]
 80035e0:	2208      	movs	r2, #8
 80035e2:	4629      	mov	r1, r5
 80035e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035e8:	f7ff ff0e 	bl	8003408 <memset>
 80035ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035f4:	4620      	mov	r0, r4
 80035f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035f8:	3468      	adds	r4, #104	; 0x68
 80035fa:	e7d9      	b.n	80035b0 <__sfp+0x1c>
 80035fc:	2104      	movs	r1, #4
 80035fe:	4638      	mov	r0, r7
 8003600:	f7ff ff62 	bl	80034c8 <__sfmoreglue>
 8003604:	4604      	mov	r4, r0
 8003606:	6030      	str	r0, [r6, #0]
 8003608:	2800      	cmp	r0, #0
 800360a:	d1d5      	bne.n	80035b8 <__sfp+0x24>
 800360c:	f7ff ff78 	bl	8003500 <__sfp_lock_release>
 8003610:	230c      	movs	r3, #12
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	e7ee      	b.n	80035f4 <__sfp+0x60>
 8003616:	bf00      	nop
 8003618:	08004498 	.word	0x08004498
 800361c:	ffff0001 	.word	0xffff0001

08003620 <_fwalk_reent>:
 8003620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003624:	4606      	mov	r6, r0
 8003626:	4688      	mov	r8, r1
 8003628:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800362c:	2700      	movs	r7, #0
 800362e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003632:	f1b9 0901 	subs.w	r9, r9, #1
 8003636:	d505      	bpl.n	8003644 <_fwalk_reent+0x24>
 8003638:	6824      	ldr	r4, [r4, #0]
 800363a:	2c00      	cmp	r4, #0
 800363c:	d1f7      	bne.n	800362e <_fwalk_reent+0xe>
 800363e:	4638      	mov	r0, r7
 8003640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003644:	89ab      	ldrh	r3, [r5, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d907      	bls.n	800365a <_fwalk_reent+0x3a>
 800364a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800364e:	3301      	adds	r3, #1
 8003650:	d003      	beq.n	800365a <_fwalk_reent+0x3a>
 8003652:	4629      	mov	r1, r5
 8003654:	4630      	mov	r0, r6
 8003656:	47c0      	blx	r8
 8003658:	4307      	orrs	r7, r0
 800365a:	3568      	adds	r5, #104	; 0x68
 800365c:	e7e9      	b.n	8003632 <_fwalk_reent+0x12>

0800365e <__retarget_lock_init_recursive>:
 800365e:	4770      	bx	lr

08003660 <__retarget_lock_acquire_recursive>:
 8003660:	4770      	bx	lr

08003662 <__retarget_lock_release_recursive>:
 8003662:	4770      	bx	lr

08003664 <sbrk_aligned>:
 8003664:	b570      	push	{r4, r5, r6, lr}
 8003666:	4e0e      	ldr	r6, [pc, #56]	; (80036a0 <sbrk_aligned+0x3c>)
 8003668:	460c      	mov	r4, r1
 800366a:	6831      	ldr	r1, [r6, #0]
 800366c:	4605      	mov	r5, r0
 800366e:	b911      	cbnz	r1, 8003676 <sbrk_aligned+0x12>
 8003670:	f000 fbc2 	bl	8003df8 <_sbrk_r>
 8003674:	6030      	str	r0, [r6, #0]
 8003676:	4621      	mov	r1, r4
 8003678:	4628      	mov	r0, r5
 800367a:	f000 fbbd 	bl	8003df8 <_sbrk_r>
 800367e:	1c43      	adds	r3, r0, #1
 8003680:	d00a      	beq.n	8003698 <sbrk_aligned+0x34>
 8003682:	1cc4      	adds	r4, r0, #3
 8003684:	f024 0403 	bic.w	r4, r4, #3
 8003688:	42a0      	cmp	r0, r4
 800368a:	d007      	beq.n	800369c <sbrk_aligned+0x38>
 800368c:	1a21      	subs	r1, r4, r0
 800368e:	4628      	mov	r0, r5
 8003690:	f000 fbb2 	bl	8003df8 <_sbrk_r>
 8003694:	3001      	adds	r0, #1
 8003696:	d101      	bne.n	800369c <sbrk_aligned+0x38>
 8003698:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800369c:	4620      	mov	r0, r4
 800369e:	bd70      	pop	{r4, r5, r6, pc}
 80036a0:	20000130 	.word	0x20000130

080036a4 <_malloc_r>:
 80036a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036a8:	1ccd      	adds	r5, r1, #3
 80036aa:	f025 0503 	bic.w	r5, r5, #3
 80036ae:	3508      	adds	r5, #8
 80036b0:	2d0c      	cmp	r5, #12
 80036b2:	bf38      	it	cc
 80036b4:	250c      	movcc	r5, #12
 80036b6:	2d00      	cmp	r5, #0
 80036b8:	4607      	mov	r7, r0
 80036ba:	db01      	blt.n	80036c0 <_malloc_r+0x1c>
 80036bc:	42a9      	cmp	r1, r5
 80036be:	d905      	bls.n	80036cc <_malloc_r+0x28>
 80036c0:	230c      	movs	r3, #12
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	2600      	movs	r6, #0
 80036c6:	4630      	mov	r0, r6
 80036c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036cc:	4e2e      	ldr	r6, [pc, #184]	; (8003788 <_malloc_r+0xe4>)
 80036ce:	f000 fe03 	bl	80042d8 <__malloc_lock>
 80036d2:	6833      	ldr	r3, [r6, #0]
 80036d4:	461c      	mov	r4, r3
 80036d6:	bb34      	cbnz	r4, 8003726 <_malloc_r+0x82>
 80036d8:	4629      	mov	r1, r5
 80036da:	4638      	mov	r0, r7
 80036dc:	f7ff ffc2 	bl	8003664 <sbrk_aligned>
 80036e0:	1c43      	adds	r3, r0, #1
 80036e2:	4604      	mov	r4, r0
 80036e4:	d14d      	bne.n	8003782 <_malloc_r+0xde>
 80036e6:	6834      	ldr	r4, [r6, #0]
 80036e8:	4626      	mov	r6, r4
 80036ea:	2e00      	cmp	r6, #0
 80036ec:	d140      	bne.n	8003770 <_malloc_r+0xcc>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	4631      	mov	r1, r6
 80036f2:	4638      	mov	r0, r7
 80036f4:	eb04 0803 	add.w	r8, r4, r3
 80036f8:	f000 fb7e 	bl	8003df8 <_sbrk_r>
 80036fc:	4580      	cmp	r8, r0
 80036fe:	d13a      	bne.n	8003776 <_malloc_r+0xd2>
 8003700:	6821      	ldr	r1, [r4, #0]
 8003702:	3503      	adds	r5, #3
 8003704:	1a6d      	subs	r5, r5, r1
 8003706:	f025 0503 	bic.w	r5, r5, #3
 800370a:	3508      	adds	r5, #8
 800370c:	2d0c      	cmp	r5, #12
 800370e:	bf38      	it	cc
 8003710:	250c      	movcc	r5, #12
 8003712:	4629      	mov	r1, r5
 8003714:	4638      	mov	r0, r7
 8003716:	f7ff ffa5 	bl	8003664 <sbrk_aligned>
 800371a:	3001      	adds	r0, #1
 800371c:	d02b      	beq.n	8003776 <_malloc_r+0xd2>
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	442b      	add	r3, r5
 8003722:	6023      	str	r3, [r4, #0]
 8003724:	e00e      	b.n	8003744 <_malloc_r+0xa0>
 8003726:	6822      	ldr	r2, [r4, #0]
 8003728:	1b52      	subs	r2, r2, r5
 800372a:	d41e      	bmi.n	800376a <_malloc_r+0xc6>
 800372c:	2a0b      	cmp	r2, #11
 800372e:	d916      	bls.n	800375e <_malloc_r+0xba>
 8003730:	1961      	adds	r1, r4, r5
 8003732:	42a3      	cmp	r3, r4
 8003734:	6025      	str	r5, [r4, #0]
 8003736:	bf18      	it	ne
 8003738:	6059      	strne	r1, [r3, #4]
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	bf08      	it	eq
 800373e:	6031      	streq	r1, [r6, #0]
 8003740:	5162      	str	r2, [r4, r5]
 8003742:	604b      	str	r3, [r1, #4]
 8003744:	4638      	mov	r0, r7
 8003746:	f104 060b 	add.w	r6, r4, #11
 800374a:	f000 fdcb 	bl	80042e4 <__malloc_unlock>
 800374e:	f026 0607 	bic.w	r6, r6, #7
 8003752:	1d23      	adds	r3, r4, #4
 8003754:	1af2      	subs	r2, r6, r3
 8003756:	d0b6      	beq.n	80036c6 <_malloc_r+0x22>
 8003758:	1b9b      	subs	r3, r3, r6
 800375a:	50a3      	str	r3, [r4, r2]
 800375c:	e7b3      	b.n	80036c6 <_malloc_r+0x22>
 800375e:	6862      	ldr	r2, [r4, #4]
 8003760:	42a3      	cmp	r3, r4
 8003762:	bf0c      	ite	eq
 8003764:	6032      	streq	r2, [r6, #0]
 8003766:	605a      	strne	r2, [r3, #4]
 8003768:	e7ec      	b.n	8003744 <_malloc_r+0xa0>
 800376a:	4623      	mov	r3, r4
 800376c:	6864      	ldr	r4, [r4, #4]
 800376e:	e7b2      	b.n	80036d6 <_malloc_r+0x32>
 8003770:	4634      	mov	r4, r6
 8003772:	6876      	ldr	r6, [r6, #4]
 8003774:	e7b9      	b.n	80036ea <_malloc_r+0x46>
 8003776:	230c      	movs	r3, #12
 8003778:	603b      	str	r3, [r7, #0]
 800377a:	4638      	mov	r0, r7
 800377c:	f000 fdb2 	bl	80042e4 <__malloc_unlock>
 8003780:	e7a1      	b.n	80036c6 <_malloc_r+0x22>
 8003782:	6025      	str	r5, [r4, #0]
 8003784:	e7de      	b.n	8003744 <_malloc_r+0xa0>
 8003786:	bf00      	nop
 8003788:	2000012c 	.word	0x2000012c

0800378c <__sfputc_r>:
 800378c:	6893      	ldr	r3, [r2, #8]
 800378e:	3b01      	subs	r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	b410      	push	{r4}
 8003794:	6093      	str	r3, [r2, #8]
 8003796:	da08      	bge.n	80037aa <__sfputc_r+0x1e>
 8003798:	6994      	ldr	r4, [r2, #24]
 800379a:	42a3      	cmp	r3, r4
 800379c:	db01      	blt.n	80037a2 <__sfputc_r+0x16>
 800379e:	290a      	cmp	r1, #10
 80037a0:	d103      	bne.n	80037aa <__sfputc_r+0x1e>
 80037a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037a6:	f000 bb7b 	b.w	8003ea0 <__swbuf_r>
 80037aa:	6813      	ldr	r3, [r2, #0]
 80037ac:	1c58      	adds	r0, r3, #1
 80037ae:	6010      	str	r0, [r2, #0]
 80037b0:	7019      	strb	r1, [r3, #0]
 80037b2:	4608      	mov	r0, r1
 80037b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <__sfputs_r>:
 80037ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037bc:	4606      	mov	r6, r0
 80037be:	460f      	mov	r7, r1
 80037c0:	4614      	mov	r4, r2
 80037c2:	18d5      	adds	r5, r2, r3
 80037c4:	42ac      	cmp	r4, r5
 80037c6:	d101      	bne.n	80037cc <__sfputs_r+0x12>
 80037c8:	2000      	movs	r0, #0
 80037ca:	e007      	b.n	80037dc <__sfputs_r+0x22>
 80037cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d0:	463a      	mov	r2, r7
 80037d2:	4630      	mov	r0, r6
 80037d4:	f7ff ffda 	bl	800378c <__sfputc_r>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d1f3      	bne.n	80037c4 <__sfputs_r+0xa>
 80037dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037e0 <_vfiprintf_r>:
 80037e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	460d      	mov	r5, r1
 80037e6:	b09d      	sub	sp, #116	; 0x74
 80037e8:	4614      	mov	r4, r2
 80037ea:	4698      	mov	r8, r3
 80037ec:	4606      	mov	r6, r0
 80037ee:	b118      	cbz	r0, 80037f8 <_vfiprintf_r+0x18>
 80037f0:	6983      	ldr	r3, [r0, #24]
 80037f2:	b90b      	cbnz	r3, 80037f8 <_vfiprintf_r+0x18>
 80037f4:	f7ff fe96 	bl	8003524 <__sinit>
 80037f8:	4b89      	ldr	r3, [pc, #548]	; (8003a20 <_vfiprintf_r+0x240>)
 80037fa:	429d      	cmp	r5, r3
 80037fc:	d11b      	bne.n	8003836 <_vfiprintf_r+0x56>
 80037fe:	6875      	ldr	r5, [r6, #4]
 8003800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003802:	07d9      	lsls	r1, r3, #31
 8003804:	d405      	bmi.n	8003812 <_vfiprintf_r+0x32>
 8003806:	89ab      	ldrh	r3, [r5, #12]
 8003808:	059a      	lsls	r2, r3, #22
 800380a:	d402      	bmi.n	8003812 <_vfiprintf_r+0x32>
 800380c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800380e:	f7ff ff27 	bl	8003660 <__retarget_lock_acquire_recursive>
 8003812:	89ab      	ldrh	r3, [r5, #12]
 8003814:	071b      	lsls	r3, r3, #28
 8003816:	d501      	bpl.n	800381c <_vfiprintf_r+0x3c>
 8003818:	692b      	ldr	r3, [r5, #16]
 800381a:	b9eb      	cbnz	r3, 8003858 <_vfiprintf_r+0x78>
 800381c:	4629      	mov	r1, r5
 800381e:	4630      	mov	r0, r6
 8003820:	f000 fba2 	bl	8003f68 <__swsetup_r>
 8003824:	b1c0      	cbz	r0, 8003858 <_vfiprintf_r+0x78>
 8003826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003828:	07dc      	lsls	r4, r3, #31
 800382a:	d50e      	bpl.n	800384a <_vfiprintf_r+0x6a>
 800382c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003830:	b01d      	add	sp, #116	; 0x74
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <_vfiprintf_r+0x244>)
 8003838:	429d      	cmp	r5, r3
 800383a:	d101      	bne.n	8003840 <_vfiprintf_r+0x60>
 800383c:	68b5      	ldr	r5, [r6, #8]
 800383e:	e7df      	b.n	8003800 <_vfiprintf_r+0x20>
 8003840:	4b79      	ldr	r3, [pc, #484]	; (8003a28 <_vfiprintf_r+0x248>)
 8003842:	429d      	cmp	r5, r3
 8003844:	bf08      	it	eq
 8003846:	68f5      	ldreq	r5, [r6, #12]
 8003848:	e7da      	b.n	8003800 <_vfiprintf_r+0x20>
 800384a:	89ab      	ldrh	r3, [r5, #12]
 800384c:	0598      	lsls	r0, r3, #22
 800384e:	d4ed      	bmi.n	800382c <_vfiprintf_r+0x4c>
 8003850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003852:	f7ff ff06 	bl	8003662 <__retarget_lock_release_recursive>
 8003856:	e7e9      	b.n	800382c <_vfiprintf_r+0x4c>
 8003858:	2300      	movs	r3, #0
 800385a:	9309      	str	r3, [sp, #36]	; 0x24
 800385c:	2320      	movs	r3, #32
 800385e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003862:	f8cd 800c 	str.w	r8, [sp, #12]
 8003866:	2330      	movs	r3, #48	; 0x30
 8003868:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003a2c <_vfiprintf_r+0x24c>
 800386c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003870:	f04f 0901 	mov.w	r9, #1
 8003874:	4623      	mov	r3, r4
 8003876:	469a      	mov	sl, r3
 8003878:	f813 2b01 	ldrb.w	r2, [r3], #1
 800387c:	b10a      	cbz	r2, 8003882 <_vfiprintf_r+0xa2>
 800387e:	2a25      	cmp	r2, #37	; 0x25
 8003880:	d1f9      	bne.n	8003876 <_vfiprintf_r+0x96>
 8003882:	ebba 0b04 	subs.w	fp, sl, r4
 8003886:	d00b      	beq.n	80038a0 <_vfiprintf_r+0xc0>
 8003888:	465b      	mov	r3, fp
 800388a:	4622      	mov	r2, r4
 800388c:	4629      	mov	r1, r5
 800388e:	4630      	mov	r0, r6
 8003890:	f7ff ff93 	bl	80037ba <__sfputs_r>
 8003894:	3001      	adds	r0, #1
 8003896:	f000 80aa 	beq.w	80039ee <_vfiprintf_r+0x20e>
 800389a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800389c:	445a      	add	r2, fp
 800389e:	9209      	str	r2, [sp, #36]	; 0x24
 80038a0:	f89a 3000 	ldrb.w	r3, [sl]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80a2 	beq.w	80039ee <_vfiprintf_r+0x20e>
 80038aa:	2300      	movs	r3, #0
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038b4:	f10a 0a01 	add.w	sl, sl, #1
 80038b8:	9304      	str	r3, [sp, #16]
 80038ba:	9307      	str	r3, [sp, #28]
 80038bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038c0:	931a      	str	r3, [sp, #104]	; 0x68
 80038c2:	4654      	mov	r4, sl
 80038c4:	2205      	movs	r2, #5
 80038c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ca:	4858      	ldr	r0, [pc, #352]	; (8003a2c <_vfiprintf_r+0x24c>)
 80038cc:	f7fc fca0 	bl	8000210 <memchr>
 80038d0:	9a04      	ldr	r2, [sp, #16]
 80038d2:	b9d8      	cbnz	r0, 800390c <_vfiprintf_r+0x12c>
 80038d4:	06d1      	lsls	r1, r2, #27
 80038d6:	bf44      	itt	mi
 80038d8:	2320      	movmi	r3, #32
 80038da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038de:	0713      	lsls	r3, r2, #28
 80038e0:	bf44      	itt	mi
 80038e2:	232b      	movmi	r3, #43	; 0x2b
 80038e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038e8:	f89a 3000 	ldrb.w	r3, [sl]
 80038ec:	2b2a      	cmp	r3, #42	; 0x2a
 80038ee:	d015      	beq.n	800391c <_vfiprintf_r+0x13c>
 80038f0:	9a07      	ldr	r2, [sp, #28]
 80038f2:	4654      	mov	r4, sl
 80038f4:	2000      	movs	r0, #0
 80038f6:	f04f 0c0a 	mov.w	ip, #10
 80038fa:	4621      	mov	r1, r4
 80038fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003900:	3b30      	subs	r3, #48	; 0x30
 8003902:	2b09      	cmp	r3, #9
 8003904:	d94e      	bls.n	80039a4 <_vfiprintf_r+0x1c4>
 8003906:	b1b0      	cbz	r0, 8003936 <_vfiprintf_r+0x156>
 8003908:	9207      	str	r2, [sp, #28]
 800390a:	e014      	b.n	8003936 <_vfiprintf_r+0x156>
 800390c:	eba0 0308 	sub.w	r3, r0, r8
 8003910:	fa09 f303 	lsl.w	r3, r9, r3
 8003914:	4313      	orrs	r3, r2
 8003916:	9304      	str	r3, [sp, #16]
 8003918:	46a2      	mov	sl, r4
 800391a:	e7d2      	b.n	80038c2 <_vfiprintf_r+0xe2>
 800391c:	9b03      	ldr	r3, [sp, #12]
 800391e:	1d19      	adds	r1, r3, #4
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	9103      	str	r1, [sp, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	bfbb      	ittet	lt
 8003928:	425b      	neglt	r3, r3
 800392a:	f042 0202 	orrlt.w	r2, r2, #2
 800392e:	9307      	strge	r3, [sp, #28]
 8003930:	9307      	strlt	r3, [sp, #28]
 8003932:	bfb8      	it	lt
 8003934:	9204      	strlt	r2, [sp, #16]
 8003936:	7823      	ldrb	r3, [r4, #0]
 8003938:	2b2e      	cmp	r3, #46	; 0x2e
 800393a:	d10c      	bne.n	8003956 <_vfiprintf_r+0x176>
 800393c:	7863      	ldrb	r3, [r4, #1]
 800393e:	2b2a      	cmp	r3, #42	; 0x2a
 8003940:	d135      	bne.n	80039ae <_vfiprintf_r+0x1ce>
 8003942:	9b03      	ldr	r3, [sp, #12]
 8003944:	1d1a      	adds	r2, r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	9203      	str	r2, [sp, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	bfb8      	it	lt
 800394e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003952:	3402      	adds	r4, #2
 8003954:	9305      	str	r3, [sp, #20]
 8003956:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003a3c <_vfiprintf_r+0x25c>
 800395a:	7821      	ldrb	r1, [r4, #0]
 800395c:	2203      	movs	r2, #3
 800395e:	4650      	mov	r0, sl
 8003960:	f7fc fc56 	bl	8000210 <memchr>
 8003964:	b140      	cbz	r0, 8003978 <_vfiprintf_r+0x198>
 8003966:	2340      	movs	r3, #64	; 0x40
 8003968:	eba0 000a 	sub.w	r0, r0, sl
 800396c:	fa03 f000 	lsl.w	r0, r3, r0
 8003970:	9b04      	ldr	r3, [sp, #16]
 8003972:	4303      	orrs	r3, r0
 8003974:	3401      	adds	r4, #1
 8003976:	9304      	str	r3, [sp, #16]
 8003978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800397c:	482c      	ldr	r0, [pc, #176]	; (8003a30 <_vfiprintf_r+0x250>)
 800397e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003982:	2206      	movs	r2, #6
 8003984:	f7fc fc44 	bl	8000210 <memchr>
 8003988:	2800      	cmp	r0, #0
 800398a:	d03f      	beq.n	8003a0c <_vfiprintf_r+0x22c>
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <_vfiprintf_r+0x254>)
 800398e:	bb1b      	cbnz	r3, 80039d8 <_vfiprintf_r+0x1f8>
 8003990:	9b03      	ldr	r3, [sp, #12]
 8003992:	3307      	adds	r3, #7
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	3308      	adds	r3, #8
 800399a:	9303      	str	r3, [sp, #12]
 800399c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800399e:	443b      	add	r3, r7
 80039a0:	9309      	str	r3, [sp, #36]	; 0x24
 80039a2:	e767      	b.n	8003874 <_vfiprintf_r+0x94>
 80039a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80039a8:	460c      	mov	r4, r1
 80039aa:	2001      	movs	r0, #1
 80039ac:	e7a5      	b.n	80038fa <_vfiprintf_r+0x11a>
 80039ae:	2300      	movs	r3, #0
 80039b0:	3401      	adds	r4, #1
 80039b2:	9305      	str	r3, [sp, #20]
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 0c0a 	mov.w	ip, #10
 80039ba:	4620      	mov	r0, r4
 80039bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039c0:	3a30      	subs	r2, #48	; 0x30
 80039c2:	2a09      	cmp	r2, #9
 80039c4:	d903      	bls.n	80039ce <_vfiprintf_r+0x1ee>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0c5      	beq.n	8003956 <_vfiprintf_r+0x176>
 80039ca:	9105      	str	r1, [sp, #20]
 80039cc:	e7c3      	b.n	8003956 <_vfiprintf_r+0x176>
 80039ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80039d2:	4604      	mov	r4, r0
 80039d4:	2301      	movs	r3, #1
 80039d6:	e7f0      	b.n	80039ba <_vfiprintf_r+0x1da>
 80039d8:	ab03      	add	r3, sp, #12
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	462a      	mov	r2, r5
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <_vfiprintf_r+0x258>)
 80039e0:	a904      	add	r1, sp, #16
 80039e2:	4630      	mov	r0, r6
 80039e4:	f3af 8000 	nop.w
 80039e8:	4607      	mov	r7, r0
 80039ea:	1c78      	adds	r0, r7, #1
 80039ec:	d1d6      	bne.n	800399c <_vfiprintf_r+0x1bc>
 80039ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039f0:	07d9      	lsls	r1, r3, #31
 80039f2:	d405      	bmi.n	8003a00 <_vfiprintf_r+0x220>
 80039f4:	89ab      	ldrh	r3, [r5, #12]
 80039f6:	059a      	lsls	r2, r3, #22
 80039f8:	d402      	bmi.n	8003a00 <_vfiprintf_r+0x220>
 80039fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039fc:	f7ff fe31 	bl	8003662 <__retarget_lock_release_recursive>
 8003a00:	89ab      	ldrh	r3, [r5, #12]
 8003a02:	065b      	lsls	r3, r3, #25
 8003a04:	f53f af12 	bmi.w	800382c <_vfiprintf_r+0x4c>
 8003a08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a0a:	e711      	b.n	8003830 <_vfiprintf_r+0x50>
 8003a0c:	ab03      	add	r3, sp, #12
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	462a      	mov	r2, r5
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <_vfiprintf_r+0x258>)
 8003a14:	a904      	add	r1, sp, #16
 8003a16:	4630      	mov	r0, r6
 8003a18:	f000 f880 	bl	8003b1c <_printf_i>
 8003a1c:	e7e4      	b.n	80039e8 <_vfiprintf_r+0x208>
 8003a1e:	bf00      	nop
 8003a20:	080044bc 	.word	0x080044bc
 8003a24:	080044dc 	.word	0x080044dc
 8003a28:	0800449c 	.word	0x0800449c
 8003a2c:	080044fc 	.word	0x080044fc
 8003a30:	08004506 	.word	0x08004506
 8003a34:	00000000 	.word	0x00000000
 8003a38:	080037bb 	.word	0x080037bb
 8003a3c:	08004502 	.word	0x08004502

08003a40 <_printf_common>:
 8003a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	4616      	mov	r6, r2
 8003a46:	4699      	mov	r9, r3
 8003a48:	688a      	ldr	r2, [r1, #8]
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bfb8      	it	lt
 8003a54:	4613      	movlt	r3, r2
 8003a56:	6033      	str	r3, [r6, #0]
 8003a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a5c:	4607      	mov	r7, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	b10a      	cbz	r2, 8003a66 <_printf_common+0x26>
 8003a62:	3301      	adds	r3, #1
 8003a64:	6033      	str	r3, [r6, #0]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	0699      	lsls	r1, r3, #26
 8003a6a:	bf42      	ittt	mi
 8003a6c:	6833      	ldrmi	r3, [r6, #0]
 8003a6e:	3302      	addmi	r3, #2
 8003a70:	6033      	strmi	r3, [r6, #0]
 8003a72:	6825      	ldr	r5, [r4, #0]
 8003a74:	f015 0506 	ands.w	r5, r5, #6
 8003a78:	d106      	bne.n	8003a88 <_printf_common+0x48>
 8003a7a:	f104 0a19 	add.w	sl, r4, #25
 8003a7e:	68e3      	ldr	r3, [r4, #12]
 8003a80:	6832      	ldr	r2, [r6, #0]
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	42ab      	cmp	r3, r5
 8003a86:	dc26      	bgt.n	8003ad6 <_printf_common+0x96>
 8003a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a8c:	1e13      	subs	r3, r2, #0
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	bf18      	it	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	0692      	lsls	r2, r2, #26
 8003a96:	d42b      	bmi.n	8003af0 <_printf_common+0xb0>
 8003a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	47c0      	blx	r8
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d01e      	beq.n	8003ae4 <_printf_common+0xa4>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	68e5      	ldr	r5, [r4, #12]
 8003aaa:	6832      	ldr	r2, [r6, #0]
 8003aac:	f003 0306 	and.w	r3, r3, #6
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	bf08      	it	eq
 8003ab4:	1aad      	subeq	r5, r5, r2
 8003ab6:	68a3      	ldr	r3, [r4, #8]
 8003ab8:	6922      	ldr	r2, [r4, #16]
 8003aba:	bf0c      	ite	eq
 8003abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ac0:	2500      	movne	r5, #0
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	bfc4      	itt	gt
 8003ac6:	1a9b      	subgt	r3, r3, r2
 8003ac8:	18ed      	addgt	r5, r5, r3
 8003aca:	2600      	movs	r6, #0
 8003acc:	341a      	adds	r4, #26
 8003ace:	42b5      	cmp	r5, r6
 8003ad0:	d11a      	bne.n	8003b08 <_printf_common+0xc8>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	e008      	b.n	8003ae8 <_printf_common+0xa8>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	4652      	mov	r2, sl
 8003ada:	4649      	mov	r1, r9
 8003adc:	4638      	mov	r0, r7
 8003ade:	47c0      	blx	r8
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d103      	bne.n	8003aec <_printf_common+0xac>
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aec:	3501      	adds	r5, #1
 8003aee:	e7c6      	b.n	8003a7e <_printf_common+0x3e>
 8003af0:	18e1      	adds	r1, r4, r3
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	2030      	movs	r0, #48	; 0x30
 8003af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003afa:	4422      	add	r2, r4
 8003afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b04:	3302      	adds	r3, #2
 8003b06:	e7c7      	b.n	8003a98 <_printf_common+0x58>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	4638      	mov	r0, r7
 8003b10:	47c0      	blx	r8
 8003b12:	3001      	adds	r0, #1
 8003b14:	d0e6      	beq.n	8003ae4 <_printf_common+0xa4>
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7d9      	b.n	8003ace <_printf_common+0x8e>
	...

08003b1c <_printf_i>:
 8003b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	7e0f      	ldrb	r7, [r1, #24]
 8003b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b24:	2f78      	cmp	r7, #120	; 0x78
 8003b26:	4691      	mov	r9, r2
 8003b28:	4680      	mov	r8, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	469a      	mov	sl, r3
 8003b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b32:	d807      	bhi.n	8003b44 <_printf_i+0x28>
 8003b34:	2f62      	cmp	r7, #98	; 0x62
 8003b36:	d80a      	bhi.n	8003b4e <_printf_i+0x32>
 8003b38:	2f00      	cmp	r7, #0
 8003b3a:	f000 80d8 	beq.w	8003cee <_printf_i+0x1d2>
 8003b3e:	2f58      	cmp	r7, #88	; 0x58
 8003b40:	f000 80a3 	beq.w	8003c8a <_printf_i+0x16e>
 8003b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b4c:	e03a      	b.n	8003bc4 <_printf_i+0xa8>
 8003b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b52:	2b15      	cmp	r3, #21
 8003b54:	d8f6      	bhi.n	8003b44 <_printf_i+0x28>
 8003b56:	a101      	add	r1, pc, #4	; (adr r1, 8003b5c <_printf_i+0x40>)
 8003b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b5c:	08003bb5 	.word	0x08003bb5
 8003b60:	08003bc9 	.word	0x08003bc9
 8003b64:	08003b45 	.word	0x08003b45
 8003b68:	08003b45 	.word	0x08003b45
 8003b6c:	08003b45 	.word	0x08003b45
 8003b70:	08003b45 	.word	0x08003b45
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003b45 	.word	0x08003b45
 8003b7c:	08003b45 	.word	0x08003b45
 8003b80:	08003b45 	.word	0x08003b45
 8003b84:	08003b45 	.word	0x08003b45
 8003b88:	08003cd5 	.word	0x08003cd5
 8003b8c:	08003bf9 	.word	0x08003bf9
 8003b90:	08003cb7 	.word	0x08003cb7
 8003b94:	08003b45 	.word	0x08003b45
 8003b98:	08003b45 	.word	0x08003b45
 8003b9c:	08003cf7 	.word	0x08003cf7
 8003ba0:	08003b45 	.word	0x08003b45
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003b45 	.word	0x08003b45
 8003bac:	08003b45 	.word	0x08003b45
 8003bb0:	08003cbf 	.word	0x08003cbf
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	602a      	str	r2, [r5, #0]
 8003bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0a3      	b.n	8003d10 <_printf_i+0x1f4>
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	6829      	ldr	r1, [r5, #0]
 8003bcc:	0606      	lsls	r6, r0, #24
 8003bce:	f101 0304 	add.w	r3, r1, #4
 8003bd2:	d50a      	bpl.n	8003bea <_printf_i+0xce>
 8003bd4:	680e      	ldr	r6, [r1, #0]
 8003bd6:	602b      	str	r3, [r5, #0]
 8003bd8:	2e00      	cmp	r6, #0
 8003bda:	da03      	bge.n	8003be4 <_printf_i+0xc8>
 8003bdc:	232d      	movs	r3, #45	; 0x2d
 8003bde:	4276      	negs	r6, r6
 8003be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be4:	485e      	ldr	r0, [pc, #376]	; (8003d60 <_printf_i+0x244>)
 8003be6:	230a      	movs	r3, #10
 8003be8:	e019      	b.n	8003c1e <_printf_i+0x102>
 8003bea:	680e      	ldr	r6, [r1, #0]
 8003bec:	602b      	str	r3, [r5, #0]
 8003bee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bf2:	bf18      	it	ne
 8003bf4:	b236      	sxthne	r6, r6
 8003bf6:	e7ef      	b.n	8003bd8 <_printf_i+0xbc>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	6820      	ldr	r0, [r4, #0]
 8003bfc:	1d19      	adds	r1, r3, #4
 8003bfe:	6029      	str	r1, [r5, #0]
 8003c00:	0601      	lsls	r1, r0, #24
 8003c02:	d501      	bpl.n	8003c08 <_printf_i+0xec>
 8003c04:	681e      	ldr	r6, [r3, #0]
 8003c06:	e002      	b.n	8003c0e <_printf_i+0xf2>
 8003c08:	0646      	lsls	r6, r0, #25
 8003c0a:	d5fb      	bpl.n	8003c04 <_printf_i+0xe8>
 8003c0c:	881e      	ldrh	r6, [r3, #0]
 8003c0e:	4854      	ldr	r0, [pc, #336]	; (8003d60 <_printf_i+0x244>)
 8003c10:	2f6f      	cmp	r7, #111	; 0x6f
 8003c12:	bf0c      	ite	eq
 8003c14:	2308      	moveq	r3, #8
 8003c16:	230a      	movne	r3, #10
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c1e:	6865      	ldr	r5, [r4, #4]
 8003c20:	60a5      	str	r5, [r4, #8]
 8003c22:	2d00      	cmp	r5, #0
 8003c24:	bfa2      	ittt	ge
 8003c26:	6821      	ldrge	r1, [r4, #0]
 8003c28:	f021 0104 	bicge.w	r1, r1, #4
 8003c2c:	6021      	strge	r1, [r4, #0]
 8003c2e:	b90e      	cbnz	r6, 8003c34 <_printf_i+0x118>
 8003c30:	2d00      	cmp	r5, #0
 8003c32:	d04d      	beq.n	8003cd0 <_printf_i+0x1b4>
 8003c34:	4615      	mov	r5, r2
 8003c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8003c3e:	5dc7      	ldrb	r7, [r0, r7]
 8003c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c44:	4637      	mov	r7, r6
 8003c46:	42bb      	cmp	r3, r7
 8003c48:	460e      	mov	r6, r1
 8003c4a:	d9f4      	bls.n	8003c36 <_printf_i+0x11a>
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d10b      	bne.n	8003c68 <_printf_i+0x14c>
 8003c50:	6823      	ldr	r3, [r4, #0]
 8003c52:	07de      	lsls	r6, r3, #31
 8003c54:	d508      	bpl.n	8003c68 <_printf_i+0x14c>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	6861      	ldr	r1, [r4, #4]
 8003c5a:	4299      	cmp	r1, r3
 8003c5c:	bfde      	ittt	le
 8003c5e:	2330      	movle	r3, #48	; 0x30
 8003c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003c68:	1b52      	subs	r2, r2, r5
 8003c6a:	6122      	str	r2, [r4, #16]
 8003c6c:	f8cd a000 	str.w	sl, [sp]
 8003c70:	464b      	mov	r3, r9
 8003c72:	aa03      	add	r2, sp, #12
 8003c74:	4621      	mov	r1, r4
 8003c76:	4640      	mov	r0, r8
 8003c78:	f7ff fee2 	bl	8003a40 <_printf_common>
 8003c7c:	3001      	adds	r0, #1
 8003c7e:	d14c      	bne.n	8003d1a <_printf_i+0x1fe>
 8003c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c84:	b004      	add	sp, #16
 8003c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8a:	4835      	ldr	r0, [pc, #212]	; (8003d60 <_printf_i+0x244>)
 8003c8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c90:	6829      	ldr	r1, [r5, #0]
 8003c92:	6823      	ldr	r3, [r4, #0]
 8003c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c98:	6029      	str	r1, [r5, #0]
 8003c9a:	061d      	lsls	r5, r3, #24
 8003c9c:	d514      	bpl.n	8003cc8 <_printf_i+0x1ac>
 8003c9e:	07df      	lsls	r7, r3, #31
 8003ca0:	bf44      	itt	mi
 8003ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ca6:	6023      	strmi	r3, [r4, #0]
 8003ca8:	b91e      	cbnz	r6, 8003cb2 <_printf_i+0x196>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	f023 0320 	bic.w	r3, r3, #32
 8003cb0:	6023      	str	r3, [r4, #0]
 8003cb2:	2310      	movs	r3, #16
 8003cb4:	e7b0      	b.n	8003c18 <_printf_i+0xfc>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	f043 0320 	orr.w	r3, r3, #32
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	2378      	movs	r3, #120	; 0x78
 8003cc0:	4828      	ldr	r0, [pc, #160]	; (8003d64 <_printf_i+0x248>)
 8003cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cc6:	e7e3      	b.n	8003c90 <_printf_i+0x174>
 8003cc8:	0659      	lsls	r1, r3, #25
 8003cca:	bf48      	it	mi
 8003ccc:	b2b6      	uxthmi	r6, r6
 8003cce:	e7e6      	b.n	8003c9e <_printf_i+0x182>
 8003cd0:	4615      	mov	r5, r2
 8003cd2:	e7bb      	b.n	8003c4c <_printf_i+0x130>
 8003cd4:	682b      	ldr	r3, [r5, #0]
 8003cd6:	6826      	ldr	r6, [r4, #0]
 8003cd8:	6961      	ldr	r1, [r4, #20]
 8003cda:	1d18      	adds	r0, r3, #4
 8003cdc:	6028      	str	r0, [r5, #0]
 8003cde:	0635      	lsls	r5, r6, #24
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_i+0x1cc>
 8003ce4:	6019      	str	r1, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <_printf_i+0x1d2>
 8003ce8:	0670      	lsls	r0, r6, #25
 8003cea:	d5fb      	bpl.n	8003ce4 <_printf_i+0x1c8>
 8003cec:	8019      	strh	r1, [r3, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	6123      	str	r3, [r4, #16]
 8003cf2:	4615      	mov	r5, r2
 8003cf4:	e7ba      	b.n	8003c6c <_printf_i+0x150>
 8003cf6:	682b      	ldr	r3, [r5, #0]
 8003cf8:	1d1a      	adds	r2, r3, #4
 8003cfa:	602a      	str	r2, [r5, #0]
 8003cfc:	681d      	ldr	r5, [r3, #0]
 8003cfe:	6862      	ldr	r2, [r4, #4]
 8003d00:	2100      	movs	r1, #0
 8003d02:	4628      	mov	r0, r5
 8003d04:	f7fc fa84 	bl	8000210 <memchr>
 8003d08:	b108      	cbz	r0, 8003d0e <_printf_i+0x1f2>
 8003d0a:	1b40      	subs	r0, r0, r5
 8003d0c:	6060      	str	r0, [r4, #4]
 8003d0e:	6863      	ldr	r3, [r4, #4]
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	2300      	movs	r3, #0
 8003d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d18:	e7a8      	b.n	8003c6c <_printf_i+0x150>
 8003d1a:	6923      	ldr	r3, [r4, #16]
 8003d1c:	462a      	mov	r2, r5
 8003d1e:	4649      	mov	r1, r9
 8003d20:	4640      	mov	r0, r8
 8003d22:	47d0      	blx	sl
 8003d24:	3001      	adds	r0, #1
 8003d26:	d0ab      	beq.n	8003c80 <_printf_i+0x164>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	079b      	lsls	r3, r3, #30
 8003d2c:	d413      	bmi.n	8003d56 <_printf_i+0x23a>
 8003d2e:	68e0      	ldr	r0, [r4, #12]
 8003d30:	9b03      	ldr	r3, [sp, #12]
 8003d32:	4298      	cmp	r0, r3
 8003d34:	bfb8      	it	lt
 8003d36:	4618      	movlt	r0, r3
 8003d38:	e7a4      	b.n	8003c84 <_printf_i+0x168>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	4649      	mov	r1, r9
 8003d40:	4640      	mov	r0, r8
 8003d42:	47d0      	blx	sl
 8003d44:	3001      	adds	r0, #1
 8003d46:	d09b      	beq.n	8003c80 <_printf_i+0x164>
 8003d48:	3501      	adds	r5, #1
 8003d4a:	68e3      	ldr	r3, [r4, #12]
 8003d4c:	9903      	ldr	r1, [sp, #12]
 8003d4e:	1a5b      	subs	r3, r3, r1
 8003d50:	42ab      	cmp	r3, r5
 8003d52:	dcf2      	bgt.n	8003d3a <_printf_i+0x21e>
 8003d54:	e7eb      	b.n	8003d2e <_printf_i+0x212>
 8003d56:	2500      	movs	r5, #0
 8003d58:	f104 0619 	add.w	r6, r4, #25
 8003d5c:	e7f5      	b.n	8003d4a <_printf_i+0x22e>
 8003d5e:	bf00      	nop
 8003d60:	0800450d 	.word	0x0800450d
 8003d64:	0800451e 	.word	0x0800451e

08003d68 <_putc_r>:
 8003d68:	b570      	push	{r4, r5, r6, lr}
 8003d6a:	460d      	mov	r5, r1
 8003d6c:	4614      	mov	r4, r2
 8003d6e:	4606      	mov	r6, r0
 8003d70:	b118      	cbz	r0, 8003d7a <_putc_r+0x12>
 8003d72:	6983      	ldr	r3, [r0, #24]
 8003d74:	b90b      	cbnz	r3, 8003d7a <_putc_r+0x12>
 8003d76:	f7ff fbd5 	bl	8003524 <__sinit>
 8003d7a:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <_putc_r+0x84>)
 8003d7c:	429c      	cmp	r4, r3
 8003d7e:	d124      	bne.n	8003dca <_putc_r+0x62>
 8003d80:	6874      	ldr	r4, [r6, #4]
 8003d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d84:	07d8      	lsls	r0, r3, #31
 8003d86:	d405      	bmi.n	8003d94 <_putc_r+0x2c>
 8003d88:	89a3      	ldrh	r3, [r4, #12]
 8003d8a:	0599      	lsls	r1, r3, #22
 8003d8c:	d402      	bmi.n	8003d94 <_putc_r+0x2c>
 8003d8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d90:	f7ff fc66 	bl	8003660 <__retarget_lock_acquire_recursive>
 8003d94:	68a3      	ldr	r3, [r4, #8]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	60a3      	str	r3, [r4, #8]
 8003d9c:	da05      	bge.n	8003daa <_putc_r+0x42>
 8003d9e:	69a2      	ldr	r2, [r4, #24]
 8003da0:	4293      	cmp	r3, r2
 8003da2:	db1c      	blt.n	8003dde <_putc_r+0x76>
 8003da4:	b2eb      	uxtb	r3, r5
 8003da6:	2b0a      	cmp	r3, #10
 8003da8:	d019      	beq.n	8003dde <_putc_r+0x76>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	6022      	str	r2, [r4, #0]
 8003db0:	701d      	strb	r5, [r3, #0]
 8003db2:	b2ed      	uxtb	r5, r5
 8003db4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003db6:	07da      	lsls	r2, r3, #31
 8003db8:	d405      	bmi.n	8003dc6 <_putc_r+0x5e>
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	059b      	lsls	r3, r3, #22
 8003dbe:	d402      	bmi.n	8003dc6 <_putc_r+0x5e>
 8003dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dc2:	f7ff fc4e 	bl	8003662 <__retarget_lock_release_recursive>
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	bd70      	pop	{r4, r5, r6, pc}
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <_putc_r+0x88>)
 8003dcc:	429c      	cmp	r4, r3
 8003dce:	d101      	bne.n	8003dd4 <_putc_r+0x6c>
 8003dd0:	68b4      	ldr	r4, [r6, #8]
 8003dd2:	e7d6      	b.n	8003d82 <_putc_r+0x1a>
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <_putc_r+0x8c>)
 8003dd6:	429c      	cmp	r4, r3
 8003dd8:	bf08      	it	eq
 8003dda:	68f4      	ldreq	r4, [r6, #12]
 8003ddc:	e7d1      	b.n	8003d82 <_putc_r+0x1a>
 8003dde:	4629      	mov	r1, r5
 8003de0:	4622      	mov	r2, r4
 8003de2:	4630      	mov	r0, r6
 8003de4:	f000 f85c 	bl	8003ea0 <__swbuf_r>
 8003de8:	4605      	mov	r5, r0
 8003dea:	e7e3      	b.n	8003db4 <_putc_r+0x4c>
 8003dec:	080044bc 	.word	0x080044bc
 8003df0:	080044dc 	.word	0x080044dc
 8003df4:	0800449c 	.word	0x0800449c

08003df8 <_sbrk_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4d06      	ldr	r5, [pc, #24]	; (8003e14 <_sbrk_r+0x1c>)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	602b      	str	r3, [r5, #0]
 8003e04:	f7fd f81c 	bl	8000e40 <_sbrk>
 8003e08:	1c43      	adds	r3, r0, #1
 8003e0a:	d102      	bne.n	8003e12 <_sbrk_r+0x1a>
 8003e0c:	682b      	ldr	r3, [r5, #0]
 8003e0e:	b103      	cbz	r3, 8003e12 <_sbrk_r+0x1a>
 8003e10:	6023      	str	r3, [r4, #0]
 8003e12:	bd38      	pop	{r3, r4, r5, pc}
 8003e14:	20000134 	.word	0x20000134

08003e18 <__sread>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	460c      	mov	r4, r1
 8003e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e20:	f000 fab2 	bl	8004388 <_read_r>
 8003e24:	2800      	cmp	r0, #0
 8003e26:	bfab      	itete	ge
 8003e28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e2c:	181b      	addge	r3, r3, r0
 8003e2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e32:	bfac      	ite	ge
 8003e34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e36:	81a3      	strhlt	r3, [r4, #12]
 8003e38:	bd10      	pop	{r4, pc}

08003e3a <__swrite>:
 8003e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3e:	461f      	mov	r7, r3
 8003e40:	898b      	ldrh	r3, [r1, #12]
 8003e42:	05db      	lsls	r3, r3, #23
 8003e44:	4605      	mov	r5, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	4616      	mov	r6, r2
 8003e4a:	d505      	bpl.n	8003e58 <__swrite+0x1e>
 8003e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e50:	2302      	movs	r3, #2
 8003e52:	2200      	movs	r2, #0
 8003e54:	f000 f9c8 	bl	80041e8 <_lseek_r>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	4632      	mov	r2, r6
 8003e66:	463b      	mov	r3, r7
 8003e68:	4628      	mov	r0, r5
 8003e6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e6e:	f000 b869 	b.w	8003f44 <_write_r>

08003e72 <__sseek>:
 8003e72:	b510      	push	{r4, lr}
 8003e74:	460c      	mov	r4, r1
 8003e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7a:	f000 f9b5 	bl	80041e8 <_lseek_r>
 8003e7e:	1c43      	adds	r3, r0, #1
 8003e80:	89a3      	ldrh	r3, [r4, #12]
 8003e82:	bf15      	itete	ne
 8003e84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e8e:	81a3      	strheq	r3, [r4, #12]
 8003e90:	bf18      	it	ne
 8003e92:	81a3      	strhne	r3, [r4, #12]
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <__sclose>:
 8003e96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9a:	f000 b8d3 	b.w	8004044 <_close_r>
	...

08003ea0 <__swbuf_r>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	460e      	mov	r6, r1
 8003ea4:	4614      	mov	r4, r2
 8003ea6:	4605      	mov	r5, r0
 8003ea8:	b118      	cbz	r0, 8003eb2 <__swbuf_r+0x12>
 8003eaa:	6983      	ldr	r3, [r0, #24]
 8003eac:	b90b      	cbnz	r3, 8003eb2 <__swbuf_r+0x12>
 8003eae:	f7ff fb39 	bl	8003524 <__sinit>
 8003eb2:	4b21      	ldr	r3, [pc, #132]	; (8003f38 <__swbuf_r+0x98>)
 8003eb4:	429c      	cmp	r4, r3
 8003eb6:	d12b      	bne.n	8003f10 <__swbuf_r+0x70>
 8003eb8:	686c      	ldr	r4, [r5, #4]
 8003eba:	69a3      	ldr	r3, [r4, #24]
 8003ebc:	60a3      	str	r3, [r4, #8]
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	071a      	lsls	r2, r3, #28
 8003ec2:	d52f      	bpl.n	8003f24 <__swbuf_r+0x84>
 8003ec4:	6923      	ldr	r3, [r4, #16]
 8003ec6:	b36b      	cbz	r3, 8003f24 <__swbuf_r+0x84>
 8003ec8:	6923      	ldr	r3, [r4, #16]
 8003eca:	6820      	ldr	r0, [r4, #0]
 8003ecc:	1ac0      	subs	r0, r0, r3
 8003ece:	6963      	ldr	r3, [r4, #20]
 8003ed0:	b2f6      	uxtb	r6, r6
 8003ed2:	4283      	cmp	r3, r0
 8003ed4:	4637      	mov	r7, r6
 8003ed6:	dc04      	bgt.n	8003ee2 <__swbuf_r+0x42>
 8003ed8:	4621      	mov	r1, r4
 8003eda:	4628      	mov	r0, r5
 8003edc:	f000 f948 	bl	8004170 <_fflush_r>
 8003ee0:	bb30      	cbnz	r0, 8003f30 <__swbuf_r+0x90>
 8003ee2:	68a3      	ldr	r3, [r4, #8]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60a3      	str	r3, [r4, #8]
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	6022      	str	r2, [r4, #0]
 8003eee:	701e      	strb	r6, [r3, #0]
 8003ef0:	6963      	ldr	r3, [r4, #20]
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	4283      	cmp	r3, r0
 8003ef6:	d004      	beq.n	8003f02 <__swbuf_r+0x62>
 8003ef8:	89a3      	ldrh	r3, [r4, #12]
 8003efa:	07db      	lsls	r3, r3, #31
 8003efc:	d506      	bpl.n	8003f0c <__swbuf_r+0x6c>
 8003efe:	2e0a      	cmp	r6, #10
 8003f00:	d104      	bne.n	8003f0c <__swbuf_r+0x6c>
 8003f02:	4621      	mov	r1, r4
 8003f04:	4628      	mov	r0, r5
 8003f06:	f000 f933 	bl	8004170 <_fflush_r>
 8003f0a:	b988      	cbnz	r0, 8003f30 <__swbuf_r+0x90>
 8003f0c:	4638      	mov	r0, r7
 8003f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <__swbuf_r+0x9c>)
 8003f12:	429c      	cmp	r4, r3
 8003f14:	d101      	bne.n	8003f1a <__swbuf_r+0x7a>
 8003f16:	68ac      	ldr	r4, [r5, #8]
 8003f18:	e7cf      	b.n	8003eba <__swbuf_r+0x1a>
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <__swbuf_r+0xa0>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	bf08      	it	eq
 8003f20:	68ec      	ldreq	r4, [r5, #12]
 8003f22:	e7ca      	b.n	8003eba <__swbuf_r+0x1a>
 8003f24:	4621      	mov	r1, r4
 8003f26:	4628      	mov	r0, r5
 8003f28:	f000 f81e 	bl	8003f68 <__swsetup_r>
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	d0cb      	beq.n	8003ec8 <__swbuf_r+0x28>
 8003f30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f34:	e7ea      	b.n	8003f0c <__swbuf_r+0x6c>
 8003f36:	bf00      	nop
 8003f38:	080044bc 	.word	0x080044bc
 8003f3c:	080044dc 	.word	0x080044dc
 8003f40:	0800449c 	.word	0x0800449c

08003f44 <_write_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d07      	ldr	r5, [pc, #28]	; (8003f64 <_write_r+0x20>)
 8003f48:	4604      	mov	r4, r0
 8003f4a:	4608      	mov	r0, r1
 8003f4c:	4611      	mov	r1, r2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	602a      	str	r2, [r5, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	f7fc ff23 	bl	8000d9e <_write>
 8003f58:	1c43      	adds	r3, r0, #1
 8003f5a:	d102      	bne.n	8003f62 <_write_r+0x1e>
 8003f5c:	682b      	ldr	r3, [r5, #0]
 8003f5e:	b103      	cbz	r3, 8003f62 <_write_r+0x1e>
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
 8003f64:	20000134 	.word	0x20000134

08003f68 <__swsetup_r>:
 8003f68:	4b32      	ldr	r3, [pc, #200]	; (8004034 <__swsetup_r+0xcc>)
 8003f6a:	b570      	push	{r4, r5, r6, lr}
 8003f6c:	681d      	ldr	r5, [r3, #0]
 8003f6e:	4606      	mov	r6, r0
 8003f70:	460c      	mov	r4, r1
 8003f72:	b125      	cbz	r5, 8003f7e <__swsetup_r+0x16>
 8003f74:	69ab      	ldr	r3, [r5, #24]
 8003f76:	b913      	cbnz	r3, 8003f7e <__swsetup_r+0x16>
 8003f78:	4628      	mov	r0, r5
 8003f7a:	f7ff fad3 	bl	8003524 <__sinit>
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <__swsetup_r+0xd0>)
 8003f80:	429c      	cmp	r4, r3
 8003f82:	d10f      	bne.n	8003fa4 <__swsetup_r+0x3c>
 8003f84:	686c      	ldr	r4, [r5, #4]
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f8c:	0719      	lsls	r1, r3, #28
 8003f8e:	d42c      	bmi.n	8003fea <__swsetup_r+0x82>
 8003f90:	06dd      	lsls	r5, r3, #27
 8003f92:	d411      	bmi.n	8003fb8 <__swsetup_r+0x50>
 8003f94:	2309      	movs	r3, #9
 8003f96:	6033      	str	r3, [r6, #0]
 8003f98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f9c:	81a3      	strh	r3, [r4, #12]
 8003f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa2:	e03e      	b.n	8004022 <__swsetup_r+0xba>
 8003fa4:	4b25      	ldr	r3, [pc, #148]	; (800403c <__swsetup_r+0xd4>)
 8003fa6:	429c      	cmp	r4, r3
 8003fa8:	d101      	bne.n	8003fae <__swsetup_r+0x46>
 8003faa:	68ac      	ldr	r4, [r5, #8]
 8003fac:	e7eb      	b.n	8003f86 <__swsetup_r+0x1e>
 8003fae:	4b24      	ldr	r3, [pc, #144]	; (8004040 <__swsetup_r+0xd8>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	bf08      	it	eq
 8003fb4:	68ec      	ldreq	r4, [r5, #12]
 8003fb6:	e7e6      	b.n	8003f86 <__swsetup_r+0x1e>
 8003fb8:	0758      	lsls	r0, r3, #29
 8003fba:	d512      	bpl.n	8003fe2 <__swsetup_r+0x7a>
 8003fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fbe:	b141      	cbz	r1, 8003fd2 <__swsetup_r+0x6a>
 8003fc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	d002      	beq.n	8003fce <__swsetup_r+0x66>
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f000 f991 	bl	80042f0 <_free_r>
 8003fce:	2300      	movs	r3, #0
 8003fd0:	6363      	str	r3, [r4, #52]	; 0x34
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fd8:	81a3      	strh	r3, [r4, #12]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	6063      	str	r3, [r4, #4]
 8003fde:	6923      	ldr	r3, [r4, #16]
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	f043 0308 	orr.w	r3, r3, #8
 8003fe8:	81a3      	strh	r3, [r4, #12]
 8003fea:	6923      	ldr	r3, [r4, #16]
 8003fec:	b94b      	cbnz	r3, 8004002 <__swsetup_r+0x9a>
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff8:	d003      	beq.n	8004002 <__swsetup_r+0x9a>
 8003ffa:	4621      	mov	r1, r4
 8003ffc:	4630      	mov	r0, r6
 8003ffe:	f000 f92b 	bl	8004258 <__smakebuf_r>
 8004002:	89a0      	ldrh	r0, [r4, #12]
 8004004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004008:	f010 0301 	ands.w	r3, r0, #1
 800400c:	d00a      	beq.n	8004024 <__swsetup_r+0xbc>
 800400e:	2300      	movs	r3, #0
 8004010:	60a3      	str	r3, [r4, #8]
 8004012:	6963      	ldr	r3, [r4, #20]
 8004014:	425b      	negs	r3, r3
 8004016:	61a3      	str	r3, [r4, #24]
 8004018:	6923      	ldr	r3, [r4, #16]
 800401a:	b943      	cbnz	r3, 800402e <__swsetup_r+0xc6>
 800401c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004020:	d1ba      	bne.n	8003f98 <__swsetup_r+0x30>
 8004022:	bd70      	pop	{r4, r5, r6, pc}
 8004024:	0781      	lsls	r1, r0, #30
 8004026:	bf58      	it	pl
 8004028:	6963      	ldrpl	r3, [r4, #20]
 800402a:	60a3      	str	r3, [r4, #8]
 800402c:	e7f4      	b.n	8004018 <__swsetup_r+0xb0>
 800402e:	2000      	movs	r0, #0
 8004030:	e7f7      	b.n	8004022 <__swsetup_r+0xba>
 8004032:	bf00      	nop
 8004034:	2000000c 	.word	0x2000000c
 8004038:	080044bc 	.word	0x080044bc
 800403c:	080044dc 	.word	0x080044dc
 8004040:	0800449c 	.word	0x0800449c

08004044 <_close_r>:
 8004044:	b538      	push	{r3, r4, r5, lr}
 8004046:	4d06      	ldr	r5, [pc, #24]	; (8004060 <_close_r+0x1c>)
 8004048:	2300      	movs	r3, #0
 800404a:	4604      	mov	r4, r0
 800404c:	4608      	mov	r0, r1
 800404e:	602b      	str	r3, [r5, #0]
 8004050:	f7fc fec1 	bl	8000dd6 <_close>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d102      	bne.n	800405e <_close_r+0x1a>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	b103      	cbz	r3, 800405e <_close_r+0x1a>
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	20000134 	.word	0x20000134

08004064 <__sflush_r>:
 8004064:	898a      	ldrh	r2, [r1, #12]
 8004066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800406a:	4605      	mov	r5, r0
 800406c:	0710      	lsls	r0, r2, #28
 800406e:	460c      	mov	r4, r1
 8004070:	d458      	bmi.n	8004124 <__sflush_r+0xc0>
 8004072:	684b      	ldr	r3, [r1, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	dc05      	bgt.n	8004084 <__sflush_r+0x20>
 8004078:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	dc02      	bgt.n	8004084 <__sflush_r+0x20>
 800407e:	2000      	movs	r0, #0
 8004080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004086:	2e00      	cmp	r6, #0
 8004088:	d0f9      	beq.n	800407e <__sflush_r+0x1a>
 800408a:	2300      	movs	r3, #0
 800408c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004090:	682f      	ldr	r7, [r5, #0]
 8004092:	602b      	str	r3, [r5, #0]
 8004094:	d032      	beq.n	80040fc <__sflush_r+0x98>
 8004096:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004098:	89a3      	ldrh	r3, [r4, #12]
 800409a:	075a      	lsls	r2, r3, #29
 800409c:	d505      	bpl.n	80040aa <__sflush_r+0x46>
 800409e:	6863      	ldr	r3, [r4, #4]
 80040a0:	1ac0      	subs	r0, r0, r3
 80040a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80040a4:	b10b      	cbz	r3, 80040aa <__sflush_r+0x46>
 80040a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a8:	1ac0      	subs	r0, r0, r3
 80040aa:	2300      	movs	r3, #0
 80040ac:	4602      	mov	r2, r0
 80040ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040b0:	6a21      	ldr	r1, [r4, #32]
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b0      	blx	r6
 80040b6:	1c43      	adds	r3, r0, #1
 80040b8:	89a3      	ldrh	r3, [r4, #12]
 80040ba:	d106      	bne.n	80040ca <__sflush_r+0x66>
 80040bc:	6829      	ldr	r1, [r5, #0]
 80040be:	291d      	cmp	r1, #29
 80040c0:	d82c      	bhi.n	800411c <__sflush_r+0xb8>
 80040c2:	4a2a      	ldr	r2, [pc, #168]	; (800416c <__sflush_r+0x108>)
 80040c4:	40ca      	lsrs	r2, r1
 80040c6:	07d6      	lsls	r6, r2, #31
 80040c8:	d528      	bpl.n	800411c <__sflush_r+0xb8>
 80040ca:	2200      	movs	r2, #0
 80040cc:	6062      	str	r2, [r4, #4]
 80040ce:	04d9      	lsls	r1, r3, #19
 80040d0:	6922      	ldr	r2, [r4, #16]
 80040d2:	6022      	str	r2, [r4, #0]
 80040d4:	d504      	bpl.n	80040e0 <__sflush_r+0x7c>
 80040d6:	1c42      	adds	r2, r0, #1
 80040d8:	d101      	bne.n	80040de <__sflush_r+0x7a>
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	b903      	cbnz	r3, 80040e0 <__sflush_r+0x7c>
 80040de:	6560      	str	r0, [r4, #84]	; 0x54
 80040e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040e2:	602f      	str	r7, [r5, #0]
 80040e4:	2900      	cmp	r1, #0
 80040e6:	d0ca      	beq.n	800407e <__sflush_r+0x1a>
 80040e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040ec:	4299      	cmp	r1, r3
 80040ee:	d002      	beq.n	80040f6 <__sflush_r+0x92>
 80040f0:	4628      	mov	r0, r5
 80040f2:	f000 f8fd 	bl	80042f0 <_free_r>
 80040f6:	2000      	movs	r0, #0
 80040f8:	6360      	str	r0, [r4, #52]	; 0x34
 80040fa:	e7c1      	b.n	8004080 <__sflush_r+0x1c>
 80040fc:	6a21      	ldr	r1, [r4, #32]
 80040fe:	2301      	movs	r3, #1
 8004100:	4628      	mov	r0, r5
 8004102:	47b0      	blx	r6
 8004104:	1c41      	adds	r1, r0, #1
 8004106:	d1c7      	bne.n	8004098 <__sflush_r+0x34>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0c4      	beq.n	8004098 <__sflush_r+0x34>
 800410e:	2b1d      	cmp	r3, #29
 8004110:	d001      	beq.n	8004116 <__sflush_r+0xb2>
 8004112:	2b16      	cmp	r3, #22
 8004114:	d101      	bne.n	800411a <__sflush_r+0xb6>
 8004116:	602f      	str	r7, [r5, #0]
 8004118:	e7b1      	b.n	800407e <__sflush_r+0x1a>
 800411a:	89a3      	ldrh	r3, [r4, #12]
 800411c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004120:	81a3      	strh	r3, [r4, #12]
 8004122:	e7ad      	b.n	8004080 <__sflush_r+0x1c>
 8004124:	690f      	ldr	r7, [r1, #16]
 8004126:	2f00      	cmp	r7, #0
 8004128:	d0a9      	beq.n	800407e <__sflush_r+0x1a>
 800412a:	0793      	lsls	r3, r2, #30
 800412c:	680e      	ldr	r6, [r1, #0]
 800412e:	bf08      	it	eq
 8004130:	694b      	ldreq	r3, [r1, #20]
 8004132:	600f      	str	r7, [r1, #0]
 8004134:	bf18      	it	ne
 8004136:	2300      	movne	r3, #0
 8004138:	eba6 0807 	sub.w	r8, r6, r7
 800413c:	608b      	str	r3, [r1, #8]
 800413e:	f1b8 0f00 	cmp.w	r8, #0
 8004142:	dd9c      	ble.n	800407e <__sflush_r+0x1a>
 8004144:	6a21      	ldr	r1, [r4, #32]
 8004146:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004148:	4643      	mov	r3, r8
 800414a:	463a      	mov	r2, r7
 800414c:	4628      	mov	r0, r5
 800414e:	47b0      	blx	r6
 8004150:	2800      	cmp	r0, #0
 8004152:	dc06      	bgt.n	8004162 <__sflush_r+0xfe>
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004160:	e78e      	b.n	8004080 <__sflush_r+0x1c>
 8004162:	4407      	add	r7, r0
 8004164:	eba8 0800 	sub.w	r8, r8, r0
 8004168:	e7e9      	b.n	800413e <__sflush_r+0xda>
 800416a:	bf00      	nop
 800416c:	20400001 	.word	0x20400001

08004170 <_fflush_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	690b      	ldr	r3, [r1, #16]
 8004174:	4605      	mov	r5, r0
 8004176:	460c      	mov	r4, r1
 8004178:	b913      	cbnz	r3, 8004180 <_fflush_r+0x10>
 800417a:	2500      	movs	r5, #0
 800417c:	4628      	mov	r0, r5
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	b118      	cbz	r0, 800418a <_fflush_r+0x1a>
 8004182:	6983      	ldr	r3, [r0, #24]
 8004184:	b90b      	cbnz	r3, 800418a <_fflush_r+0x1a>
 8004186:	f7ff f9cd 	bl	8003524 <__sinit>
 800418a:	4b14      	ldr	r3, [pc, #80]	; (80041dc <_fflush_r+0x6c>)
 800418c:	429c      	cmp	r4, r3
 800418e:	d11b      	bne.n	80041c8 <_fflush_r+0x58>
 8004190:	686c      	ldr	r4, [r5, #4]
 8004192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ef      	beq.n	800417a <_fflush_r+0xa>
 800419a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800419c:	07d0      	lsls	r0, r2, #31
 800419e:	d404      	bmi.n	80041aa <_fflush_r+0x3a>
 80041a0:	0599      	lsls	r1, r3, #22
 80041a2:	d402      	bmi.n	80041aa <_fflush_r+0x3a>
 80041a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041a6:	f7ff fa5b 	bl	8003660 <__retarget_lock_acquire_recursive>
 80041aa:	4628      	mov	r0, r5
 80041ac:	4621      	mov	r1, r4
 80041ae:	f7ff ff59 	bl	8004064 <__sflush_r>
 80041b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80041b4:	07da      	lsls	r2, r3, #31
 80041b6:	4605      	mov	r5, r0
 80041b8:	d4e0      	bmi.n	800417c <_fflush_r+0xc>
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	059b      	lsls	r3, r3, #22
 80041be:	d4dd      	bmi.n	800417c <_fflush_r+0xc>
 80041c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80041c2:	f7ff fa4e 	bl	8003662 <__retarget_lock_release_recursive>
 80041c6:	e7d9      	b.n	800417c <_fflush_r+0xc>
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <_fflush_r+0x70>)
 80041ca:	429c      	cmp	r4, r3
 80041cc:	d101      	bne.n	80041d2 <_fflush_r+0x62>
 80041ce:	68ac      	ldr	r4, [r5, #8]
 80041d0:	e7df      	b.n	8004192 <_fflush_r+0x22>
 80041d2:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <_fflush_r+0x74>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	bf08      	it	eq
 80041d8:	68ec      	ldreq	r4, [r5, #12]
 80041da:	e7da      	b.n	8004192 <_fflush_r+0x22>
 80041dc:	080044bc 	.word	0x080044bc
 80041e0:	080044dc 	.word	0x080044dc
 80041e4:	0800449c 	.word	0x0800449c

080041e8 <_lseek_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d07      	ldr	r5, [pc, #28]	; (8004208 <_lseek_r+0x20>)
 80041ec:	4604      	mov	r4, r0
 80041ee:	4608      	mov	r0, r1
 80041f0:	4611      	mov	r1, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	602a      	str	r2, [r5, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fc fe14 	bl	8000e24 <_lseek>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_lseek_r+0x1e>
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	b103      	cbz	r3, 8004206 <_lseek_r+0x1e>
 8004204:	6023      	str	r3, [r4, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	20000134 	.word	0x20000134

0800420c <__swhatbuf_r>:
 800420c:	b570      	push	{r4, r5, r6, lr}
 800420e:	460e      	mov	r6, r1
 8004210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004214:	2900      	cmp	r1, #0
 8004216:	b096      	sub	sp, #88	; 0x58
 8004218:	4614      	mov	r4, r2
 800421a:	461d      	mov	r5, r3
 800421c:	da08      	bge.n	8004230 <__swhatbuf_r+0x24>
 800421e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	602a      	str	r2, [r5, #0]
 8004226:	061a      	lsls	r2, r3, #24
 8004228:	d410      	bmi.n	800424c <__swhatbuf_r+0x40>
 800422a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800422e:	e00e      	b.n	800424e <__swhatbuf_r+0x42>
 8004230:	466a      	mov	r2, sp
 8004232:	f000 f8bb 	bl	80043ac <_fstat_r>
 8004236:	2800      	cmp	r0, #0
 8004238:	dbf1      	blt.n	800421e <__swhatbuf_r+0x12>
 800423a:	9a01      	ldr	r2, [sp, #4]
 800423c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004240:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004244:	425a      	negs	r2, r3
 8004246:	415a      	adcs	r2, r3
 8004248:	602a      	str	r2, [r5, #0]
 800424a:	e7ee      	b.n	800422a <__swhatbuf_r+0x1e>
 800424c:	2340      	movs	r3, #64	; 0x40
 800424e:	2000      	movs	r0, #0
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	b016      	add	sp, #88	; 0x58
 8004254:	bd70      	pop	{r4, r5, r6, pc}
	...

08004258 <__smakebuf_r>:
 8004258:	898b      	ldrh	r3, [r1, #12]
 800425a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800425c:	079d      	lsls	r5, r3, #30
 800425e:	4606      	mov	r6, r0
 8004260:	460c      	mov	r4, r1
 8004262:	d507      	bpl.n	8004274 <__smakebuf_r+0x1c>
 8004264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	2301      	movs	r3, #1
 800426e:	6163      	str	r3, [r4, #20]
 8004270:	b002      	add	sp, #8
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	ab01      	add	r3, sp, #4
 8004276:	466a      	mov	r2, sp
 8004278:	f7ff ffc8 	bl	800420c <__swhatbuf_r>
 800427c:	9900      	ldr	r1, [sp, #0]
 800427e:	4605      	mov	r5, r0
 8004280:	4630      	mov	r0, r6
 8004282:	f7ff fa0f 	bl	80036a4 <_malloc_r>
 8004286:	b948      	cbnz	r0, 800429c <__smakebuf_r+0x44>
 8004288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800428c:	059a      	lsls	r2, r3, #22
 800428e:	d4ef      	bmi.n	8004270 <__smakebuf_r+0x18>
 8004290:	f023 0303 	bic.w	r3, r3, #3
 8004294:	f043 0302 	orr.w	r3, r3, #2
 8004298:	81a3      	strh	r3, [r4, #12]
 800429a:	e7e3      	b.n	8004264 <__smakebuf_r+0xc>
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <__smakebuf_r+0x7c>)
 800429e:	62b3      	str	r3, [r6, #40]	; 0x28
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	6020      	str	r0, [r4, #0]
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	81a3      	strh	r3, [r4, #12]
 80042aa:	9b00      	ldr	r3, [sp, #0]
 80042ac:	6163      	str	r3, [r4, #20]
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	6120      	str	r0, [r4, #16]
 80042b2:	b15b      	cbz	r3, 80042cc <__smakebuf_r+0x74>
 80042b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042b8:	4630      	mov	r0, r6
 80042ba:	f000 f889 	bl	80043d0 <_isatty_r>
 80042be:	b128      	cbz	r0, 80042cc <__smakebuf_r+0x74>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	f023 0303 	bic.w	r3, r3, #3
 80042c6:	f043 0301 	orr.w	r3, r3, #1
 80042ca:	81a3      	strh	r3, [r4, #12]
 80042cc:	89a0      	ldrh	r0, [r4, #12]
 80042ce:	4305      	orrs	r5, r0
 80042d0:	81a5      	strh	r5, [r4, #12]
 80042d2:	e7cd      	b.n	8004270 <__smakebuf_r+0x18>
 80042d4:	080034bd 	.word	0x080034bd

080042d8 <__malloc_lock>:
 80042d8:	4801      	ldr	r0, [pc, #4]	; (80042e0 <__malloc_lock+0x8>)
 80042da:	f7ff b9c1 	b.w	8003660 <__retarget_lock_acquire_recursive>
 80042de:	bf00      	nop
 80042e0:	20000128 	.word	0x20000128

080042e4 <__malloc_unlock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	; (80042ec <__malloc_unlock+0x8>)
 80042e6:	f7ff b9bc 	b.w	8003662 <__retarget_lock_release_recursive>
 80042ea:	bf00      	nop
 80042ec:	20000128 	.word	0x20000128

080042f0 <_free_r>:
 80042f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042f2:	2900      	cmp	r1, #0
 80042f4:	d044      	beq.n	8004380 <_free_r+0x90>
 80042f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fa:	9001      	str	r0, [sp, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004302:	bfb8      	it	lt
 8004304:	18e4      	addlt	r4, r4, r3
 8004306:	f7ff ffe7 	bl	80042d8 <__malloc_lock>
 800430a:	4a1e      	ldr	r2, [pc, #120]	; (8004384 <_free_r+0x94>)
 800430c:	9801      	ldr	r0, [sp, #4]
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	b933      	cbnz	r3, 8004320 <_free_r+0x30>
 8004312:	6063      	str	r3, [r4, #4]
 8004314:	6014      	str	r4, [r2, #0]
 8004316:	b003      	add	sp, #12
 8004318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800431c:	f7ff bfe2 	b.w	80042e4 <__malloc_unlock>
 8004320:	42a3      	cmp	r3, r4
 8004322:	d908      	bls.n	8004336 <_free_r+0x46>
 8004324:	6825      	ldr	r5, [r4, #0]
 8004326:	1961      	adds	r1, r4, r5
 8004328:	428b      	cmp	r3, r1
 800432a:	bf01      	itttt	eq
 800432c:	6819      	ldreq	r1, [r3, #0]
 800432e:	685b      	ldreq	r3, [r3, #4]
 8004330:	1949      	addeq	r1, r1, r5
 8004332:	6021      	streq	r1, [r4, #0]
 8004334:	e7ed      	b.n	8004312 <_free_r+0x22>
 8004336:	461a      	mov	r2, r3
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	b10b      	cbz	r3, 8004340 <_free_r+0x50>
 800433c:	42a3      	cmp	r3, r4
 800433e:	d9fa      	bls.n	8004336 <_free_r+0x46>
 8004340:	6811      	ldr	r1, [r2, #0]
 8004342:	1855      	adds	r5, r2, r1
 8004344:	42a5      	cmp	r5, r4
 8004346:	d10b      	bne.n	8004360 <_free_r+0x70>
 8004348:	6824      	ldr	r4, [r4, #0]
 800434a:	4421      	add	r1, r4
 800434c:	1854      	adds	r4, r2, r1
 800434e:	42a3      	cmp	r3, r4
 8004350:	6011      	str	r1, [r2, #0]
 8004352:	d1e0      	bne.n	8004316 <_free_r+0x26>
 8004354:	681c      	ldr	r4, [r3, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	4421      	add	r1, r4
 800435c:	6011      	str	r1, [r2, #0]
 800435e:	e7da      	b.n	8004316 <_free_r+0x26>
 8004360:	d902      	bls.n	8004368 <_free_r+0x78>
 8004362:	230c      	movs	r3, #12
 8004364:	6003      	str	r3, [r0, #0]
 8004366:	e7d6      	b.n	8004316 <_free_r+0x26>
 8004368:	6825      	ldr	r5, [r4, #0]
 800436a:	1961      	adds	r1, r4, r5
 800436c:	428b      	cmp	r3, r1
 800436e:	bf04      	itt	eq
 8004370:	6819      	ldreq	r1, [r3, #0]
 8004372:	685b      	ldreq	r3, [r3, #4]
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	bf04      	itt	eq
 8004378:	1949      	addeq	r1, r1, r5
 800437a:	6021      	streq	r1, [r4, #0]
 800437c:	6054      	str	r4, [r2, #4]
 800437e:	e7ca      	b.n	8004316 <_free_r+0x26>
 8004380:	b003      	add	sp, #12
 8004382:	bd30      	pop	{r4, r5, pc}
 8004384:	2000012c 	.word	0x2000012c

08004388 <_read_r>:
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4d07      	ldr	r5, [pc, #28]	; (80043a8 <_read_r+0x20>)
 800438c:	4604      	mov	r4, r0
 800438e:	4608      	mov	r0, r1
 8004390:	4611      	mov	r1, r2
 8004392:	2200      	movs	r2, #0
 8004394:	602a      	str	r2, [r5, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	f7fc fce4 	bl	8000d64 <_read>
 800439c:	1c43      	adds	r3, r0, #1
 800439e:	d102      	bne.n	80043a6 <_read_r+0x1e>
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	b103      	cbz	r3, 80043a6 <_read_r+0x1e>
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	bd38      	pop	{r3, r4, r5, pc}
 80043a8:	20000134 	.word	0x20000134

080043ac <_fstat_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	4d07      	ldr	r5, [pc, #28]	; (80043cc <_fstat_r+0x20>)
 80043b0:	2300      	movs	r3, #0
 80043b2:	4604      	mov	r4, r0
 80043b4:	4608      	mov	r0, r1
 80043b6:	4611      	mov	r1, r2
 80043b8:	602b      	str	r3, [r5, #0]
 80043ba:	f7fc fd18 	bl	8000dee <_fstat>
 80043be:	1c43      	adds	r3, r0, #1
 80043c0:	d102      	bne.n	80043c8 <_fstat_r+0x1c>
 80043c2:	682b      	ldr	r3, [r5, #0]
 80043c4:	b103      	cbz	r3, 80043c8 <_fstat_r+0x1c>
 80043c6:	6023      	str	r3, [r4, #0]
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	bf00      	nop
 80043cc:	20000134 	.word	0x20000134

080043d0 <_isatty_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	4d06      	ldr	r5, [pc, #24]	; (80043ec <_isatty_r+0x1c>)
 80043d4:	2300      	movs	r3, #0
 80043d6:	4604      	mov	r4, r0
 80043d8:	4608      	mov	r0, r1
 80043da:	602b      	str	r3, [r5, #0]
 80043dc:	f7fc fd17 	bl	8000e0e <_isatty>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d102      	bne.n	80043ea <_isatty_r+0x1a>
 80043e4:	682b      	ldr	r3, [r5, #0]
 80043e6:	b103      	cbz	r3, 80043ea <_isatty_r+0x1a>
 80043e8:	6023      	str	r3, [r4, #0]
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	20000134 	.word	0x20000134

080043f0 <_init>:
 80043f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f2:	bf00      	nop
 80043f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043f6:	bc08      	pop	{r3}
 80043f8:	469e      	mov	lr, r3
 80043fa:	4770      	bx	lr

080043fc <_fini>:
 80043fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fe:	bf00      	nop
 8004400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004402:	bc08      	pop	{r3}
 8004404:	469e      	mov	lr, r3
 8004406:	4770      	bx	lr
