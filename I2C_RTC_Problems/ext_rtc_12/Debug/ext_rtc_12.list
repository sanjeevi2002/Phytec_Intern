
ext_rtc_12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a10  08002a10  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a10  08002a10  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a10  08002a10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a10  08002a10  00012a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  08002a88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002a88  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072f8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001273  00000000  00000000  00027398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  00028610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  00028d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002128b  00000000  00000000  000293b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008cf9  00000000  00000000  0004a63b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca385  00000000  00000000  00053334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d6b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002024  00000000  00000000  0011d70c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002978 	.word	0x08002978

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002978 	.word	0x08002978

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
TIME time;

// Initialize I2C handle
I2C_HandleTypeDef hi2c1;

int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b092      	sub	sp, #72	; 0x48
 80002b4:	af02      	add	r7, sp, #8
    HAL_Init();
 80002b6:	f000 fba9 	bl	8000a0c <HAL_Init>
    I2C1_init();
 80002ba:	f000 f867 	bl	800038c <I2C1_init>
    LCD_init();
 80002be:	f000 f933 	bl	8000528 <LCD_init>
    HAL_Delay(10);
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 fc14 	bl	8000af0 <HAL_Delay>

    // Set initial time and date
    uint8_t timeDateToSet[7] = {0x50, 0x31, 0x16, 0x03, 0x13, 0x08, 0x24}; // 04:22 PM, 13(AUGUST), 2024
 80002c8:	4a2c      	ldr	r2, [pc, #176]	; (800037c <main+0xcc>)
 80002ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d2:	6018      	str	r0, [r3, #0]
 80002d4:	3304      	adds	r3, #4
 80002d6:	8019      	strh	r1, [r3, #0]
 80002d8:	3302      	adds	r3, #2
 80002da:	0c0a      	lsrs	r2, r1, #16
 80002dc:	701a      	strb	r2, [r3, #0]
    I2C1_burstWrite(SLAVE_ADDR, 0x00, 7, timeDateToSet);
 80002de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80002e2:	2207      	movs	r2, #7
 80002e4:	2100      	movs	r1, #0
 80002e6:	2068      	movs	r0, #104	; 0x68
 80002e8:	f000 f892 	bl	8000410 <I2C1_burstWrite>

    while (1) {
        Get_Time(); // Reading RTC data
 80002ec:	f000 f8d4 	bl	8000498 <Get_Time>

        // Prepare time string in 12-hour format
        char timeBuffer[17];
        char time12Hour[6]; // Buffer for the time in 12-hour format
        char ampm[3];
        ConvertTo12HourFormat(time.hour, time12Hour, ampm);
 80002f0:	4b23      	ldr	r3, [pc, #140]	; (8000380 <main+0xd0>)
 80002f2:	789b      	ldrb	r3, [r3, #2]
 80002f4:	f107 0218 	add.w	r2, r7, #24
 80002f8:	f107 011c 	add.w	r1, r7, #28
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 fa2b 	bl	8000758 <ConvertTo12HourFormat>
        snprintf(timeBuffer, sizeof(timeBuffer), "TIME: %s:%02d %s", time12Hour, time.minutes, ampm);
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <main+0xd0>)
 8000304:	785b      	ldrb	r3, [r3, #1]
 8000306:	4619      	mov	r1, r3
 8000308:	f107 021c 	add.w	r2, r7, #28
 800030c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	9100      	str	r1, [sp, #0]
 8000318:	4613      	mov	r3, r2
 800031a:	4a1a      	ldr	r2, [pc, #104]	; (8000384 <main+0xd4>)
 800031c:	2111      	movs	r1, #17
 800031e:	f001 fea9 	bl	8002074 <sniprintf>

        // Display time on the first row
        LCD_command(0x01); // Clear display
 8000322:	2001      	movs	r0, #1
 8000324:	f000 f9a8 	bl	8000678 <LCD_command>
        HAL_Delay(2); // Delay for clear command to process
 8000328:	2002      	movs	r0, #2
 800032a:	f000 fbe1 	bl	8000af0 <HAL_Delay>
        LCD_command(0x80); // Set cursor to the beginning of the first row
 800032e:	2080      	movs	r0, #128	; 0x80
 8000330:	f000 f9a2 	bl	8000678 <LCD_command>
        LCD_string(timeBuffer);
 8000334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000338:	4618      	mov	r0, r3
 800033a:	f000 f9d9 	bl	80006f0 <LCD_string>

        // Display date on the second row
        char dateBuffer[17];
        snprintf(dateBuffer, sizeof(dateBuffer), "DATE:%02d/%02d/%04d", time.dayofmonth, time.month, 2000 + time.year);
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <main+0xd0>)
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	4619      	mov	r1, r3
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <main+0xd0>)
 8000346:	795b      	ldrb	r3, [r3, #5]
 8000348:	461a      	mov	r2, r3
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <main+0xd0>)
 800034c:	799b      	ldrb	r3, [r3, #6]
 800034e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000352:	1d38      	adds	r0, r7, #4
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	460b      	mov	r3, r1
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <main+0xd8>)
 800035c:	2111      	movs	r1, #17
 800035e:	f001 fe89 	bl	8002074 <sniprintf>
        LCD_command(0xC0); // Set cursor to the beginning of the second row
 8000362:	20c0      	movs	r0, #192	; 0xc0
 8000364:	f000 f988 	bl	8000678 <LCD_command>
        LCD_string(dateBuffer);
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4618      	mov	r0, r3
 800036c:	f000 f9c0 	bl	80006f0 <LCD_string>

        HAL_Delay(1000); // Delay to update the display every second
 8000370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000374:	f000 fbbc 	bl	8000af0 <HAL_Delay>
    while (1) {
 8000378:	e7b8      	b.n	80002ec <main+0x3c>
 800037a:	bf00      	nop
 800037c:	080029b8 	.word	0x080029b8
 8000380:	2000008c 	.word	0x2000008c
 8000384:	08002990 	.word	0x08002990
 8000388:	080029a4 	.word	0x080029a4

0800038c <I2C1_init>:
    }
}

void I2C1_init(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
    __HAL_RCC_I2C1_CLK_ENABLE(); // Enable I2C1 clock
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <I2C1_init+0x74>)
 8000398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039a:	4a19      	ldr	r2, [pc, #100]	; (8000400 <I2C1_init+0x74>)
 800039c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003a0:	6413      	str	r3, [r2, #64]	; 0x40
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <I2C1_init+0x74>)
 80003a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]

    hi2c1.Instance = I2C1;
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <I2C1_init+0x78>)
 80003b0:	4a15      	ldr	r2, [pc, #84]	; (8000408 <I2C1_init+0x7c>)
 80003b2:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <I2C1_init+0x78>)
 80003b6:	4a15      	ldr	r2, [pc, #84]	; (800040c <I2C1_init+0x80>)
 80003b8:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <I2C1_init+0x78>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <I2C1_init+0x78>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <I2C1_init+0x78>)
 80003c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003cc:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <I2C1_init+0x78>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80003d4:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <I2C1_init+0x78>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003da:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <I2C1_init+0x78>)
 80003dc:	2200      	movs	r2, #0
 80003de:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003e0:	4b08      	ldr	r3, [pc, #32]	; (8000404 <I2C1_init+0x78>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80003e6:	4807      	ldr	r0, [pc, #28]	; (8000404 <I2C1_init+0x78>)
 80003e8:	f000 fe3a 	bl	8001060 <HAL_I2C_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <I2C1_init+0x6a>
        Error_Handler();
 80003f2:	f000 f9fb 	bl	80007ec <Error_Handler>
    }
}
 80003f6:	bf00      	nop
 80003f8:	3708      	adds	r7, #8
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800
 8000404:	20000094 	.word	0x20000094
 8000408:	40005400 	.word	0x40005400
 800040c:	000186a0 	.word	0x000186a0

08000410 <I2C1_burstWrite>:

void I2C1_burstWrite(uint8_t saddr, uint8_t maddr, uint16_t n, uint8_t* data) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af04      	add	r7, sp, #16
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	4603      	mov	r3, r0
 800041a:	71fb      	strb	r3, [r7, #7]
 800041c:	460b      	mov	r3, r1
 800041e:	71bb      	strb	r3, [r7, #6]
 8000420:	4613      	mov	r3, r2
 8000422:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, saddr << 1, maddr, I2C_MEMADD_SIZE_8BIT, data, n, HAL_MAX_DELAY);
 8000424:	79fb      	ldrb	r3, [r7, #7]
 8000426:	b29b      	uxth	r3, r3
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	b299      	uxth	r1, r3
 800042c:	79bb      	ldrb	r3, [r7, #6]
 800042e:	b29a      	uxth	r2, r3
 8000430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000434:	9302      	str	r3, [sp, #8]
 8000436:	88bb      	ldrh	r3, [r7, #4]
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	9300      	str	r3, [sp, #0]
 800043e:	2301      	movs	r3, #1
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <I2C1_burstWrite+0x40>)
 8000442:	f000 ff51 	bl	80012e8 <HAL_I2C_Mem_Write>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000094 	.word	0x20000094

08000454 <I2C1_burstRead>:

void I2C1_burstRead(uint8_t saddr, uint8_t maddr, uint16_t n, uint8_t* data) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af04      	add	r7, sp, #16
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	4603      	mov	r3, r0
 800045e:	71fb      	strb	r3, [r7, #7]
 8000460:	460b      	mov	r3, r1
 8000462:	71bb      	strb	r3, [r7, #6]
 8000464:	4613      	mov	r3, r2
 8000466:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, saddr << 1, maddr, I2C_MEMADD_SIZE_8BIT, data, n, HAL_MAX_DELAY);
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	b29b      	uxth	r3, r3
 800046c:	005b      	lsls	r3, r3, #1
 800046e:	b299      	uxth	r1, r3
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	b29a      	uxth	r2, r3
 8000474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000478:	9302      	str	r3, [sp, #8]
 800047a:	88bb      	ldrh	r3, [r7, #4]
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	4803      	ldr	r0, [pc, #12]	; (8000494 <I2C1_burstRead+0x40>)
 8000486:	f001 f829 	bl	80014dc <HAL_I2C_Mem_Read>
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000094 	.word	0x20000094

08000498 <Get_Time>:

void Get_Time(void) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
    uint8_t timeDateReadback[7];
    I2C1_burstRead(SLAVE_ADDR, 0x00, 7, timeDateReadback);
 800049e:	463b      	mov	r3, r7
 80004a0:	2207      	movs	r2, #7
 80004a2:	2100      	movs	r1, #0
 80004a4:	2068      	movs	r0, #104	; 0x68
 80004a6:	f7ff ffd5 	bl	8000454 <I2C1_burstRead>

    time.seconds = BCDtoDecimal(timeDateReadback[0]);
 80004aa:	783b      	ldrb	r3, [r7, #0]
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f93d 	bl	800072c <BCDtoDecimal>
 80004b2:	4603      	mov	r3, r0
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <Get_Time+0x8c>)
 80004b8:	701a      	strb	r2, [r3, #0]
    time.minutes = BCDtoDecimal(timeDateReadback[1]);
 80004ba:	787b      	ldrb	r3, [r7, #1]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f935 	bl	800072c <BCDtoDecimal>
 80004c2:	4603      	mov	r3, r0
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <Get_Time+0x8c>)
 80004c8:	705a      	strb	r2, [r3, #1]
    time.hour = BCDtoDecimal(timeDateReadback[2]);
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f92d 	bl	800072c <BCDtoDecimal>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b13      	ldr	r3, [pc, #76]	; (8000524 <Get_Time+0x8c>)
 80004d8:	709a      	strb	r2, [r3, #2]
    time.dayofweek = BCDtoDecimal(timeDateReadback[3]);
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f925 	bl	800072c <BCDtoDecimal>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <Get_Time+0x8c>)
 80004e8:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = BCDtoDecimal(timeDateReadback[4]);
 80004ea:	793b      	ldrb	r3, [r7, #4]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f91d 	bl	800072c <BCDtoDecimal>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <Get_Time+0x8c>)
 80004f8:	711a      	strb	r2, [r3, #4]
    time.month = BCDtoDecimal(timeDateReadback[5]);
 80004fa:	797b      	ldrb	r3, [r7, #5]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f915 	bl	800072c <BCDtoDecimal>
 8000502:	4603      	mov	r3, r0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <Get_Time+0x8c>)
 8000508:	715a      	strb	r2, [r3, #5]
    time.year = BCDtoDecimal(timeDateReadback[6]);
 800050a:	79bb      	ldrb	r3, [r7, #6]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f90d 	bl	800072c <BCDtoDecimal>
 8000512:	4603      	mov	r3, r0
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b03      	ldr	r3, [pc, #12]	; (8000524 <Get_Time+0x8c>)
 8000518:	719a      	strb	r2, [r3, #6]
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	2000008c 	.word	0x2000008c

08000528 <LCD_init>:

void LCD_init(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 030c 	add.w	r3, r7, #12
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b31      	ldr	r3, [pc, #196]	; (8000608 <LCD_init+0xe0>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a30      	ldr	r2, [pc, #192]	; (8000608 <LCD_init+0xe0>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b2e      	ldr	r3, [pc, #184]	; (8000608 <LCD_init+0xe0>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b2a      	ldr	r3, [pc, #168]	; (8000608 <LCD_init+0xe0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a29      	ldr	r2, [pc, #164]	; (8000608 <LCD_init+0xe0>)
 8000564:	f043 0304 	orr.w	r3, r3, #4
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b27      	ldr	r3, [pc, #156]	; (8000608 <LCD_init+0xe0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0304 	and.w	r3, r3, #4
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

    // Configure PA5, PA6, PA7 as output
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000576:	23e0      	movs	r3, #224	; 0xe0
 8000578:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	2300      	movs	r3, #0
 8000584:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	481f      	ldr	r0, [pc, #124]	; (800060c <LCD_init+0xe4>)
 800058e:	f000 fbb9 	bl	8000d04 <HAL_GPIO_Init>

    // Configure PC4-PC7 as output
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000592:	23f0      	movs	r3, #240	; 0xf0
 8000594:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	481c      	ldr	r0, [pc, #112]	; (8000610 <LCD_init+0xe8>)
 800059e:	f000 fbb1 	bl	8000d04 <HAL_GPIO_Init>

    HAL_Delay(20); // LCD controller reset sequence
 80005a2:	2014      	movs	r0, #20
 80005a4:	f000 faa4 	bl	8000af0 <HAL_Delay>
    LCD_nibble_write(0x30, GPIO_PIN_RESET);
 80005a8:	2100      	movs	r1, #0
 80005aa:	2030      	movs	r0, #48	; 0x30
 80005ac:	f000 f832 	bl	8000614 <LCD_nibble_write>
    HAL_Delay(5);
 80005b0:	2005      	movs	r0, #5
 80005b2:	f000 fa9d 	bl	8000af0 <HAL_Delay>
    LCD_nibble_write(0x30, GPIO_PIN_RESET);
 80005b6:	2100      	movs	r1, #0
 80005b8:	2030      	movs	r0, #48	; 0x30
 80005ba:	f000 f82b 	bl	8000614 <LCD_nibble_write>
    HAL_Delay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f000 fa96 	bl	8000af0 <HAL_Delay>
    LCD_nibble_write(0x30, GPIO_PIN_RESET);
 80005c4:	2100      	movs	r1, #0
 80005c6:	2030      	movs	r0, #48	; 0x30
 80005c8:	f000 f824 	bl	8000614 <LCD_nibble_write>
    HAL_Delay(1);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fa8f 	bl	8000af0 <HAL_Delay>
    LCD_nibble_write(0x20, GPIO_PIN_RESET); // Use 4-bit data mode
 80005d2:	2100      	movs	r1, #0
 80005d4:	2020      	movs	r0, #32
 80005d6:	f000 f81d 	bl	8000614 <LCD_nibble_write>
    HAL_Delay(1);
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 fa88 	bl	8000af0 <HAL_Delay>
    LCD_command(0x28); // Set 4-bit data, 2-line, 5x7 font
 80005e0:	2028      	movs	r0, #40	; 0x28
 80005e2:	f000 f849 	bl	8000678 <LCD_command>
    LCD_command(0x06); // Move cursor right
 80005e6:	2006      	movs	r0, #6
 80005e8:	f000 f846 	bl	8000678 <LCD_command>
    LCD_command(0x01); // Clear screen, move cursor to home
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 f843 	bl	8000678 <LCD_command>
    LCD_command(0x0C); // Turn on display, cursor off
 80005f2:	200c      	movs	r0, #12
 80005f4:	f000 f840 	bl	8000678 <LCD_command>
    HAL_Delay(2);
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 fa79 	bl	8000af0 <HAL_Delay>
}
 80005fe:	bf00      	nop
 8000600:	3720      	adds	r7, #32
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	40020000 	.word	0x40020000
 8000610:	40020800 	.word	0x40020800

08000614 <LCD_nibble_write>:

void LCD_nibble_write(uint8_t data, uint8_t control) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	460a      	mov	r2, r1
 800061e:	71fb      	strb	r3, [r7, #7]
 8000620:	4613      	mov	r3, r2
 8000622:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET); // Reset PC4-PC7 data bits
 8000624:	2200      	movs	r2, #0
 8000626:	21f0      	movs	r1, #240	; 0xf0
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <LCD_nibble_write+0x5c>)
 800062a:	f000 fcff 	bl	800102c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, (data & 0xF0), GPIO_PIN_SET); // Set data bits 4-7
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	b29b      	uxth	r3, r3
 8000632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000636:	b29b      	uxth	r3, r3
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LCD_nibble_write+0x5c>)
 800063e:	f000 fcf5 	bl	800102c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, RS, control); // RS control
 8000642:	79bb      	ldrb	r3, [r7, #6]
 8000644:	461a      	mov	r2, r3
 8000646:	2120      	movs	r1, #32
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <LCD_nibble_write+0x60>)
 800064a:	f000 fcef 	bl	800102c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, EN, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	4808      	ldr	r0, [pc, #32]	; (8000674 <LCD_nibble_write+0x60>)
 8000654:	f000 fcea 	bl	800102c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f000 fa49 	bl	8000af0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, EN, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <LCD_nibble_write+0x60>)
 8000664:	f000 fce2 	bl	800102c <HAL_GPIO_WritePin>
}
 8000668:	bf00      	nop
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40020800 	.word	0x40020800
 8000674:	40020000 	.word	0x40020000

08000678 <LCD_command>:

void LCD_command(uint8_t command) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    LCD_nibble_write(command & 0xF0, GPIO_PIN_RESET); // Upper nibble first
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	f023 030f 	bic.w	r3, r3, #15
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffc1 	bl	8000614 <LCD_nibble_write>
    LCD_nibble_write(command << 4, GPIO_PIN_RESET); // Then lower nibble
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ffba 	bl	8000614 <LCD_nibble_write>
    HAL_Delay(command < 4 ? 2 : 1); // Commands 1 and 2 need up to 1.64ms
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d801      	bhi.n	80006aa <LCD_command+0x32>
 80006a6:	2302      	movs	r3, #2
 80006a8:	e000      	b.n	80006ac <LCD_command+0x34>
 80006aa:	2301      	movs	r3, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fa1f 	bl	8000af0 <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <LCD_data>:

void LCD_data(uint8_t data) {
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
    LCD_nibble_write(data & 0xF0, GPIO_PIN_SET); // Upper nibble first
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f023 030f 	bic.w	r3, r3, #15
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffa0 	bl	8000614 <LCD_nibble_write>
    LCD_nibble_write(data << 4, GPIO_PIN_SET); // Then lower nibble
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2101      	movs	r1, #1
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff99 	bl	8000614 <LCD_nibble_write>
    HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f000 fa04 	bl	8000af0 <HAL_Delay>
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <LCD_string>:

void LCD_string(char str[]) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 16 && str[i] != '\0'; i++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	e009      	b.n	8000712 <LCD_string+0x22>
        LCD_data((uint8_t)str[i]);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ffd7 	bl	80006ba <LCD_data>
    for (int i = 0; i < 16 && str[i] != '\0'; i++) {
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2b0f      	cmp	r3, #15
 8000716:	dc05      	bgt.n	8000724 <LCD_string+0x34>
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1ec      	bne.n	80006fe <LCD_string+0xe>
    }
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <BCDtoDecimal>:

int BCDtoDecimal(int BCD) {
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    return (((BCD >> 4) * 10) + (BCD & 0x0F));
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	111a      	asrs	r2, r3, #4
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f003 030f 	and.w	r3, r3, #15
 8000748:	4413      	add	r3, r2
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <ConvertTo12HourFormat>:

void ConvertTo12HourFormat(uint8_t hour, char* buffer, char* ampm) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	73fb      	strb	r3, [r7, #15]
    if (hour == 0) {
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d10a      	bne.n	8000782 <ConvertTo12HourFormat+0x2a>
        snprintf(buffer, 5, "12"); // Midnight case
 800076c:	4a1b      	ldr	r2, [pc, #108]	; (80007dc <ConvertTo12HourFormat+0x84>)
 800076e:	2105      	movs	r1, #5
 8000770:	68b8      	ldr	r0, [r7, #8]
 8000772:	f001 fc7f 	bl	8002074 <sniprintf>
        snprintf(ampm, 3, "AM");
 8000776:	4a1a      	ldr	r2, [pc, #104]	; (80007e0 <ConvertTo12HourFormat+0x88>)
 8000778:	2103      	movs	r1, #3
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f001 fc7a 	bl	8002074 <sniprintf>
        snprintf(ampm, 3, "PM");
    } else {
        snprintf(buffer, 5, "%02d", hour - 12); // PM case
        snprintf(ampm, 3, "PM");
    }
}
 8000780:	e028      	b.n	80007d4 <ConvertTo12HourFormat+0x7c>
    } else if (hour < 12) {
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	d80b      	bhi.n	80007a0 <ConvertTo12HourFormat+0x48>
        snprintf(buffer, 5, "%02d", hour); // AM case
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	4a16      	ldr	r2, [pc, #88]	; (80007e4 <ConvertTo12HourFormat+0x8c>)
 800078c:	2105      	movs	r1, #5
 800078e:	68b8      	ldr	r0, [r7, #8]
 8000790:	f001 fc70 	bl	8002074 <sniprintf>
        snprintf(ampm, 3, "AM");
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <ConvertTo12HourFormat+0x88>)
 8000796:	2103      	movs	r1, #3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f001 fc6b 	bl	8002074 <sniprintf>
}
 800079e:	e019      	b.n	80007d4 <ConvertTo12HourFormat+0x7c>
    } else if (hour == 12) {
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	2b0c      	cmp	r3, #12
 80007a4:	d10a      	bne.n	80007bc <ConvertTo12HourFormat+0x64>
        snprintf(buffer, 5, "12"); // Noon case
 80007a6:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <ConvertTo12HourFormat+0x84>)
 80007a8:	2105      	movs	r1, #5
 80007aa:	68b8      	ldr	r0, [r7, #8]
 80007ac:	f001 fc62 	bl	8002074 <sniprintf>
        snprintf(ampm, 3, "PM");
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <ConvertTo12HourFormat+0x90>)
 80007b2:	2103      	movs	r1, #3
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f001 fc5d 	bl	8002074 <sniprintf>
}
 80007ba:	e00b      	b.n	80007d4 <ConvertTo12HourFormat+0x7c>
        snprintf(buffer, 5, "%02d", hour - 12); // PM case
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	3b0c      	subs	r3, #12
 80007c0:	4a08      	ldr	r2, [pc, #32]	; (80007e4 <ConvertTo12HourFormat+0x8c>)
 80007c2:	2105      	movs	r1, #5
 80007c4:	68b8      	ldr	r0, [r7, #8]
 80007c6:	f001 fc55 	bl	8002074 <sniprintf>
        snprintf(ampm, 3, "PM");
 80007ca:	4a07      	ldr	r2, [pc, #28]	; (80007e8 <ConvertTo12HourFormat+0x90>)
 80007cc:	2103      	movs	r1, #3
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f001 fc50 	bl	8002074 <sniprintf>
}
 80007d4:	bf00      	nop
 80007d6:	3710      	adds	r7, #16
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	080029c0 	.word	0x080029c0
 80007e0:	080029c4 	.word	0x080029c4
 80007e4:	080029c8 	.word	0x080029c8
 80007e8:	080029d0 	.word	0x080029d0

080007ec <Error_Handler>:

void Error_Handler(void) {
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
    // Implement error handling
    while (1);
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x4>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_MspInit+0x4c>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <HAL_MspInit+0x4c>)
 8000804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000808:	6453      	str	r3, [r2, #68]	; 0x44
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	603b      	str	r3, [r7, #0]
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_MspInit+0x4c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_MspInit+0x4c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000832:	2007      	movs	r0, #7
 8000834:	f000 fa32 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800

08000844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a19      	ldr	r2, [pc, #100]	; (80008c8 <HAL_I2C_MspInit+0x84>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d12c      	bne.n	80008c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <HAL_I2C_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_I2C_MspInit+0x88>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_I2C_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000882:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000888:	2312      	movs	r3, #18
 800088a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000894:	2304      	movs	r3, #4
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	; (80008d0 <HAL_I2C_MspInit+0x8c>)
 80008a0:	f000 fa30 	bl	8000d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_I2C_MspInit+0x88>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_I2C_MspInit+0x88>)
 80008ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_I2C_MspInit+0x88>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40005400 	.word	0x40005400
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <NMI_Handler+0x4>

080008da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <HardFault_Handler+0x4>

080008e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <MemManage_Handler+0x4>

080008e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <BusFault_Handler+0x4>

080008ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <UsageFault_Handler+0x4>

080008f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000920:	f000 f8c6 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f001 fb62 	bl	8002020 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20020000 	.word	0x20020000
 8000988:	00000400 	.word	0x00000400
 800098c:	200000e8 	.word	0x200000e8
 8000990:	20000100 	.word	0x20000100

08000994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f001 fb21 	bl	800202c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fc61 	bl	80002b0 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009fc:	08002a18 	.word	0x08002a18
  ldr r2, =_sbss
 8000a00:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a04:	20000100 	.word	0x20000100

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>
	...

08000a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_Init+0x40>)
 8000a16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_Init+0x40>)
 8000a22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_Init+0x40>)
 8000a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a34:	2003      	movs	r0, #3
 8000a36:	f000 f931 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 f808 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fed8 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023c00 	.word	0x40023c00

08000a50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_InitTick+0x54>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x58>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f93b 	bl	8000cea <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a8c:	f000 f911 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x5c>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000004 	.word	0x20000004

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	200000ec 	.word	0x200000ec

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200000ec 	.word	0x200000ec

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff47 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5c 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e165      	b.n	8000fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8154 	bne.w	8000fe6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80ae 	beq.w	8000fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b5d      	ldr	r3, [pc, #372]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a5c      	ldr	r2, [pc, #368]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b5a      	ldr	r3, [pc, #360]	; (8001004 <HAL_GPIO_Init+0x300>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a58      	ldr	r2, [pc, #352]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	; (800100c <HAL_GPIO_Init+0x308>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d025      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4e      	ldr	r2, [pc, #312]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01f      	beq.n	8000f1a <HAL_GPIO_Init+0x216>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4d      	ldr	r2, [pc, #308]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d019      	beq.n	8000f16 <HAL_GPIO_Init+0x212>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <HAL_GPIO_Init+0x314>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0x20e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4b      	ldr	r2, [pc, #300]	; (800101c <HAL_GPIO_Init+0x318>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d00d      	beq.n	8000f0e <HAL_GPIO_Init+0x20a>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4a      	ldr	r2, [pc, #296]	; (8001020 <HAL_GPIO_Init+0x31c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d007      	beq.n	8000f0a <HAL_GPIO_Init+0x206>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a49      	ldr	r2, [pc, #292]	; (8001024 <HAL_GPIO_Init+0x320>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d101      	bne.n	8000f06 <HAL_GPIO_Init+0x202>
 8000f02:	2306      	movs	r3, #6
 8000f04:	e00c      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e00a      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	e008      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f0e:	2304      	movs	r3, #4
 8000f10:	e006      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f12:	2303      	movs	r3, #3
 8000f14:	e004      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e002      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <HAL_GPIO_Init+0x21c>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	f002 0203 	and.w	r2, r2, #3
 8000f26:	0092      	lsls	r2, r2, #2
 8000f28:	4093      	lsls	r3, r2
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f30:	4935      	ldr	r1, [pc, #212]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3e:	4b3a      	ldr	r3, [pc, #232]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f62:	4a31      	ldr	r2, [pc, #196]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f8c:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f92:	4b25      	ldr	r3, [pc, #148]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fbc:	4b1a      	ldr	r3, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe0:	4a11      	ldr	r2, [pc, #68]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	f67f ae96 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40013800 	.word	0x40013800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00
 800101c:	40021000 	.word	0x40021000
 8001020:	40021400 	.word	0x40021400
 8001024:	40021800 	.word	0x40021800
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e12b      	b.n	80012ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fbdc 	bl	8000844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2224      	movs	r2, #36	; 0x24
 8001090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010c4:	f000 ff98 	bl	8001ff8 <HAL_RCC_GetPCLK1Freq>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	4a81      	ldr	r2, [pc, #516]	; (80012d4 <HAL_I2C_Init+0x274>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d807      	bhi.n	80010e4 <HAL_I2C_Init+0x84>
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4a80      	ldr	r2, [pc, #512]	; (80012d8 <HAL_I2C_Init+0x278>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	bf94      	ite	ls
 80010dc:	2301      	movls	r3, #1
 80010de:	2300      	movhi	r3, #0
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	e006      	b.n	80010f2 <HAL_I2C_Init+0x92>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4a7d      	ldr	r2, [pc, #500]	; (80012dc <HAL_I2C_Init+0x27c>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	bf94      	ite	ls
 80010ec:	2301      	movls	r3, #1
 80010ee:	2300      	movhi	r3, #0
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e0e7      	b.n	80012ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4a78      	ldr	r2, [pc, #480]	; (80012e0 <HAL_I2C_Init+0x280>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	430a      	orrs	r2, r1
 8001118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a6a      	ldr	r2, [pc, #424]	; (80012d4 <HAL_I2C_Init+0x274>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d802      	bhi.n	8001134 <HAL_I2C_Init+0xd4>
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	3301      	adds	r3, #1
 8001132:	e009      	b.n	8001148 <HAL_I2C_Init+0xe8>
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	4a69      	ldr	r2, [pc, #420]	; (80012e4 <HAL_I2C_Init+0x284>)
 8001140:	fba2 2303 	umull	r2, r3, r2, r3
 8001144:	099b      	lsrs	r3, r3, #6
 8001146:	3301      	adds	r3, #1
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	430b      	orrs	r3, r1
 800114e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800115a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	495c      	ldr	r1, [pc, #368]	; (80012d4 <HAL_I2C_Init+0x274>)
 8001164:	428b      	cmp	r3, r1
 8001166:	d819      	bhi.n	800119c <HAL_I2C_Init+0x13c>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	1e59      	subs	r1, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fbb1 f3f3 	udiv	r3, r1, r3
 8001176:	1c59      	adds	r1, r3, #1
 8001178:	f640 73fc 	movw	r3, #4092	; 0xffc
 800117c:	400b      	ands	r3, r1
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00a      	beq.n	8001198 <HAL_I2C_Init+0x138>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1e59      	subs	r1, r3, #1
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001190:	3301      	adds	r3, #1
 8001192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001196:	e051      	b.n	800123c <HAL_I2C_Init+0x1dc>
 8001198:	2304      	movs	r3, #4
 800119a:	e04f      	b.n	800123c <HAL_I2C_Init+0x1dc>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d111      	bne.n	80011c8 <HAL_I2C_Init+0x168>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	1e58      	subs	r0, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6859      	ldr	r1, [r3, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	440b      	add	r3, r1
 80011b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b6:	3301      	adds	r3, #1
 80011b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011bc:	2b00      	cmp	r3, #0
 80011be:	bf0c      	ite	eq
 80011c0:	2301      	moveq	r3, #1
 80011c2:	2300      	movne	r3, #0
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	e012      	b.n	80011ee <HAL_I2C_Init+0x18e>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	1e58      	subs	r0, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	0099      	lsls	r1, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	fbb0 f3f3 	udiv	r3, r0, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	bf0c      	ite	eq
 80011e8:	2301      	moveq	r3, #1
 80011ea:	2300      	movne	r3, #0
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_I2C_Init+0x196>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e022      	b.n	800123c <HAL_I2C_Init+0x1dc>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10e      	bne.n	800121c <HAL_I2C_Init+0x1bc>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1e58      	subs	r0, r3, #1
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6859      	ldr	r1, [r3, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	440b      	add	r3, r1
 800120c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001210:	3301      	adds	r3, #1
 8001212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800121a:	e00f      	b.n	800123c <HAL_I2C_Init+0x1dc>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	1e58      	subs	r0, r3, #1
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6859      	ldr	r1, [r3, #4]
 8001224:	460b      	mov	r3, r1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	0099      	lsls	r1, r3, #2
 800122c:	440b      	add	r3, r1
 800122e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001232:	3301      	adds	r3, #1
 8001234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	6809      	ldr	r1, [r1, #0]
 8001240:	4313      	orrs	r3, r2
 8001242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	69da      	ldr	r2, [r3, #28]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800126a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6911      	ldr	r1, [r2, #16]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	68d2      	ldr	r2, [r2, #12]
 8001276:	4311      	orrs	r1, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	430b      	orrs	r3, r1
 800127e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695a      	ldr	r2, [r3, #20]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2220      	movs	r2, #32
 80012b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	000186a0 	.word	0x000186a0
 80012d8:	001e847f 	.word	0x001e847f
 80012dc:	003d08ff 	.word	0x003d08ff
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	10624dd3 	.word	0x10624dd3

080012e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b088      	sub	sp, #32
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	4608      	mov	r0, r1
 80012f2:	4611      	mov	r1, r2
 80012f4:	461a      	mov	r2, r3
 80012f6:	4603      	mov	r3, r0
 80012f8:	817b      	strh	r3, [r7, #10]
 80012fa:	460b      	mov	r3, r1
 80012fc:	813b      	strh	r3, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001302:	f7ff fbe9 	bl	8000ad8 <HAL_GetTick>
 8001306:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b20      	cmp	r3, #32
 8001312:	f040 80d9 	bne.w	80014c8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2319      	movs	r3, #25
 800131c:	2201      	movs	r2, #1
 800131e:	496d      	ldr	r1, [pc, #436]	; (80014d4 <HAL_I2C_Mem_Write+0x1ec>)
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f000 fc7f 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800132c:	2302      	movs	r3, #2
 800132e:	e0cc      	b.n	80014ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_I2C_Mem_Write+0x56>
 800133a:	2302      	movs	r3, #2
 800133c:	e0c5      	b.n	80014ca <HAL_I2C_Mem_Write+0x1e2>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b01      	cmp	r3, #1
 8001352:	d007      	beq.n	8001364 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f042 0201 	orr.w	r2, r2, #1
 8001362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2221      	movs	r2, #33	; 0x21
 8001378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2200      	movs	r2, #0
 8001388:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6a3a      	ldr	r2, [r7, #32]
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a4d      	ldr	r2, [pc, #308]	; (80014d8 <HAL_I2C_Mem_Write+0x1f0>)
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80013a6:	88f8      	ldrh	r0, [r7, #6]
 80013a8:	893a      	ldrh	r2, [r7, #8]
 80013aa:	8979      	ldrh	r1, [r7, #10]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4603      	mov	r3, r0
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 fab6 	bl	8001928 <I2C_RequestMemoryWrite>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d052      	beq.n	8001468 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e081      	b.n	80014ca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f000 fd00 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00d      	beq.n	80013f2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d107      	bne.n	80013ee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e06b      	b.n	80014ca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800140c:	3b01      	subs	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001418:	b29b      	uxth	r3, r3
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b04      	cmp	r3, #4
 800142e:	d11b      	bne.n	8001468 <HAL_I2C_Mem_Write+0x180>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	d017      	beq.n	8001468 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143c:	781a      	ldrb	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001452:	3b01      	subs	r3, #1
 8001454:	b29a      	uxth	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145e:	b29b      	uxth	r3, r3
 8001460:	3b01      	subs	r3, #1
 8001462:	b29a      	uxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1aa      	bne.n	80013c6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 fcec 	bl	8001e52 <I2C_WaitOnBTFFlagUntilTimeout>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00d      	beq.n	800149c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	2b04      	cmp	r3, #4
 8001486:	d107      	bne.n	8001498 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001496:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e016      	b.n	80014ca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2220      	movs	r2, #32
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80014c8:	2302      	movs	r3, #2
  }
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	00100002 	.word	0x00100002
 80014d8:	ffff0000 	.word	0xffff0000

080014dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08c      	sub	sp, #48	; 0x30
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	817b      	strh	r3, [r7, #10]
 80014ee:	460b      	mov	r3, r1
 80014f0:	813b      	strh	r3, [r7, #8]
 80014f2:	4613      	mov	r3, r2
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014f6:	f7ff faef 	bl	8000ad8 <HAL_GetTick>
 80014fa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b20      	cmp	r3, #32
 8001506:	f040 8208 	bne.w	800191a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2319      	movs	r3, #25
 8001510:	2201      	movs	r2, #1
 8001512:	497b      	ldr	r1, [pc, #492]	; (8001700 <HAL_I2C_Mem_Read+0x224>)
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 fb85 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001520:	2302      	movs	r3, #2
 8001522:	e1fb      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800152a:	2b01      	cmp	r3, #1
 800152c:	d101      	bne.n	8001532 <HAL_I2C_Mem_Read+0x56>
 800152e:	2302      	movs	r3, #2
 8001530:	e1f4      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001566:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2222      	movs	r2, #34	; 0x22
 800156c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2240      	movs	r2, #64	; 0x40
 8001574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001588:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <HAL_I2C_Mem_Read+0x228>)
 8001598:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800159a:	88f8      	ldrh	r0, [r7, #6]
 800159c:	893a      	ldrh	r2, [r7, #8]
 800159e:	8979      	ldrh	r1, [r7, #10]
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4603      	mov	r3, r0
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 fa52 	bl	8001a54 <I2C_RequestMemoryRead>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1b0      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d113      	bne.n	80015ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	623b      	str	r3, [r7, #32]
 80015d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	e184      	b.n	80018f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d11b      	bne.n	800162a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001600:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	695b      	ldr	r3, [r3, #20]
 800160c:	61fb      	str	r3, [r7, #28]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	61fb      	str	r3, [r7, #28]
 8001616:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e164      	b.n	80018f4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162e:	2b02      	cmp	r3, #2
 8001630:	d11b      	bne.n	800166a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001640:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	e144      	b.n	80018f4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001680:	e138      	b.n	80018f4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001686:	2b03      	cmp	r3, #3
 8001688:	f200 80f1 	bhi.w	800186e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001690:	2b01      	cmp	r3, #1
 8001692:	d123      	bne.n	80016dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 fc1b 	bl	8001ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e139      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016da:	e10b      	b.n	80018f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d14e      	bne.n	8001782 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ea:	2200      	movs	r2, #0
 80016ec:	4906      	ldr	r1, [pc, #24]	; (8001708 <HAL_I2C_Mem_Read+0x22c>)
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 fa98 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d008      	beq.n	800170c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e10e      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
 80016fe:	bf00      	nop
 8001700:	00100002 	.word	0x00100002
 8001704:	ffff0000 	.word	0xffff0000
 8001708:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001738:	3b01      	subs	r3, #1
 800173a:	b29a      	uxth	r2, r3
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001744:	b29b      	uxth	r3, r3
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001780:	e0b8      	b.n	80018f4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001788:	2200      	movs	r2, #0
 800178a:	4966      	ldr	r1, [pc, #408]	; (8001924 <HAL_I2C_Mem_Read+0x448>)
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 fa49 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0bf      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c8:	3b01      	subs	r3, #1
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017e4:	2200      	movs	r2, #0
 80017e6:	494f      	ldr	r1, [pc, #316]	; (8001924 <HAL_I2C_Mem_Read+0x448>)
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f000 fa1b 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e091      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001806:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	1c5a      	adds	r2, r3, #1
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001830:	b29b      	uxth	r3, r3
 8001832:	3b01      	subs	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800186c:	e042      	b.n	80018f4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001870:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 fb2e 	bl	8001ed4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e04c      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189e:	3b01      	subs	r3, #1
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d118      	bne.n	80018f4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f47f aec2 	bne.w	8001682 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e000      	b.n	800191c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800191a:	2302      	movs	r3, #2
  }
}
 800191c:	4618      	mov	r0, r3
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	00010004 	.word	0x00010004

08001928 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af02      	add	r7, sp, #8
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	4608      	mov	r0, r1
 8001932:	4611      	mov	r1, r2
 8001934:	461a      	mov	r2, r3
 8001936:	4603      	mov	r3, r0
 8001938:	817b      	strh	r3, [r7, #10]
 800193a:	460b      	mov	r3, r1
 800193c:	813b      	strh	r3, [r7, #8]
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001950:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	2200      	movs	r2, #0
 800195a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f960 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00d      	beq.n	8001986 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001978:	d103      	bne.n	8001982 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e05f      	b.n	8001a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001986:	897b      	ldrh	r3, [r7, #10]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001994:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	6a3a      	ldr	r2, [r7, #32]
 800199a:	492d      	ldr	r1, [pc, #180]	; (8001a50 <I2C_RequestMemoryWrite+0x128>)
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f998 	bl	8001cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e04c      	b.n	8001a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	6a39      	ldr	r1, [r7, #32]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 fa02 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00d      	beq.n	80019ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2b04      	cmp	r3, #4
 80019d8:	d107      	bne.n	80019ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e02b      	b.n	8001a46 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019f4:	893b      	ldrh	r3, [r7, #8]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	611a      	str	r2, [r3, #16]
 80019fe:	e021      	b.n	8001a44 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001a00:	893b      	ldrh	r3, [r7, #8]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a10:	6a39      	ldr	r1, [r7, #32]
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f9dc 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00d      	beq.n	8001a3a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d107      	bne.n	8001a36 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e005      	b.n	8001a46 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a3a:	893b      	ldrh	r3, [r7, #8]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	00010002 	.word	0x00010002

08001a54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	4611      	mov	r1, r2
 8001a60:	461a      	mov	r2, r3
 8001a62:	4603      	mov	r3, r0
 8001a64:	817b      	strh	r3, [r7, #10]
 8001a66:	460b      	mov	r3, r1
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a7c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 f8c2 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00d      	beq.n	8001ac2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ab4:	d103      	bne.n	8001abe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0aa      	b.n	8001c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ad0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	6a3a      	ldr	r2, [r7, #32]
 8001ad6:	4952      	ldr	r1, [pc, #328]	; (8001c20 <I2C_RequestMemoryRead+0x1cc>)
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f8fa 	bl	8001cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e097      	b.n	8001c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b00:	6a39      	ldr	r1, [r7, #32]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f964 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00d      	beq.n	8001b2a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d107      	bne.n	8001b26 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e076      	b.n	8001c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b2a:	88fb      	ldrh	r3, [r7, #6]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b30:	893b      	ldrh	r3, [r7, #8]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	611a      	str	r2, [r3, #16]
 8001b3a:	e021      	b.n	8001b80 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b3c:	893b      	ldrh	r3, [r7, #8]
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	b2da      	uxtb	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b4c:	6a39      	ldr	r1, [r7, #32]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f93e 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d107      	bne.n	8001b72 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e050      	b.n	8001c18 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b76:	893b      	ldrh	r3, [r7, #8]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b82:	6a39      	ldr	r1, [r7, #32]
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f000 f923 	bl	8001dd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d107      	bne.n	8001ba8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e035      	b.n	8001c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f82b 	bl	8001c24 <I2C_WaitOnFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be2:	d103      	bne.n	8001bec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e013      	b.n	8001c18 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001bf0:	897b      	ldrh	r3, [r7, #10]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	6a3a      	ldr	r2, [r7, #32]
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <I2C_RequestMemoryRead+0x1cc>)
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f863 	bl	8001cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	00010002 	.word	0x00010002

08001c24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c34:	e025      	b.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d021      	beq.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7fe ff4b 	bl	8000ad8 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d116      	bne.n	8001c82 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e023      	b.n	8001cca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10d      	bne.n	8001ca8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	e00c      	b.n	8001cc2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	bf0c      	ite	eq
 8001cba:	2301      	moveq	r3, #1
 8001cbc:	2300      	movne	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d0b6      	beq.n	8001c36 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ce0:	e051      	b.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695b      	ldr	r3, [r3, #20]
 8001ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf0:	d123      	bne.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d00:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d0a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2220      	movs	r2, #32
 8001d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0204 	orr.w	r2, r3, #4
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e046      	b.n	8001dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d40:	d021      	beq.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7fe fec9 	bl	8000ad8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d116      	bne.n	8001d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f043 0220 	orr.w	r2, r3, #32
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e020      	b.n	8001dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d10c      	bne.n	8001daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	695b      	ldr	r3, [r3, #20]
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	e00b      	b.n	8001dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	43da      	mvns	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4013      	ands	r3, r2
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d18d      	bne.n	8001ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ddc:	e02d      	b.n	8001e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f8ce 	bl	8001f80 <I2C_IsAcknowledgeFailed>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e02d      	b.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df4:	d021      	beq.n	8001e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df6:	f7fe fe6f 	bl	8000ad8 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d302      	bcc.n	8001e0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d116      	bne.n	8001e3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f043 0220 	orr.w	r2, r3, #32
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e007      	b.n	8001e4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	695b      	ldr	r3, [r3, #20]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d1ca      	bne.n	8001dde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e5e:	e02d      	b.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f000 f88d 	bl	8001f80 <I2C_IsAcknowledgeFailed>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e02d      	b.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e76:	d021      	beq.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e78:	f7fe fe2e 	bl	8000ad8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d302      	bcc.n	8001e8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f043 0220 	orr.w	r2, r3, #32
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f003 0304 	and.w	r3, r3, #4
 8001ec6:	2b04      	cmp	r3, #4
 8001ec8:	d1ca      	bne.n	8001e60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ee0:	e042      	b.n	8001f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b10      	cmp	r3, #16
 8001eee:	d119      	bne.n	8001f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0210 	mvn.w	r2, #16
 8001ef8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e029      	b.n	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f24:	f7fe fdd8 	bl	8000ad8 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d302      	bcc.n	8001f3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f54:	f043 0220 	orr.w	r2, r3, #32
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e007      	b.n	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f72:	2b40      	cmp	r3, #64	; 0x40
 8001f74:	d1b5      	bne.n	8001ee2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f96:	d11b      	bne.n	8001fd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fa0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f043 0204 	orr.w	r2, r3, #4
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe4:	4b03      	ldr	r3, [pc, #12]	; (8001ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000

08001ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_RCC_GetHCLKFreq>
 8002000:	4602      	mov	r2, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	0a9b      	lsrs	r3, r3, #10
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4903      	ldr	r1, [pc, #12]	; (800201c <HAL_RCC_GetPCLK1Freq+0x24>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	080029d4 	.word	0x080029d4

08002020 <__errno>:
 8002020:	4b01      	ldr	r3, [pc, #4]	; (8002028 <__errno+0x8>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	2000000c 	.word	0x2000000c

0800202c <__libc_init_array>:
 800202c:	b570      	push	{r4, r5, r6, lr}
 800202e:	4d0d      	ldr	r5, [pc, #52]	; (8002064 <__libc_init_array+0x38>)
 8002030:	4c0d      	ldr	r4, [pc, #52]	; (8002068 <__libc_init_array+0x3c>)
 8002032:	1b64      	subs	r4, r4, r5
 8002034:	10a4      	asrs	r4, r4, #2
 8002036:	2600      	movs	r6, #0
 8002038:	42a6      	cmp	r6, r4
 800203a:	d109      	bne.n	8002050 <__libc_init_array+0x24>
 800203c:	4d0b      	ldr	r5, [pc, #44]	; (800206c <__libc_init_array+0x40>)
 800203e:	4c0c      	ldr	r4, [pc, #48]	; (8002070 <__libc_init_array+0x44>)
 8002040:	f000 fc9a 	bl	8002978 <_init>
 8002044:	1b64      	subs	r4, r4, r5
 8002046:	10a4      	asrs	r4, r4, #2
 8002048:	2600      	movs	r6, #0
 800204a:	42a6      	cmp	r6, r4
 800204c:	d105      	bne.n	800205a <__libc_init_array+0x2e>
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	f855 3b04 	ldr.w	r3, [r5], #4
 8002054:	4798      	blx	r3
 8002056:	3601      	adds	r6, #1
 8002058:	e7ee      	b.n	8002038 <__libc_init_array+0xc>
 800205a:	f855 3b04 	ldr.w	r3, [r5], #4
 800205e:	4798      	blx	r3
 8002060:	3601      	adds	r6, #1
 8002062:	e7f2      	b.n	800204a <__libc_init_array+0x1e>
 8002064:	08002a10 	.word	0x08002a10
 8002068:	08002a10 	.word	0x08002a10
 800206c:	08002a10 	.word	0x08002a10
 8002070:	08002a14 	.word	0x08002a14

08002074 <sniprintf>:
 8002074:	b40c      	push	{r2, r3}
 8002076:	b530      	push	{r4, r5, lr}
 8002078:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <sniprintf+0x64>)
 800207a:	1e0c      	subs	r4, r1, #0
 800207c:	681d      	ldr	r5, [r3, #0]
 800207e:	b09d      	sub	sp, #116	; 0x74
 8002080:	da08      	bge.n	8002094 <sniprintf+0x20>
 8002082:	238b      	movs	r3, #139	; 0x8b
 8002084:	602b      	str	r3, [r5, #0]
 8002086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800208a:	b01d      	add	sp, #116	; 0x74
 800208c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002090:	b002      	add	sp, #8
 8002092:	4770      	bx	lr
 8002094:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002098:	f8ad 3014 	strh.w	r3, [sp, #20]
 800209c:	bf14      	ite	ne
 800209e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80020a2:	4623      	moveq	r3, r4
 80020a4:	9304      	str	r3, [sp, #16]
 80020a6:	9307      	str	r3, [sp, #28]
 80020a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ac:	9002      	str	r0, [sp, #8]
 80020ae:	9006      	str	r0, [sp, #24]
 80020b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80020b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80020b6:	ab21      	add	r3, sp, #132	; 0x84
 80020b8:	a902      	add	r1, sp, #8
 80020ba:	4628      	mov	r0, r5
 80020bc:	9301      	str	r3, [sp, #4]
 80020be:	f000 f869 	bl	8002194 <_svfiprintf_r>
 80020c2:	1c43      	adds	r3, r0, #1
 80020c4:	bfbc      	itt	lt
 80020c6:	238b      	movlt	r3, #139	; 0x8b
 80020c8:	602b      	strlt	r3, [r5, #0]
 80020ca:	2c00      	cmp	r4, #0
 80020cc:	d0dd      	beq.n	800208a <sniprintf+0x16>
 80020ce:	9b02      	ldr	r3, [sp, #8]
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e7d9      	b.n	800208a <sniprintf+0x16>
 80020d6:	bf00      	nop
 80020d8:	2000000c 	.word	0x2000000c

080020dc <__ssputs_r>:
 80020dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020e0:	688e      	ldr	r6, [r1, #8]
 80020e2:	429e      	cmp	r6, r3
 80020e4:	4682      	mov	sl, r0
 80020e6:	460c      	mov	r4, r1
 80020e8:	4690      	mov	r8, r2
 80020ea:	461f      	mov	r7, r3
 80020ec:	d838      	bhi.n	8002160 <__ssputs_r+0x84>
 80020ee:	898a      	ldrh	r2, [r1, #12]
 80020f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020f4:	d032      	beq.n	800215c <__ssputs_r+0x80>
 80020f6:	6825      	ldr	r5, [r4, #0]
 80020f8:	6909      	ldr	r1, [r1, #16]
 80020fa:	eba5 0901 	sub.w	r9, r5, r1
 80020fe:	6965      	ldr	r5, [r4, #20]
 8002100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002108:	3301      	adds	r3, #1
 800210a:	444b      	add	r3, r9
 800210c:	106d      	asrs	r5, r5, #1
 800210e:	429d      	cmp	r5, r3
 8002110:	bf38      	it	cc
 8002112:	461d      	movcc	r5, r3
 8002114:	0553      	lsls	r3, r2, #21
 8002116:	d531      	bpl.n	800217c <__ssputs_r+0xa0>
 8002118:	4629      	mov	r1, r5
 800211a:	f000 fb63 	bl	80027e4 <_malloc_r>
 800211e:	4606      	mov	r6, r0
 8002120:	b950      	cbnz	r0, 8002138 <__ssputs_r+0x5c>
 8002122:	230c      	movs	r3, #12
 8002124:	f8ca 3000 	str.w	r3, [sl]
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800212e:	81a3      	strh	r3, [r4, #12]
 8002130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002138:	6921      	ldr	r1, [r4, #16]
 800213a:	464a      	mov	r2, r9
 800213c:	f000 fabe 	bl	80026bc <memcpy>
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214a:	81a3      	strh	r3, [r4, #12]
 800214c:	6126      	str	r6, [r4, #16]
 800214e:	6165      	str	r5, [r4, #20]
 8002150:	444e      	add	r6, r9
 8002152:	eba5 0509 	sub.w	r5, r5, r9
 8002156:	6026      	str	r6, [r4, #0]
 8002158:	60a5      	str	r5, [r4, #8]
 800215a:	463e      	mov	r6, r7
 800215c:	42be      	cmp	r6, r7
 800215e:	d900      	bls.n	8002162 <__ssputs_r+0x86>
 8002160:	463e      	mov	r6, r7
 8002162:	6820      	ldr	r0, [r4, #0]
 8002164:	4632      	mov	r2, r6
 8002166:	4641      	mov	r1, r8
 8002168:	f000 fab6 	bl	80026d8 <memmove>
 800216c:	68a3      	ldr	r3, [r4, #8]
 800216e:	1b9b      	subs	r3, r3, r6
 8002170:	60a3      	str	r3, [r4, #8]
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	4433      	add	r3, r6
 8002176:	6023      	str	r3, [r4, #0]
 8002178:	2000      	movs	r0, #0
 800217a:	e7db      	b.n	8002134 <__ssputs_r+0x58>
 800217c:	462a      	mov	r2, r5
 800217e:	f000 fba5 	bl	80028cc <_realloc_r>
 8002182:	4606      	mov	r6, r0
 8002184:	2800      	cmp	r0, #0
 8002186:	d1e1      	bne.n	800214c <__ssputs_r+0x70>
 8002188:	6921      	ldr	r1, [r4, #16]
 800218a:	4650      	mov	r0, sl
 800218c:	f000 fabe 	bl	800270c <_free_r>
 8002190:	e7c7      	b.n	8002122 <__ssputs_r+0x46>
	...

08002194 <_svfiprintf_r>:
 8002194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002198:	4698      	mov	r8, r3
 800219a:	898b      	ldrh	r3, [r1, #12]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	b09d      	sub	sp, #116	; 0x74
 80021a0:	4607      	mov	r7, r0
 80021a2:	460d      	mov	r5, r1
 80021a4:	4614      	mov	r4, r2
 80021a6:	d50e      	bpl.n	80021c6 <_svfiprintf_r+0x32>
 80021a8:	690b      	ldr	r3, [r1, #16]
 80021aa:	b963      	cbnz	r3, 80021c6 <_svfiprintf_r+0x32>
 80021ac:	2140      	movs	r1, #64	; 0x40
 80021ae:	f000 fb19 	bl	80027e4 <_malloc_r>
 80021b2:	6028      	str	r0, [r5, #0]
 80021b4:	6128      	str	r0, [r5, #16]
 80021b6:	b920      	cbnz	r0, 80021c2 <_svfiprintf_r+0x2e>
 80021b8:	230c      	movs	r3, #12
 80021ba:	603b      	str	r3, [r7, #0]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c0:	e0d1      	b.n	8002366 <_svfiprintf_r+0x1d2>
 80021c2:	2340      	movs	r3, #64	; 0x40
 80021c4:	616b      	str	r3, [r5, #20]
 80021c6:	2300      	movs	r3, #0
 80021c8:	9309      	str	r3, [sp, #36]	; 0x24
 80021ca:	2320      	movs	r3, #32
 80021cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80021d4:	2330      	movs	r3, #48	; 0x30
 80021d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002380 <_svfiprintf_r+0x1ec>
 80021da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021de:	f04f 0901 	mov.w	r9, #1
 80021e2:	4623      	mov	r3, r4
 80021e4:	469a      	mov	sl, r3
 80021e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80021ea:	b10a      	cbz	r2, 80021f0 <_svfiprintf_r+0x5c>
 80021ec:	2a25      	cmp	r2, #37	; 0x25
 80021ee:	d1f9      	bne.n	80021e4 <_svfiprintf_r+0x50>
 80021f0:	ebba 0b04 	subs.w	fp, sl, r4
 80021f4:	d00b      	beq.n	800220e <_svfiprintf_r+0x7a>
 80021f6:	465b      	mov	r3, fp
 80021f8:	4622      	mov	r2, r4
 80021fa:	4629      	mov	r1, r5
 80021fc:	4638      	mov	r0, r7
 80021fe:	f7ff ff6d 	bl	80020dc <__ssputs_r>
 8002202:	3001      	adds	r0, #1
 8002204:	f000 80aa 	beq.w	800235c <_svfiprintf_r+0x1c8>
 8002208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800220a:	445a      	add	r2, fp
 800220c:	9209      	str	r2, [sp, #36]	; 0x24
 800220e:	f89a 3000 	ldrb.w	r3, [sl]
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80a2 	beq.w	800235c <_svfiprintf_r+0x1c8>
 8002218:	2300      	movs	r3, #0
 800221a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800221e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002222:	f10a 0a01 	add.w	sl, sl, #1
 8002226:	9304      	str	r3, [sp, #16]
 8002228:	9307      	str	r3, [sp, #28]
 800222a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800222e:	931a      	str	r3, [sp, #104]	; 0x68
 8002230:	4654      	mov	r4, sl
 8002232:	2205      	movs	r2, #5
 8002234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002238:	4851      	ldr	r0, [pc, #324]	; (8002380 <_svfiprintf_r+0x1ec>)
 800223a:	f7fd ffe9 	bl	8000210 <memchr>
 800223e:	9a04      	ldr	r2, [sp, #16]
 8002240:	b9d8      	cbnz	r0, 800227a <_svfiprintf_r+0xe6>
 8002242:	06d0      	lsls	r0, r2, #27
 8002244:	bf44      	itt	mi
 8002246:	2320      	movmi	r3, #32
 8002248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800224c:	0711      	lsls	r1, r2, #28
 800224e:	bf44      	itt	mi
 8002250:	232b      	movmi	r3, #43	; 0x2b
 8002252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002256:	f89a 3000 	ldrb.w	r3, [sl]
 800225a:	2b2a      	cmp	r3, #42	; 0x2a
 800225c:	d015      	beq.n	800228a <_svfiprintf_r+0xf6>
 800225e:	9a07      	ldr	r2, [sp, #28]
 8002260:	4654      	mov	r4, sl
 8002262:	2000      	movs	r0, #0
 8002264:	f04f 0c0a 	mov.w	ip, #10
 8002268:	4621      	mov	r1, r4
 800226a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800226e:	3b30      	subs	r3, #48	; 0x30
 8002270:	2b09      	cmp	r3, #9
 8002272:	d94e      	bls.n	8002312 <_svfiprintf_r+0x17e>
 8002274:	b1b0      	cbz	r0, 80022a4 <_svfiprintf_r+0x110>
 8002276:	9207      	str	r2, [sp, #28]
 8002278:	e014      	b.n	80022a4 <_svfiprintf_r+0x110>
 800227a:	eba0 0308 	sub.w	r3, r0, r8
 800227e:	fa09 f303 	lsl.w	r3, r9, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	9304      	str	r3, [sp, #16]
 8002286:	46a2      	mov	sl, r4
 8002288:	e7d2      	b.n	8002230 <_svfiprintf_r+0x9c>
 800228a:	9b03      	ldr	r3, [sp, #12]
 800228c:	1d19      	adds	r1, r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	9103      	str	r1, [sp, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	bfbb      	ittet	lt
 8002296:	425b      	neglt	r3, r3
 8002298:	f042 0202 	orrlt.w	r2, r2, #2
 800229c:	9307      	strge	r3, [sp, #28]
 800229e:	9307      	strlt	r3, [sp, #28]
 80022a0:	bfb8      	it	lt
 80022a2:	9204      	strlt	r2, [sp, #16]
 80022a4:	7823      	ldrb	r3, [r4, #0]
 80022a6:	2b2e      	cmp	r3, #46	; 0x2e
 80022a8:	d10c      	bne.n	80022c4 <_svfiprintf_r+0x130>
 80022aa:	7863      	ldrb	r3, [r4, #1]
 80022ac:	2b2a      	cmp	r3, #42	; 0x2a
 80022ae:	d135      	bne.n	800231c <_svfiprintf_r+0x188>
 80022b0:	9b03      	ldr	r3, [sp, #12]
 80022b2:	1d1a      	adds	r2, r3, #4
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	9203      	str	r2, [sp, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bfb8      	it	lt
 80022bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80022c0:	3402      	adds	r4, #2
 80022c2:	9305      	str	r3, [sp, #20]
 80022c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002390 <_svfiprintf_r+0x1fc>
 80022c8:	7821      	ldrb	r1, [r4, #0]
 80022ca:	2203      	movs	r2, #3
 80022cc:	4650      	mov	r0, sl
 80022ce:	f7fd ff9f 	bl	8000210 <memchr>
 80022d2:	b140      	cbz	r0, 80022e6 <_svfiprintf_r+0x152>
 80022d4:	2340      	movs	r3, #64	; 0x40
 80022d6:	eba0 000a 	sub.w	r0, r0, sl
 80022da:	fa03 f000 	lsl.w	r0, r3, r0
 80022de:	9b04      	ldr	r3, [sp, #16]
 80022e0:	4303      	orrs	r3, r0
 80022e2:	3401      	adds	r4, #1
 80022e4:	9304      	str	r3, [sp, #16]
 80022e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80022ea:	4826      	ldr	r0, [pc, #152]	; (8002384 <_svfiprintf_r+0x1f0>)
 80022ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022f0:	2206      	movs	r2, #6
 80022f2:	f7fd ff8d 	bl	8000210 <memchr>
 80022f6:	2800      	cmp	r0, #0
 80022f8:	d038      	beq.n	800236c <_svfiprintf_r+0x1d8>
 80022fa:	4b23      	ldr	r3, [pc, #140]	; (8002388 <_svfiprintf_r+0x1f4>)
 80022fc:	bb1b      	cbnz	r3, 8002346 <_svfiprintf_r+0x1b2>
 80022fe:	9b03      	ldr	r3, [sp, #12]
 8002300:	3307      	adds	r3, #7
 8002302:	f023 0307 	bic.w	r3, r3, #7
 8002306:	3308      	adds	r3, #8
 8002308:	9303      	str	r3, [sp, #12]
 800230a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800230c:	4433      	add	r3, r6
 800230e:	9309      	str	r3, [sp, #36]	; 0x24
 8002310:	e767      	b.n	80021e2 <_svfiprintf_r+0x4e>
 8002312:	fb0c 3202 	mla	r2, ip, r2, r3
 8002316:	460c      	mov	r4, r1
 8002318:	2001      	movs	r0, #1
 800231a:	e7a5      	b.n	8002268 <_svfiprintf_r+0xd4>
 800231c:	2300      	movs	r3, #0
 800231e:	3401      	adds	r4, #1
 8002320:	9305      	str	r3, [sp, #20]
 8002322:	4619      	mov	r1, r3
 8002324:	f04f 0c0a 	mov.w	ip, #10
 8002328:	4620      	mov	r0, r4
 800232a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800232e:	3a30      	subs	r2, #48	; 0x30
 8002330:	2a09      	cmp	r2, #9
 8002332:	d903      	bls.n	800233c <_svfiprintf_r+0x1a8>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0c5      	beq.n	80022c4 <_svfiprintf_r+0x130>
 8002338:	9105      	str	r1, [sp, #20]
 800233a:	e7c3      	b.n	80022c4 <_svfiprintf_r+0x130>
 800233c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002340:	4604      	mov	r4, r0
 8002342:	2301      	movs	r3, #1
 8002344:	e7f0      	b.n	8002328 <_svfiprintf_r+0x194>
 8002346:	ab03      	add	r3, sp, #12
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	462a      	mov	r2, r5
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <_svfiprintf_r+0x1f8>)
 800234e:	a904      	add	r1, sp, #16
 8002350:	4638      	mov	r0, r7
 8002352:	f3af 8000 	nop.w
 8002356:	1c42      	adds	r2, r0, #1
 8002358:	4606      	mov	r6, r0
 800235a:	d1d6      	bne.n	800230a <_svfiprintf_r+0x176>
 800235c:	89ab      	ldrh	r3, [r5, #12]
 800235e:	065b      	lsls	r3, r3, #25
 8002360:	f53f af2c 	bmi.w	80021bc <_svfiprintf_r+0x28>
 8002364:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002366:	b01d      	add	sp, #116	; 0x74
 8002368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236c:	ab03      	add	r3, sp, #12
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	462a      	mov	r2, r5
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <_svfiprintf_r+0x1f8>)
 8002374:	a904      	add	r1, sp, #16
 8002376:	4638      	mov	r0, r7
 8002378:	f000 f87a 	bl	8002470 <_printf_i>
 800237c:	e7eb      	b.n	8002356 <_svfiprintf_r+0x1c2>
 800237e:	bf00      	nop
 8002380:	080029dc 	.word	0x080029dc
 8002384:	080029e6 	.word	0x080029e6
 8002388:	00000000 	.word	0x00000000
 800238c:	080020dd 	.word	0x080020dd
 8002390:	080029e2 	.word	0x080029e2

08002394 <_printf_common>:
 8002394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002398:	4616      	mov	r6, r2
 800239a:	4699      	mov	r9, r3
 800239c:	688a      	ldr	r2, [r1, #8]
 800239e:	690b      	ldr	r3, [r1, #16]
 80023a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023a4:	4293      	cmp	r3, r2
 80023a6:	bfb8      	it	lt
 80023a8:	4613      	movlt	r3, r2
 80023aa:	6033      	str	r3, [r6, #0]
 80023ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023b0:	4607      	mov	r7, r0
 80023b2:	460c      	mov	r4, r1
 80023b4:	b10a      	cbz	r2, 80023ba <_printf_common+0x26>
 80023b6:	3301      	adds	r3, #1
 80023b8:	6033      	str	r3, [r6, #0]
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	0699      	lsls	r1, r3, #26
 80023be:	bf42      	ittt	mi
 80023c0:	6833      	ldrmi	r3, [r6, #0]
 80023c2:	3302      	addmi	r3, #2
 80023c4:	6033      	strmi	r3, [r6, #0]
 80023c6:	6825      	ldr	r5, [r4, #0]
 80023c8:	f015 0506 	ands.w	r5, r5, #6
 80023cc:	d106      	bne.n	80023dc <_printf_common+0x48>
 80023ce:	f104 0a19 	add.w	sl, r4, #25
 80023d2:	68e3      	ldr	r3, [r4, #12]
 80023d4:	6832      	ldr	r2, [r6, #0]
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	42ab      	cmp	r3, r5
 80023da:	dc26      	bgt.n	800242a <_printf_common+0x96>
 80023dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80023e0:	1e13      	subs	r3, r2, #0
 80023e2:	6822      	ldr	r2, [r4, #0]
 80023e4:	bf18      	it	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	0692      	lsls	r2, r2, #26
 80023ea:	d42b      	bmi.n	8002444 <_printf_common+0xb0>
 80023ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023f0:	4649      	mov	r1, r9
 80023f2:	4638      	mov	r0, r7
 80023f4:	47c0      	blx	r8
 80023f6:	3001      	adds	r0, #1
 80023f8:	d01e      	beq.n	8002438 <_printf_common+0xa4>
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	68e5      	ldr	r5, [r4, #12]
 80023fe:	6832      	ldr	r2, [r6, #0]
 8002400:	f003 0306 	and.w	r3, r3, #6
 8002404:	2b04      	cmp	r3, #4
 8002406:	bf08      	it	eq
 8002408:	1aad      	subeq	r5, r5, r2
 800240a:	68a3      	ldr	r3, [r4, #8]
 800240c:	6922      	ldr	r2, [r4, #16]
 800240e:	bf0c      	ite	eq
 8002410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002414:	2500      	movne	r5, #0
 8002416:	4293      	cmp	r3, r2
 8002418:	bfc4      	itt	gt
 800241a:	1a9b      	subgt	r3, r3, r2
 800241c:	18ed      	addgt	r5, r5, r3
 800241e:	2600      	movs	r6, #0
 8002420:	341a      	adds	r4, #26
 8002422:	42b5      	cmp	r5, r6
 8002424:	d11a      	bne.n	800245c <_printf_common+0xc8>
 8002426:	2000      	movs	r0, #0
 8002428:	e008      	b.n	800243c <_printf_common+0xa8>
 800242a:	2301      	movs	r3, #1
 800242c:	4652      	mov	r2, sl
 800242e:	4649      	mov	r1, r9
 8002430:	4638      	mov	r0, r7
 8002432:	47c0      	blx	r8
 8002434:	3001      	adds	r0, #1
 8002436:	d103      	bne.n	8002440 <_printf_common+0xac>
 8002438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800243c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002440:	3501      	adds	r5, #1
 8002442:	e7c6      	b.n	80023d2 <_printf_common+0x3e>
 8002444:	18e1      	adds	r1, r4, r3
 8002446:	1c5a      	adds	r2, r3, #1
 8002448:	2030      	movs	r0, #48	; 0x30
 800244a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800244e:	4422      	add	r2, r4
 8002450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002458:	3302      	adds	r3, #2
 800245a:	e7c7      	b.n	80023ec <_printf_common+0x58>
 800245c:	2301      	movs	r3, #1
 800245e:	4622      	mov	r2, r4
 8002460:	4649      	mov	r1, r9
 8002462:	4638      	mov	r0, r7
 8002464:	47c0      	blx	r8
 8002466:	3001      	adds	r0, #1
 8002468:	d0e6      	beq.n	8002438 <_printf_common+0xa4>
 800246a:	3601      	adds	r6, #1
 800246c:	e7d9      	b.n	8002422 <_printf_common+0x8e>
	...

08002470 <_printf_i>:
 8002470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002474:	7e0f      	ldrb	r7, [r1, #24]
 8002476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002478:	2f78      	cmp	r7, #120	; 0x78
 800247a:	4691      	mov	r9, r2
 800247c:	4680      	mov	r8, r0
 800247e:	460c      	mov	r4, r1
 8002480:	469a      	mov	sl, r3
 8002482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002486:	d807      	bhi.n	8002498 <_printf_i+0x28>
 8002488:	2f62      	cmp	r7, #98	; 0x62
 800248a:	d80a      	bhi.n	80024a2 <_printf_i+0x32>
 800248c:	2f00      	cmp	r7, #0
 800248e:	f000 80d8 	beq.w	8002642 <_printf_i+0x1d2>
 8002492:	2f58      	cmp	r7, #88	; 0x58
 8002494:	f000 80a3 	beq.w	80025de <_printf_i+0x16e>
 8002498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800249c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024a0:	e03a      	b.n	8002518 <_printf_i+0xa8>
 80024a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024a6:	2b15      	cmp	r3, #21
 80024a8:	d8f6      	bhi.n	8002498 <_printf_i+0x28>
 80024aa:	a101      	add	r1, pc, #4	; (adr r1, 80024b0 <_printf_i+0x40>)
 80024ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024b0:	08002509 	.word	0x08002509
 80024b4:	0800251d 	.word	0x0800251d
 80024b8:	08002499 	.word	0x08002499
 80024bc:	08002499 	.word	0x08002499
 80024c0:	08002499 	.word	0x08002499
 80024c4:	08002499 	.word	0x08002499
 80024c8:	0800251d 	.word	0x0800251d
 80024cc:	08002499 	.word	0x08002499
 80024d0:	08002499 	.word	0x08002499
 80024d4:	08002499 	.word	0x08002499
 80024d8:	08002499 	.word	0x08002499
 80024dc:	08002629 	.word	0x08002629
 80024e0:	0800254d 	.word	0x0800254d
 80024e4:	0800260b 	.word	0x0800260b
 80024e8:	08002499 	.word	0x08002499
 80024ec:	08002499 	.word	0x08002499
 80024f0:	0800264b 	.word	0x0800264b
 80024f4:	08002499 	.word	0x08002499
 80024f8:	0800254d 	.word	0x0800254d
 80024fc:	08002499 	.word	0x08002499
 8002500:	08002499 	.word	0x08002499
 8002504:	08002613 	.word	0x08002613
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	1d1a      	adds	r2, r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	602a      	str	r2, [r5, #0]
 8002510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002518:	2301      	movs	r3, #1
 800251a:	e0a3      	b.n	8002664 <_printf_i+0x1f4>
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	6829      	ldr	r1, [r5, #0]
 8002520:	0606      	lsls	r6, r0, #24
 8002522:	f101 0304 	add.w	r3, r1, #4
 8002526:	d50a      	bpl.n	800253e <_printf_i+0xce>
 8002528:	680e      	ldr	r6, [r1, #0]
 800252a:	602b      	str	r3, [r5, #0]
 800252c:	2e00      	cmp	r6, #0
 800252e:	da03      	bge.n	8002538 <_printf_i+0xc8>
 8002530:	232d      	movs	r3, #45	; 0x2d
 8002532:	4276      	negs	r6, r6
 8002534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002538:	485e      	ldr	r0, [pc, #376]	; (80026b4 <_printf_i+0x244>)
 800253a:	230a      	movs	r3, #10
 800253c:	e019      	b.n	8002572 <_printf_i+0x102>
 800253e:	680e      	ldr	r6, [r1, #0]
 8002540:	602b      	str	r3, [r5, #0]
 8002542:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002546:	bf18      	it	ne
 8002548:	b236      	sxthne	r6, r6
 800254a:	e7ef      	b.n	800252c <_printf_i+0xbc>
 800254c:	682b      	ldr	r3, [r5, #0]
 800254e:	6820      	ldr	r0, [r4, #0]
 8002550:	1d19      	adds	r1, r3, #4
 8002552:	6029      	str	r1, [r5, #0]
 8002554:	0601      	lsls	r1, r0, #24
 8002556:	d501      	bpl.n	800255c <_printf_i+0xec>
 8002558:	681e      	ldr	r6, [r3, #0]
 800255a:	e002      	b.n	8002562 <_printf_i+0xf2>
 800255c:	0646      	lsls	r6, r0, #25
 800255e:	d5fb      	bpl.n	8002558 <_printf_i+0xe8>
 8002560:	881e      	ldrh	r6, [r3, #0]
 8002562:	4854      	ldr	r0, [pc, #336]	; (80026b4 <_printf_i+0x244>)
 8002564:	2f6f      	cmp	r7, #111	; 0x6f
 8002566:	bf0c      	ite	eq
 8002568:	2308      	moveq	r3, #8
 800256a:	230a      	movne	r3, #10
 800256c:	2100      	movs	r1, #0
 800256e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002572:	6865      	ldr	r5, [r4, #4]
 8002574:	60a5      	str	r5, [r4, #8]
 8002576:	2d00      	cmp	r5, #0
 8002578:	bfa2      	ittt	ge
 800257a:	6821      	ldrge	r1, [r4, #0]
 800257c:	f021 0104 	bicge.w	r1, r1, #4
 8002580:	6021      	strge	r1, [r4, #0]
 8002582:	b90e      	cbnz	r6, 8002588 <_printf_i+0x118>
 8002584:	2d00      	cmp	r5, #0
 8002586:	d04d      	beq.n	8002624 <_printf_i+0x1b4>
 8002588:	4615      	mov	r5, r2
 800258a:	fbb6 f1f3 	udiv	r1, r6, r3
 800258e:	fb03 6711 	mls	r7, r3, r1, r6
 8002592:	5dc7      	ldrb	r7, [r0, r7]
 8002594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002598:	4637      	mov	r7, r6
 800259a:	42bb      	cmp	r3, r7
 800259c:	460e      	mov	r6, r1
 800259e:	d9f4      	bls.n	800258a <_printf_i+0x11a>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d10b      	bne.n	80025bc <_printf_i+0x14c>
 80025a4:	6823      	ldr	r3, [r4, #0]
 80025a6:	07de      	lsls	r6, r3, #31
 80025a8:	d508      	bpl.n	80025bc <_printf_i+0x14c>
 80025aa:	6923      	ldr	r3, [r4, #16]
 80025ac:	6861      	ldr	r1, [r4, #4]
 80025ae:	4299      	cmp	r1, r3
 80025b0:	bfde      	ittt	le
 80025b2:	2330      	movle	r3, #48	; 0x30
 80025b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80025bc:	1b52      	subs	r2, r2, r5
 80025be:	6122      	str	r2, [r4, #16]
 80025c0:	f8cd a000 	str.w	sl, [sp]
 80025c4:	464b      	mov	r3, r9
 80025c6:	aa03      	add	r2, sp, #12
 80025c8:	4621      	mov	r1, r4
 80025ca:	4640      	mov	r0, r8
 80025cc:	f7ff fee2 	bl	8002394 <_printf_common>
 80025d0:	3001      	adds	r0, #1
 80025d2:	d14c      	bne.n	800266e <_printf_i+0x1fe>
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d8:	b004      	add	sp, #16
 80025da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025de:	4835      	ldr	r0, [pc, #212]	; (80026b4 <_printf_i+0x244>)
 80025e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80025e4:	6829      	ldr	r1, [r5, #0]
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80025ec:	6029      	str	r1, [r5, #0]
 80025ee:	061d      	lsls	r5, r3, #24
 80025f0:	d514      	bpl.n	800261c <_printf_i+0x1ac>
 80025f2:	07df      	lsls	r7, r3, #31
 80025f4:	bf44      	itt	mi
 80025f6:	f043 0320 	orrmi.w	r3, r3, #32
 80025fa:	6023      	strmi	r3, [r4, #0]
 80025fc:	b91e      	cbnz	r6, 8002606 <_printf_i+0x196>
 80025fe:	6823      	ldr	r3, [r4, #0]
 8002600:	f023 0320 	bic.w	r3, r3, #32
 8002604:	6023      	str	r3, [r4, #0]
 8002606:	2310      	movs	r3, #16
 8002608:	e7b0      	b.n	800256c <_printf_i+0xfc>
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	f043 0320 	orr.w	r3, r3, #32
 8002610:	6023      	str	r3, [r4, #0]
 8002612:	2378      	movs	r3, #120	; 0x78
 8002614:	4828      	ldr	r0, [pc, #160]	; (80026b8 <_printf_i+0x248>)
 8002616:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800261a:	e7e3      	b.n	80025e4 <_printf_i+0x174>
 800261c:	0659      	lsls	r1, r3, #25
 800261e:	bf48      	it	mi
 8002620:	b2b6      	uxthmi	r6, r6
 8002622:	e7e6      	b.n	80025f2 <_printf_i+0x182>
 8002624:	4615      	mov	r5, r2
 8002626:	e7bb      	b.n	80025a0 <_printf_i+0x130>
 8002628:	682b      	ldr	r3, [r5, #0]
 800262a:	6826      	ldr	r6, [r4, #0]
 800262c:	6961      	ldr	r1, [r4, #20]
 800262e:	1d18      	adds	r0, r3, #4
 8002630:	6028      	str	r0, [r5, #0]
 8002632:	0635      	lsls	r5, r6, #24
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	d501      	bpl.n	800263c <_printf_i+0x1cc>
 8002638:	6019      	str	r1, [r3, #0]
 800263a:	e002      	b.n	8002642 <_printf_i+0x1d2>
 800263c:	0670      	lsls	r0, r6, #25
 800263e:	d5fb      	bpl.n	8002638 <_printf_i+0x1c8>
 8002640:	8019      	strh	r1, [r3, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	6123      	str	r3, [r4, #16]
 8002646:	4615      	mov	r5, r2
 8002648:	e7ba      	b.n	80025c0 <_printf_i+0x150>
 800264a:	682b      	ldr	r3, [r5, #0]
 800264c:	1d1a      	adds	r2, r3, #4
 800264e:	602a      	str	r2, [r5, #0]
 8002650:	681d      	ldr	r5, [r3, #0]
 8002652:	6862      	ldr	r2, [r4, #4]
 8002654:	2100      	movs	r1, #0
 8002656:	4628      	mov	r0, r5
 8002658:	f7fd fdda 	bl	8000210 <memchr>
 800265c:	b108      	cbz	r0, 8002662 <_printf_i+0x1f2>
 800265e:	1b40      	subs	r0, r0, r5
 8002660:	6060      	str	r0, [r4, #4]
 8002662:	6863      	ldr	r3, [r4, #4]
 8002664:	6123      	str	r3, [r4, #16]
 8002666:	2300      	movs	r3, #0
 8002668:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800266c:	e7a8      	b.n	80025c0 <_printf_i+0x150>
 800266e:	6923      	ldr	r3, [r4, #16]
 8002670:	462a      	mov	r2, r5
 8002672:	4649      	mov	r1, r9
 8002674:	4640      	mov	r0, r8
 8002676:	47d0      	blx	sl
 8002678:	3001      	adds	r0, #1
 800267a:	d0ab      	beq.n	80025d4 <_printf_i+0x164>
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	079b      	lsls	r3, r3, #30
 8002680:	d413      	bmi.n	80026aa <_printf_i+0x23a>
 8002682:	68e0      	ldr	r0, [r4, #12]
 8002684:	9b03      	ldr	r3, [sp, #12]
 8002686:	4298      	cmp	r0, r3
 8002688:	bfb8      	it	lt
 800268a:	4618      	movlt	r0, r3
 800268c:	e7a4      	b.n	80025d8 <_printf_i+0x168>
 800268e:	2301      	movs	r3, #1
 8002690:	4632      	mov	r2, r6
 8002692:	4649      	mov	r1, r9
 8002694:	4640      	mov	r0, r8
 8002696:	47d0      	blx	sl
 8002698:	3001      	adds	r0, #1
 800269a:	d09b      	beq.n	80025d4 <_printf_i+0x164>
 800269c:	3501      	adds	r5, #1
 800269e:	68e3      	ldr	r3, [r4, #12]
 80026a0:	9903      	ldr	r1, [sp, #12]
 80026a2:	1a5b      	subs	r3, r3, r1
 80026a4:	42ab      	cmp	r3, r5
 80026a6:	dcf2      	bgt.n	800268e <_printf_i+0x21e>
 80026a8:	e7eb      	b.n	8002682 <_printf_i+0x212>
 80026aa:	2500      	movs	r5, #0
 80026ac:	f104 0619 	add.w	r6, r4, #25
 80026b0:	e7f5      	b.n	800269e <_printf_i+0x22e>
 80026b2:	bf00      	nop
 80026b4:	080029ed 	.word	0x080029ed
 80026b8:	080029fe 	.word	0x080029fe

080026bc <memcpy>:
 80026bc:	440a      	add	r2, r1
 80026be:	4291      	cmp	r1, r2
 80026c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80026c4:	d100      	bne.n	80026c8 <memcpy+0xc>
 80026c6:	4770      	bx	lr
 80026c8:	b510      	push	{r4, lr}
 80026ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026d2:	4291      	cmp	r1, r2
 80026d4:	d1f9      	bne.n	80026ca <memcpy+0xe>
 80026d6:	bd10      	pop	{r4, pc}

080026d8 <memmove>:
 80026d8:	4288      	cmp	r0, r1
 80026da:	b510      	push	{r4, lr}
 80026dc:	eb01 0402 	add.w	r4, r1, r2
 80026e0:	d902      	bls.n	80026e8 <memmove+0x10>
 80026e2:	4284      	cmp	r4, r0
 80026e4:	4623      	mov	r3, r4
 80026e6:	d807      	bhi.n	80026f8 <memmove+0x20>
 80026e8:	1e43      	subs	r3, r0, #1
 80026ea:	42a1      	cmp	r1, r4
 80026ec:	d008      	beq.n	8002700 <memmove+0x28>
 80026ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80026f6:	e7f8      	b.n	80026ea <memmove+0x12>
 80026f8:	4402      	add	r2, r0
 80026fa:	4601      	mov	r1, r0
 80026fc:	428a      	cmp	r2, r1
 80026fe:	d100      	bne.n	8002702 <memmove+0x2a>
 8002700:	bd10      	pop	{r4, pc}
 8002702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800270a:	e7f7      	b.n	80026fc <memmove+0x24>

0800270c <_free_r>:
 800270c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800270e:	2900      	cmp	r1, #0
 8002710:	d044      	beq.n	800279c <_free_r+0x90>
 8002712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002716:	9001      	str	r0, [sp, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	f1a1 0404 	sub.w	r4, r1, #4
 800271e:	bfb8      	it	lt
 8002720:	18e4      	addlt	r4, r4, r3
 8002722:	f000 f913 	bl	800294c <__malloc_lock>
 8002726:	4a1e      	ldr	r2, [pc, #120]	; (80027a0 <_free_r+0x94>)
 8002728:	9801      	ldr	r0, [sp, #4]
 800272a:	6813      	ldr	r3, [r2, #0]
 800272c:	b933      	cbnz	r3, 800273c <_free_r+0x30>
 800272e:	6063      	str	r3, [r4, #4]
 8002730:	6014      	str	r4, [r2, #0]
 8002732:	b003      	add	sp, #12
 8002734:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002738:	f000 b90e 	b.w	8002958 <__malloc_unlock>
 800273c:	42a3      	cmp	r3, r4
 800273e:	d908      	bls.n	8002752 <_free_r+0x46>
 8002740:	6825      	ldr	r5, [r4, #0]
 8002742:	1961      	adds	r1, r4, r5
 8002744:	428b      	cmp	r3, r1
 8002746:	bf01      	itttt	eq
 8002748:	6819      	ldreq	r1, [r3, #0]
 800274a:	685b      	ldreq	r3, [r3, #4]
 800274c:	1949      	addeq	r1, r1, r5
 800274e:	6021      	streq	r1, [r4, #0]
 8002750:	e7ed      	b.n	800272e <_free_r+0x22>
 8002752:	461a      	mov	r2, r3
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	b10b      	cbz	r3, 800275c <_free_r+0x50>
 8002758:	42a3      	cmp	r3, r4
 800275a:	d9fa      	bls.n	8002752 <_free_r+0x46>
 800275c:	6811      	ldr	r1, [r2, #0]
 800275e:	1855      	adds	r5, r2, r1
 8002760:	42a5      	cmp	r5, r4
 8002762:	d10b      	bne.n	800277c <_free_r+0x70>
 8002764:	6824      	ldr	r4, [r4, #0]
 8002766:	4421      	add	r1, r4
 8002768:	1854      	adds	r4, r2, r1
 800276a:	42a3      	cmp	r3, r4
 800276c:	6011      	str	r1, [r2, #0]
 800276e:	d1e0      	bne.n	8002732 <_free_r+0x26>
 8002770:	681c      	ldr	r4, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	6053      	str	r3, [r2, #4]
 8002776:	4421      	add	r1, r4
 8002778:	6011      	str	r1, [r2, #0]
 800277a:	e7da      	b.n	8002732 <_free_r+0x26>
 800277c:	d902      	bls.n	8002784 <_free_r+0x78>
 800277e:	230c      	movs	r3, #12
 8002780:	6003      	str	r3, [r0, #0]
 8002782:	e7d6      	b.n	8002732 <_free_r+0x26>
 8002784:	6825      	ldr	r5, [r4, #0]
 8002786:	1961      	adds	r1, r4, r5
 8002788:	428b      	cmp	r3, r1
 800278a:	bf04      	itt	eq
 800278c:	6819      	ldreq	r1, [r3, #0]
 800278e:	685b      	ldreq	r3, [r3, #4]
 8002790:	6063      	str	r3, [r4, #4]
 8002792:	bf04      	itt	eq
 8002794:	1949      	addeq	r1, r1, r5
 8002796:	6021      	streq	r1, [r4, #0]
 8002798:	6054      	str	r4, [r2, #4]
 800279a:	e7ca      	b.n	8002732 <_free_r+0x26>
 800279c:	b003      	add	sp, #12
 800279e:	bd30      	pop	{r4, r5, pc}
 80027a0:	200000f0 	.word	0x200000f0

080027a4 <sbrk_aligned>:
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	4e0e      	ldr	r6, [pc, #56]	; (80027e0 <sbrk_aligned+0x3c>)
 80027a8:	460c      	mov	r4, r1
 80027aa:	6831      	ldr	r1, [r6, #0]
 80027ac:	4605      	mov	r5, r0
 80027ae:	b911      	cbnz	r1, 80027b6 <sbrk_aligned+0x12>
 80027b0:	f000 f8bc 	bl	800292c <_sbrk_r>
 80027b4:	6030      	str	r0, [r6, #0]
 80027b6:	4621      	mov	r1, r4
 80027b8:	4628      	mov	r0, r5
 80027ba:	f000 f8b7 	bl	800292c <_sbrk_r>
 80027be:	1c43      	adds	r3, r0, #1
 80027c0:	d00a      	beq.n	80027d8 <sbrk_aligned+0x34>
 80027c2:	1cc4      	adds	r4, r0, #3
 80027c4:	f024 0403 	bic.w	r4, r4, #3
 80027c8:	42a0      	cmp	r0, r4
 80027ca:	d007      	beq.n	80027dc <sbrk_aligned+0x38>
 80027cc:	1a21      	subs	r1, r4, r0
 80027ce:	4628      	mov	r0, r5
 80027d0:	f000 f8ac 	bl	800292c <_sbrk_r>
 80027d4:	3001      	adds	r0, #1
 80027d6:	d101      	bne.n	80027dc <sbrk_aligned+0x38>
 80027d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027dc:	4620      	mov	r0, r4
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	200000f4 	.word	0x200000f4

080027e4 <_malloc_r>:
 80027e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e8:	1ccd      	adds	r5, r1, #3
 80027ea:	f025 0503 	bic.w	r5, r5, #3
 80027ee:	3508      	adds	r5, #8
 80027f0:	2d0c      	cmp	r5, #12
 80027f2:	bf38      	it	cc
 80027f4:	250c      	movcc	r5, #12
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	4607      	mov	r7, r0
 80027fa:	db01      	blt.n	8002800 <_malloc_r+0x1c>
 80027fc:	42a9      	cmp	r1, r5
 80027fe:	d905      	bls.n	800280c <_malloc_r+0x28>
 8002800:	230c      	movs	r3, #12
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	2600      	movs	r6, #0
 8002806:	4630      	mov	r0, r6
 8002808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800280c:	4e2e      	ldr	r6, [pc, #184]	; (80028c8 <_malloc_r+0xe4>)
 800280e:	f000 f89d 	bl	800294c <__malloc_lock>
 8002812:	6833      	ldr	r3, [r6, #0]
 8002814:	461c      	mov	r4, r3
 8002816:	bb34      	cbnz	r4, 8002866 <_malloc_r+0x82>
 8002818:	4629      	mov	r1, r5
 800281a:	4638      	mov	r0, r7
 800281c:	f7ff ffc2 	bl	80027a4 <sbrk_aligned>
 8002820:	1c43      	adds	r3, r0, #1
 8002822:	4604      	mov	r4, r0
 8002824:	d14d      	bne.n	80028c2 <_malloc_r+0xde>
 8002826:	6834      	ldr	r4, [r6, #0]
 8002828:	4626      	mov	r6, r4
 800282a:	2e00      	cmp	r6, #0
 800282c:	d140      	bne.n	80028b0 <_malloc_r+0xcc>
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	4631      	mov	r1, r6
 8002832:	4638      	mov	r0, r7
 8002834:	eb04 0803 	add.w	r8, r4, r3
 8002838:	f000 f878 	bl	800292c <_sbrk_r>
 800283c:	4580      	cmp	r8, r0
 800283e:	d13a      	bne.n	80028b6 <_malloc_r+0xd2>
 8002840:	6821      	ldr	r1, [r4, #0]
 8002842:	3503      	adds	r5, #3
 8002844:	1a6d      	subs	r5, r5, r1
 8002846:	f025 0503 	bic.w	r5, r5, #3
 800284a:	3508      	adds	r5, #8
 800284c:	2d0c      	cmp	r5, #12
 800284e:	bf38      	it	cc
 8002850:	250c      	movcc	r5, #12
 8002852:	4629      	mov	r1, r5
 8002854:	4638      	mov	r0, r7
 8002856:	f7ff ffa5 	bl	80027a4 <sbrk_aligned>
 800285a:	3001      	adds	r0, #1
 800285c:	d02b      	beq.n	80028b6 <_malloc_r+0xd2>
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	442b      	add	r3, r5
 8002862:	6023      	str	r3, [r4, #0]
 8002864:	e00e      	b.n	8002884 <_malloc_r+0xa0>
 8002866:	6822      	ldr	r2, [r4, #0]
 8002868:	1b52      	subs	r2, r2, r5
 800286a:	d41e      	bmi.n	80028aa <_malloc_r+0xc6>
 800286c:	2a0b      	cmp	r2, #11
 800286e:	d916      	bls.n	800289e <_malloc_r+0xba>
 8002870:	1961      	adds	r1, r4, r5
 8002872:	42a3      	cmp	r3, r4
 8002874:	6025      	str	r5, [r4, #0]
 8002876:	bf18      	it	ne
 8002878:	6059      	strne	r1, [r3, #4]
 800287a:	6863      	ldr	r3, [r4, #4]
 800287c:	bf08      	it	eq
 800287e:	6031      	streq	r1, [r6, #0]
 8002880:	5162      	str	r2, [r4, r5]
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	4638      	mov	r0, r7
 8002886:	f104 060b 	add.w	r6, r4, #11
 800288a:	f000 f865 	bl	8002958 <__malloc_unlock>
 800288e:	f026 0607 	bic.w	r6, r6, #7
 8002892:	1d23      	adds	r3, r4, #4
 8002894:	1af2      	subs	r2, r6, r3
 8002896:	d0b6      	beq.n	8002806 <_malloc_r+0x22>
 8002898:	1b9b      	subs	r3, r3, r6
 800289a:	50a3      	str	r3, [r4, r2]
 800289c:	e7b3      	b.n	8002806 <_malloc_r+0x22>
 800289e:	6862      	ldr	r2, [r4, #4]
 80028a0:	42a3      	cmp	r3, r4
 80028a2:	bf0c      	ite	eq
 80028a4:	6032      	streq	r2, [r6, #0]
 80028a6:	605a      	strne	r2, [r3, #4]
 80028a8:	e7ec      	b.n	8002884 <_malloc_r+0xa0>
 80028aa:	4623      	mov	r3, r4
 80028ac:	6864      	ldr	r4, [r4, #4]
 80028ae:	e7b2      	b.n	8002816 <_malloc_r+0x32>
 80028b0:	4634      	mov	r4, r6
 80028b2:	6876      	ldr	r6, [r6, #4]
 80028b4:	e7b9      	b.n	800282a <_malloc_r+0x46>
 80028b6:	230c      	movs	r3, #12
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4638      	mov	r0, r7
 80028bc:	f000 f84c 	bl	8002958 <__malloc_unlock>
 80028c0:	e7a1      	b.n	8002806 <_malloc_r+0x22>
 80028c2:	6025      	str	r5, [r4, #0]
 80028c4:	e7de      	b.n	8002884 <_malloc_r+0xa0>
 80028c6:	bf00      	nop
 80028c8:	200000f0 	.word	0x200000f0

080028cc <_realloc_r>:
 80028cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d0:	4680      	mov	r8, r0
 80028d2:	4614      	mov	r4, r2
 80028d4:	460e      	mov	r6, r1
 80028d6:	b921      	cbnz	r1, 80028e2 <_realloc_r+0x16>
 80028d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80028dc:	4611      	mov	r1, r2
 80028de:	f7ff bf81 	b.w	80027e4 <_malloc_r>
 80028e2:	b92a      	cbnz	r2, 80028f0 <_realloc_r+0x24>
 80028e4:	f7ff ff12 	bl	800270c <_free_r>
 80028e8:	4625      	mov	r5, r4
 80028ea:	4628      	mov	r0, r5
 80028ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028f0:	f000 f838 	bl	8002964 <_malloc_usable_size_r>
 80028f4:	4284      	cmp	r4, r0
 80028f6:	4607      	mov	r7, r0
 80028f8:	d802      	bhi.n	8002900 <_realloc_r+0x34>
 80028fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80028fe:	d812      	bhi.n	8002926 <_realloc_r+0x5a>
 8002900:	4621      	mov	r1, r4
 8002902:	4640      	mov	r0, r8
 8002904:	f7ff ff6e 	bl	80027e4 <_malloc_r>
 8002908:	4605      	mov	r5, r0
 800290a:	2800      	cmp	r0, #0
 800290c:	d0ed      	beq.n	80028ea <_realloc_r+0x1e>
 800290e:	42bc      	cmp	r4, r7
 8002910:	4622      	mov	r2, r4
 8002912:	4631      	mov	r1, r6
 8002914:	bf28      	it	cs
 8002916:	463a      	movcs	r2, r7
 8002918:	f7ff fed0 	bl	80026bc <memcpy>
 800291c:	4631      	mov	r1, r6
 800291e:	4640      	mov	r0, r8
 8002920:	f7ff fef4 	bl	800270c <_free_r>
 8002924:	e7e1      	b.n	80028ea <_realloc_r+0x1e>
 8002926:	4635      	mov	r5, r6
 8002928:	e7df      	b.n	80028ea <_realloc_r+0x1e>
	...

0800292c <_sbrk_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	4d06      	ldr	r5, [pc, #24]	; (8002948 <_sbrk_r+0x1c>)
 8002930:	2300      	movs	r3, #0
 8002932:	4604      	mov	r4, r0
 8002934:	4608      	mov	r0, r1
 8002936:	602b      	str	r3, [r5, #0]
 8002938:	f7fd fff6 	bl	8000928 <_sbrk>
 800293c:	1c43      	adds	r3, r0, #1
 800293e:	d102      	bne.n	8002946 <_sbrk_r+0x1a>
 8002940:	682b      	ldr	r3, [r5, #0]
 8002942:	b103      	cbz	r3, 8002946 <_sbrk_r+0x1a>
 8002944:	6023      	str	r3, [r4, #0]
 8002946:	bd38      	pop	{r3, r4, r5, pc}
 8002948:	200000f8 	.word	0x200000f8

0800294c <__malloc_lock>:
 800294c:	4801      	ldr	r0, [pc, #4]	; (8002954 <__malloc_lock+0x8>)
 800294e:	f000 b811 	b.w	8002974 <__retarget_lock_acquire_recursive>
 8002952:	bf00      	nop
 8002954:	200000fc 	.word	0x200000fc

08002958 <__malloc_unlock>:
 8002958:	4801      	ldr	r0, [pc, #4]	; (8002960 <__malloc_unlock+0x8>)
 800295a:	f000 b80c 	b.w	8002976 <__retarget_lock_release_recursive>
 800295e:	bf00      	nop
 8002960:	200000fc 	.word	0x200000fc

08002964 <_malloc_usable_size_r>:
 8002964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002968:	1f18      	subs	r0, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	bfbc      	itt	lt
 800296e:	580b      	ldrlt	r3, [r1, r0]
 8002970:	18c0      	addlt	r0, r0, r3
 8002972:	4770      	bx	lr

08002974 <__retarget_lock_acquire_recursive>:
 8002974:	4770      	bx	lr

08002976 <__retarget_lock_release_recursive>:
 8002976:	4770      	bx	lr

08002978 <_init>:
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297a:	bf00      	nop
 800297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297e:	bc08      	pop	{r3}
 8002980:	469e      	mov	lr, r3
 8002982:	4770      	bx	lr

08002984 <_fini>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	bf00      	nop
 8002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298a:	bc08      	pop	{r3}
 800298c:	469e      	mov	lr, r3
 800298e:	4770      	bx	lr
