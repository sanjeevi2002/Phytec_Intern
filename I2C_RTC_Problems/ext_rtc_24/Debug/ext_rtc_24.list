
ext_rtc_24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002738  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ac  080029ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029ac  080029ac  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029ac  080029ac  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000070  08002a24  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002a24  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007296  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001273  00000000  00000000  00027336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  000285b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000680  00000000  00000000  00028cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002128b  00000000  00000000  00029340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ce1  00000000  00000000  0004a5cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca361  00000000  00000000  000532ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d60d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002004  00000000  00000000  0011d660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080028f0 	.word	0x080028f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080028f0 	.word	0x080028f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
TIME time;

// Initialize I2C handle
I2C_HandleTypeDef hi2c1;

int main(void) {
 80002b0:	b5b0      	push	{r4, r5, r7, lr}
 80002b2:	b098      	sub	sp, #96	; 0x60
 80002b4:	af04      	add	r7, sp, #16
    HAL_Init();
 80002b6:	f000 fb65 	bl	8000984 <HAL_Init>
    I2C1_init();
 80002ba:	f000 f86f 	bl	800039c <I2C1_init>
    LCD_init();
 80002be:	f000 f93b 	bl	8000538 <LCD_init>
    HAL_Delay(10);
 80002c2:	200a      	movs	r0, #10
 80002c4:	f000 fbd0 	bl	8000a68 <HAL_Delay>

    // Set initial time and date
    uint8_t timeDateToSet[7] = {0x16, 0x20, 0x16, 0x03, 0x13, 0x08, 0x24}; // 24:24:23 3(TUESDAY), 23(date), 01(JANUARY) 2023
 80002c8:	4a2f      	ldr	r2, [pc, #188]	; (8000388 <main+0xd8>)
 80002ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002d2:	6018      	str	r0, [r3, #0]
 80002d4:	3304      	adds	r3, #4
 80002d6:	8019      	strh	r1, [r3, #0]
 80002d8:	3302      	adds	r3, #2
 80002da:	0c0a      	lsrs	r2, r1, #16
 80002dc:	701a      	strb	r2, [r3, #0]
    I2C1_burstWrite(SLAVE_ADDR, 0x00, 7, timeDateToSet);
 80002de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80002e2:	2207      	movs	r2, #7
 80002e4:	2100      	movs	r1, #0
 80002e6:	2068      	movs	r0, #104	; 0x68
 80002e8:	f000 f89a 	bl	8000420 <I2C1_burstWrite>

    while (1) {
        Get_Time(); // Reading RTC data
 80002ec:	f000 f8dc 	bl	80004a8 <Get_Time>

        // Prepare time string in 24-hour format
        char timeBuffer[17];
        snprintf(timeBuffer, sizeof(timeBuffer), "%02d:%02d %02d-%02d-%04d",
                 time.hour, time.minutes, time.dayofmonth, time.month, 2000 + time.year);
 80002f0:	4b26      	ldr	r3, [pc, #152]	; (800038c <main+0xdc>)
 80002f2:	789b      	ldrb	r3, [r3, #2]
        snprintf(timeBuffer, sizeof(timeBuffer), "%02d:%02d %02d-%02d-%04d",
 80002f4:	461d      	mov	r5, r3
                 time.hour, time.minutes, time.dayofmonth, time.month, 2000 + time.year);
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <main+0xdc>)
 80002f8:	785b      	ldrb	r3, [r3, #1]
        snprintf(timeBuffer, sizeof(timeBuffer), "%02d:%02d %02d-%02d-%04d",
 80002fa:	461a      	mov	r2, r3
                 time.hour, time.minutes, time.dayofmonth, time.month, 2000 + time.year);
 80002fc:	4b23      	ldr	r3, [pc, #140]	; (800038c <main+0xdc>)
 80002fe:	791b      	ldrb	r3, [r3, #4]
        snprintf(timeBuffer, sizeof(timeBuffer), "%02d:%02d %02d-%02d-%04d",
 8000300:	4619      	mov	r1, r3
                 time.hour, time.minutes, time.dayofmonth, time.month, 2000 + time.year);
 8000302:	4b22      	ldr	r3, [pc, #136]	; (800038c <main+0xdc>)
 8000304:	795b      	ldrb	r3, [r3, #5]
        snprintf(timeBuffer, sizeof(timeBuffer), "%02d:%02d %02d-%02d-%04d",
 8000306:	461c      	mov	r4, r3
                 time.hour, time.minutes, time.dayofmonth, time.month, 2000 + time.year);
 8000308:	4b20      	ldr	r3, [pc, #128]	; (800038c <main+0xdc>)
 800030a:	799b      	ldrb	r3, [r3, #6]
        snprintf(timeBuffer, sizeof(timeBuffer), "%02d:%02d %02d-%02d-%04d",
 800030c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000310:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000314:	9303      	str	r3, [sp, #12]
 8000316:	9402      	str	r4, [sp, #8]
 8000318:	9101      	str	r1, [sp, #4]
 800031a:	9200      	str	r2, [sp, #0]
 800031c:	462b      	mov	r3, r5
 800031e:	4a1c      	ldr	r2, [pc, #112]	; (8000390 <main+0xe0>)
 8000320:	2111      	movs	r1, #17
 8000322:	f001 fe63 	bl	8001fec <sniprintf>

        // Display time and date on the first row
        LCD_command(0x01); // Clear display
 8000326:	2001      	movs	r0, #1
 8000328:	f000 f9ae 	bl	8000688 <LCD_command>
        HAL_Delay(2); // Delay for clear command to process
 800032c:	2002      	movs	r0, #2
 800032e:	f000 fb9b 	bl	8000a68 <HAL_Delay>
        LCD_command(0x80); // Set cursor to the beginning of the first row
 8000332:	2080      	movs	r0, #128	; 0x80
 8000334:	f000 f9a8 	bl	8000688 <LCD_command>
        LCD_string(timeBuffer);
 8000338:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f9df 	bl	8000700 <LCD_string>

        // Display day of the week on the second row
        const char *day_names[] = {"SUN", "MON", "TUE", "WED", "THU", "FRI", "SAT"};
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <main+0xe4>)
 8000344:	f107 0418 	add.w	r4, r7, #24
 8000348:	461d      	mov	r5, r3
 800034a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800034c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800034e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000352:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        char dayBuffer[17];
        snprintf(dayBuffer, sizeof(dayBuffer), "DAY : %s", day_names[time.dayofweek - 1]);
 8000356:	4b0d      	ldr	r3, [pc, #52]	; (800038c <main+0xdc>)
 8000358:	78db      	ldrb	r3, [r3, #3]
 800035a:	3b01      	subs	r3, #1
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	3350      	adds	r3, #80	; 0x50
 8000360:	443b      	add	r3, r7
 8000362:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000366:	1d38      	adds	r0, r7, #4
 8000368:	4a0b      	ldr	r2, [pc, #44]	; (8000398 <main+0xe8>)
 800036a:	2111      	movs	r1, #17
 800036c:	f001 fe3e 	bl	8001fec <sniprintf>
        LCD_command(0xC0); // Set cursor to the beginning of the second row
 8000370:	20c0      	movs	r0, #192	; 0xc0
 8000372:	f000 f989 	bl	8000688 <LCD_command>
        LCD_string(dayBuffer);
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f000 f9c1 	bl	8000700 <LCD_string>

        HAL_Delay(1000); // Delay to update the display every second
 800037e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000382:	f000 fb71 	bl	8000a68 <HAL_Delay>
    while (1) {
 8000386:	e7b1      	b.n	80002ec <main+0x3c>
 8000388:	0800294c 	.word	0x0800294c
 800038c:	2000008c 	.word	0x2000008c
 8000390:	08002924 	.word	0x08002924
 8000394:	08002954 	.word	0x08002954
 8000398:	08002940 	.word	0x08002940

0800039c <I2C1_init>:
    }
}

void I2C1_init(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
    __HAL_RCC_I2C1_CLK_ENABLE(); // Enable I2C1 clock
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <I2C1_init+0x74>)
 80003a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003aa:	4a19      	ldr	r2, [pc, #100]	; (8000410 <I2C1_init+0x74>)
 80003ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003b0:	6413      	str	r3, [r2, #64]	; 0x40
 80003b2:	4b17      	ldr	r3, [pc, #92]	; (8000410 <I2C1_init+0x74>)
 80003b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

    hi2c1.Instance = I2C1;
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <I2C1_init+0x78>)
 80003c0:	4a15      	ldr	r2, [pc, #84]	; (8000418 <I2C1_init+0x7c>)
 80003c2:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <I2C1_init+0x78>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <I2C1_init+0x80>)
 80003c8:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <I2C1_init+0x78>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <I2C1_init+0x78>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <I2C1_init+0x78>)
 80003d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003dc:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003de:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <I2C1_init+0x78>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <I2C1_init+0x78>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ea:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <I2C1_init+0x78>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f0:	4b08      	ldr	r3, [pc, #32]	; (8000414 <I2C1_init+0x78>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <I2C1_init+0x78>)
 80003f8:	f000 fdee 	bl	8000fd8 <HAL_I2C_Init>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <I2C1_init+0x6a>
        Error_Handler();
 8000402:	f000 f9b0 	bl	8000766 <Error_Handler>
    }
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40023800 	.word	0x40023800
 8000414:	20000094 	.word	0x20000094
 8000418:	40005400 	.word	0x40005400
 800041c:	000186a0 	.word	0x000186a0

08000420 <I2C1_burstWrite>:

void I2C1_burstWrite(uint8_t saddr, uint8_t maddr, uint16_t n, uint8_t* data) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af04      	add	r7, sp, #16
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	4603      	mov	r3, r0
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	460b      	mov	r3, r1
 800042e:	71bb      	strb	r3, [r7, #6]
 8000430:	4613      	mov	r3, r2
 8000432:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, saddr << 1, maddr, I2C_MEMADD_SIZE_8BIT, data, n, HAL_MAX_DELAY);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	b29b      	uxth	r3, r3
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	b299      	uxth	r1, r3
 800043c:	79bb      	ldrb	r3, [r7, #6]
 800043e:	b29a      	uxth	r2, r3
 8000440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000444:	9302      	str	r3, [sp, #8]
 8000446:	88bb      	ldrh	r3, [r7, #4]
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	683b      	ldr	r3, [r7, #0]
 800044c:	9300      	str	r3, [sp, #0]
 800044e:	2301      	movs	r3, #1
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <I2C1_burstWrite+0x40>)
 8000452:	f000 ff05 	bl	8001260 <HAL_I2C_Mem_Write>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000094 	.word	0x20000094

08000464 <I2C1_burstRead>:

void I2C1_burstRead(uint8_t saddr, uint8_t maddr, uint16_t n, uint8_t* data) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af04      	add	r7, sp, #16
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	4603      	mov	r3, r0
 800046e:	71fb      	strb	r3, [r7, #7]
 8000470:	460b      	mov	r3, r1
 8000472:	71bb      	strb	r3, [r7, #6]
 8000474:	4613      	mov	r3, r2
 8000476:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, saddr << 1, maddr, I2C_MEMADD_SIZE_8BIT, data, n, HAL_MAX_DELAY);
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	b29b      	uxth	r3, r3
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	b299      	uxth	r1, r3
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	b29a      	uxth	r2, r3
 8000484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000488:	9302      	str	r3, [sp, #8]
 800048a:	88bb      	ldrh	r3, [r7, #4]
 800048c:	9301      	str	r3, [sp, #4]
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	2301      	movs	r3, #1
 8000494:	4803      	ldr	r0, [pc, #12]	; (80004a4 <I2C1_burstRead+0x40>)
 8000496:	f000 ffdd 	bl	8001454 <HAL_I2C_Mem_Read>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000094 	.word	0x20000094

080004a8 <Get_Time>:

void Get_Time(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
    uint8_t timeDateReadback[7];
    I2C1_burstRead(SLAVE_ADDR, 0x00, 7, timeDateReadback);
 80004ae:	463b      	mov	r3, r7
 80004b0:	2207      	movs	r2, #7
 80004b2:	2100      	movs	r1, #0
 80004b4:	2068      	movs	r0, #104	; 0x68
 80004b6:	f7ff ffd5 	bl	8000464 <I2C1_burstRead>

    time.seconds = BCDtoDecimal(timeDateReadback[0]);
 80004ba:	783b      	ldrb	r3, [r7, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 f93d 	bl	800073c <BCDtoDecimal>
 80004c2:	4603      	mov	r3, r0
 80004c4:	b2da      	uxtb	r2, r3
 80004c6:	4b1b      	ldr	r3, [pc, #108]	; (8000534 <Get_Time+0x8c>)
 80004c8:	701a      	strb	r2, [r3, #0]
    time.minutes = BCDtoDecimal(timeDateReadback[1]);
 80004ca:	787b      	ldrb	r3, [r7, #1]
 80004cc:	4618      	mov	r0, r3
 80004ce:	f000 f935 	bl	800073c <BCDtoDecimal>
 80004d2:	4603      	mov	r3, r0
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b17      	ldr	r3, [pc, #92]	; (8000534 <Get_Time+0x8c>)
 80004d8:	705a      	strb	r2, [r3, #1]
    time.hour = BCDtoDecimal(timeDateReadback[2]);
 80004da:	78bb      	ldrb	r3, [r7, #2]
 80004dc:	4618      	mov	r0, r3
 80004de:	f000 f92d 	bl	800073c <BCDtoDecimal>
 80004e2:	4603      	mov	r3, r0
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <Get_Time+0x8c>)
 80004e8:	709a      	strb	r2, [r3, #2]
    time.dayofweek = BCDtoDecimal(timeDateReadback[3]);
 80004ea:	78fb      	ldrb	r3, [r7, #3]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f925 	bl	800073c <BCDtoDecimal>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <Get_Time+0x8c>)
 80004f8:	70da      	strb	r2, [r3, #3]
    time.dayofmonth = BCDtoDecimal(timeDateReadback[4]);
 80004fa:	793b      	ldrb	r3, [r7, #4]
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 f91d 	bl	800073c <BCDtoDecimal>
 8000502:	4603      	mov	r3, r0
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <Get_Time+0x8c>)
 8000508:	711a      	strb	r2, [r3, #4]
    time.month = BCDtoDecimal(timeDateReadback[5]);
 800050a:	797b      	ldrb	r3, [r7, #5]
 800050c:	4618      	mov	r0, r3
 800050e:	f000 f915 	bl	800073c <BCDtoDecimal>
 8000512:	4603      	mov	r3, r0
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b07      	ldr	r3, [pc, #28]	; (8000534 <Get_Time+0x8c>)
 8000518:	715a      	strb	r2, [r3, #5]
    time.year = BCDtoDecimal(timeDateReadback[6]);
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	4618      	mov	r0, r3
 800051e:	f000 f90d 	bl	800073c <BCDtoDecimal>
 8000522:	4603      	mov	r3, r0
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b03      	ldr	r3, [pc, #12]	; (8000534 <Get_Time+0x8c>)
 8000528:	719a      	strb	r2, [r3, #6]
}
 800052a:	bf00      	nop
 800052c:	3708      	adds	r7, #8
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	2000008c 	.word	0x2000008c

08000538 <LCD_init>:

void LCD_init(void) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b31      	ldr	r3, [pc, #196]	; (8000618 <LCD_init+0xe0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a30      	ldr	r2, [pc, #192]	; (8000618 <LCD_init+0xe0>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <LCD_init+0xe0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <LCD_init+0xe0>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a29      	ldr	r2, [pc, #164]	; (8000618 <LCD_init+0xe0>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b27      	ldr	r3, [pc, #156]	; (8000618 <LCD_init+0xe0>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

    // Configure PA5, PA6, PA7 as output
    GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8000586:	23e0      	movs	r3, #224	; 0xe0
 8000588:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	2301      	movs	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000592:	2300      	movs	r3, #0
 8000594:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 030c 	add.w	r3, r7, #12
 800059a:	4619      	mov	r1, r3
 800059c:	481f      	ldr	r0, [pc, #124]	; (800061c <LCD_init+0xe4>)
 800059e:	f000 fb6d 	bl	8000c7c <HAL_GPIO_Init>

    // Configure PC4-PC7 as output
    GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80005a2:	23f0      	movs	r3, #240	; 0xf0
 80005a4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	4619      	mov	r1, r3
 80005ac:	481c      	ldr	r0, [pc, #112]	; (8000620 <LCD_init+0xe8>)
 80005ae:	f000 fb65 	bl	8000c7c <HAL_GPIO_Init>

    HAL_Delay(20); // LCD controller reset sequence
 80005b2:	2014      	movs	r0, #20
 80005b4:	f000 fa58 	bl	8000a68 <HAL_Delay>
    LCD_nibble_write(0x30, GPIO_PIN_RESET);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2030      	movs	r0, #48	; 0x30
 80005bc:	f000 f832 	bl	8000624 <LCD_nibble_write>
    HAL_Delay(5);
 80005c0:	2005      	movs	r0, #5
 80005c2:	f000 fa51 	bl	8000a68 <HAL_Delay>
    LCD_nibble_write(0x30, GPIO_PIN_RESET);
 80005c6:	2100      	movs	r1, #0
 80005c8:	2030      	movs	r0, #48	; 0x30
 80005ca:	f000 f82b 	bl	8000624 <LCD_nibble_write>
    HAL_Delay(1);
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fa4a 	bl	8000a68 <HAL_Delay>
    LCD_nibble_write(0x30, GPIO_PIN_RESET);
 80005d4:	2100      	movs	r1, #0
 80005d6:	2030      	movs	r0, #48	; 0x30
 80005d8:	f000 f824 	bl	8000624 <LCD_nibble_write>
    HAL_Delay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fa43 	bl	8000a68 <HAL_Delay>
    LCD_nibble_write(0x20, GPIO_PIN_RESET); // Use 4-bit data mode
 80005e2:	2100      	movs	r1, #0
 80005e4:	2020      	movs	r0, #32
 80005e6:	f000 f81d 	bl	8000624 <LCD_nibble_write>
    HAL_Delay(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f000 fa3c 	bl	8000a68 <HAL_Delay>
    LCD_command(0x28); // Set 4-bit data, 2-line, 5x7 font
 80005f0:	2028      	movs	r0, #40	; 0x28
 80005f2:	f000 f849 	bl	8000688 <LCD_command>
    LCD_command(0x06); // Move cursor right
 80005f6:	2006      	movs	r0, #6
 80005f8:	f000 f846 	bl	8000688 <LCD_command>
    LCD_command(0x01); // Clear screen, move cursor to home
 80005fc:	2001      	movs	r0, #1
 80005fe:	f000 f843 	bl	8000688 <LCD_command>
    LCD_command(0x0C); // Turn on display, cursor off
 8000602:	200c      	movs	r0, #12
 8000604:	f000 f840 	bl	8000688 <LCD_command>
    HAL_Delay(2);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 fa2d 	bl	8000a68 <HAL_Delay>
}
 800060e:	bf00      	nop
 8000610:	3720      	adds	r7, #32
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40020000 	.word	0x40020000
 8000620:	40020800 	.word	0x40020800

08000624 <LCD_nibble_write>:

void LCD_nibble_write(uint8_t data, uint8_t control) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET); // Reset PC4-PC7 data bits
 8000634:	2200      	movs	r2, #0
 8000636:	21f0      	movs	r1, #240	; 0xf0
 8000638:	4811      	ldr	r0, [pc, #68]	; (8000680 <LCD_nibble_write+0x5c>)
 800063a:	f000 fcb3 	bl	8000fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, (data & 0xF0), GPIO_PIN_SET); // Set data bits 4-7
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	b29b      	uxth	r3, r3
 8000642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000646:	b29b      	uxth	r3, r3
 8000648:	2201      	movs	r2, #1
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <LCD_nibble_write+0x5c>)
 800064e:	f000 fca9 	bl	8000fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, RS, control); // RS control
 8000652:	79bb      	ldrb	r3, [r7, #6]
 8000654:	461a      	mov	r2, r3
 8000656:	2120      	movs	r1, #32
 8000658:	480a      	ldr	r0, [pc, #40]	; (8000684 <LCD_nibble_write+0x60>)
 800065a:	f000 fca3 	bl	8000fa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, EN, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <LCD_nibble_write+0x60>)
 8000664:	f000 fc9e 	bl	8000fa4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000668:	2001      	movs	r0, #1
 800066a:	f000 f9fd 	bl	8000a68 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, EN, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4804      	ldr	r0, [pc, #16]	; (8000684 <LCD_nibble_write+0x60>)
 8000674:	f000 fc96 	bl	8000fa4 <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40020800 	.word	0x40020800
 8000684:	40020000 	.word	0x40020000

08000688 <LCD_command>:

void LCD_command(uint8_t command) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
    LCD_nibble_write(command & 0xF0, GPIO_PIN_RESET); // Upper nibble first
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f023 030f 	bic.w	r3, r3, #15
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ffc1 	bl	8000624 <LCD_nibble_write>
    LCD_nibble_write(command << 4, GPIO_PIN_RESET); // Then lower nibble
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	011b      	lsls	r3, r3, #4
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffba 	bl	8000624 <LCD_nibble_write>
    HAL_Delay(command < 4 ? 2 : 1); // Commands 1 and 2 need up to 1.64ms
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d801      	bhi.n	80006ba <LCD_command+0x32>
 80006b6:	2302      	movs	r3, #2
 80006b8:	e000      	b.n	80006bc <LCD_command+0x34>
 80006ba:	2301      	movs	r3, #1
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f9d3 	bl	8000a68 <HAL_Delay>
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <LCD_data>:

void LCD_data(uint8_t data) {
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	4603      	mov	r3, r0
 80006d2:	71fb      	strb	r3, [r7, #7]
    LCD_nibble_write(data & 0xF0, GPIO_PIN_SET); // Upper nibble first
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	f023 030f 	bic.w	r3, r3, #15
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ffa0 	bl	8000624 <LCD_nibble_write>
    LCD_nibble_write(data << 4, GPIO_PIN_SET); // Then lower nibble
 80006e4:	79fb      	ldrb	r3, [r7, #7]
 80006e6:	011b      	lsls	r3, r3, #4
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2101      	movs	r1, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff99 	bl	8000624 <LCD_nibble_write>
    HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 f9b8 	bl	8000a68 <HAL_Delay>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <LCD_string>:

void LCD_string(char str[]) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 16 && str[i] != '\0'; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e009      	b.n	8000722 <LCD_string+0x22>
        LCD_data((uint8_t)str[i]);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	4413      	add	r3, r2
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ffd7 	bl	80006ca <LCD_data>
    for (int i = 0; i < 16 && str[i] != '\0'; i++) {
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2b0f      	cmp	r3, #15
 8000726:	dc05      	bgt.n	8000734 <LCD_string+0x34>
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1ec      	bne.n	800070e <LCD_string+0xe>
    }
}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <BCDtoDecimal>:

int BCDtoDecimal(int BCD) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return (((BCD >> 4) * 10) + (BCD & 0x0F));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	111a      	asrs	r2, r3, #4
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	461a      	mov	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f003 030f 	and.w	r3, r3, #15
 8000758:	4413      	add	r3, r2
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <Error_Handler>:

void Error_Handler(void) {
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
    // Implement error handling
    while (1);
 800076a:	e7fe      	b.n	800076a <Error_Handler+0x4>

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <HAL_MspInit+0x4c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a0f      	ldr	r2, [pc, #60]	; (80007b8 <HAL_MspInit+0x4c>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <HAL_MspInit+0x4c>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x4c>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x4c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x4c>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007aa:	2007      	movs	r0, #7
 80007ac:	f000 fa32 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	; 0x28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a19      	ldr	r2, [pc, #100]	; (8000840 <HAL_I2C_MspInit+0x84>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d12c      	bne.n	8000838 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <HAL_I2C_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <HAL_I2C_MspInit+0x88>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <HAL_I2C_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000800:	2312      	movs	r3, #18
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800080c:	2304      	movs	r3, #4
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	480c      	ldr	r0, [pc, #48]	; (8000848 <HAL_I2C_MspInit+0x8c>)
 8000818:	f000 fa30 	bl	8000c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <HAL_I2C_MspInit+0x88>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	4a07      	ldr	r2, [pc, #28]	; (8000844 <HAL_I2C_MspInit+0x88>)
 8000826:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800082a:	6413      	str	r3, [r2, #64]	; 0x40
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_I2C_MspInit+0x88>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000838:	bf00      	nop
 800083a:	3728      	adds	r7, #40	; 0x28
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40005400 	.word	0x40005400
 8000844:	40023800 	.word	0x40023800
 8000848:	40020400 	.word	0x40020400

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <MemManage_Handler+0x4>

0800085e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <BusFault_Handler+0x4>

08000864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <UsageFault_Handler+0x4>

0800086a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 f8c6 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	; (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	; (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	; (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4413      	add	r3, r2
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f001 fb62 	bl	8001f98 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	; (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <_sbrk+0x64>)
 80008f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20020000 	.word	0x20020000
 8000900:	00000400 	.word	0x00000400
 8000904:	200000e8 	.word	0x200000e8
 8000908:	20000100 	.word	0x20000100

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000936:	490e      	ldr	r1, [pc, #56]	; (8000970 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800094c:	4c0b      	ldr	r4, [pc, #44]	; (800097c <LoopFillZerobss+0x26>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800095a:	f7ff ffd7 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f001 fb21 	bl	8001fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000962:	f7ff fca5 	bl	80002b0 <main>
  bx  lr    
 8000966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000974:	080029b4 	.word	0x080029b4
  ldr r2, =_sbss
 8000978:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800097c:	20000100 	.word	0x20000100

08000980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <HAL_Init+0x40>)
 800098e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_Init+0x40>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x40>)
 80009a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f931 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff fed8 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023c00 	.word	0x40023c00

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f93b 	bl	8000c62 <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a04:	f000 f911 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200000ec 	.word	0x200000ec

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000ec 	.word	0x200000ec

08000a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff ffee 	bl	8000a50 <HAL_GetTick>
 8000a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a8e:	bf00      	nop
 8000a90:	f7ff ffde 	bl	8000a50 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff47 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff5c 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff8e 	bl	8000b68 <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffb0 	bl	8000bd0 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	; 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	e165      	b.n	8000f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f040 8154 	bne.w	8000f5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d005      	beq.n	8000cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d130      	bne.n	8000d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	f003 0201 	and.w	r2, r3, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d017      	beq.n	8000d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d123      	bne.n	8000dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	691a      	ldr	r2, [r3, #16]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	69b9      	ldr	r1, [r7, #24]
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0203 	and.w	r2, r3, #3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 80ae 	beq.w	8000f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b5d      	ldr	r3, [pc, #372]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	4a5c      	ldr	r2, [pc, #368]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	; 0x44
 8000e12:	4b5a      	ldr	r3, [pc, #360]	; (8000f7c <HAL_GPIO_Init+0x300>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1e:	4a58      	ldr	r2, [pc, #352]	; (8000f80 <HAL_GPIO_Init+0x304>)
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_GPIO_Init+0x308>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d025      	beq.n	8000e96 <HAL_GPIO_Init+0x21a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4e      	ldr	r2, [pc, #312]	; (8000f88 <HAL_GPIO_Init+0x30c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01f      	beq.n	8000e92 <HAL_GPIO_Init+0x216>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4d      	ldr	r2, [pc, #308]	; (8000f8c <HAL_GPIO_Init+0x310>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d019      	beq.n	8000e8e <HAL_GPIO_Init+0x212>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <HAL_GPIO_Init+0x314>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <HAL_GPIO_Init+0x318>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x20a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x31c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x206>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <HAL_GPIO_Init+0x320>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x202>
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	e00c      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e7e:	2307      	movs	r3, #7
 8000e80:	e00a      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e008      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e004      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e96:	2300      	movs	r3, #0
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	f002 0203 	and.w	r2, r2, #3
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4093      	lsls	r3, r2
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea8:	4935      	ldr	r1, [pc, #212]	; (8000f80 <HAL_GPIO_Init+0x304>)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eda:	4a31      	ldr	r2, [pc, #196]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f04:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0a:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f58:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	f67f ae96 	bls.w	8000c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e12b      	b.n	8001242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fbdc 	bl	80007bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2224      	movs	r2, #36	; 0x24
 8001008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800102a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800103a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800103c:	f000 ff98 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8001040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a81      	ldr	r2, [pc, #516]	; (800124c <HAL_I2C_Init+0x274>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d807      	bhi.n	800105c <HAL_I2C_Init+0x84>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a80      	ldr	r2, [pc, #512]	; (8001250 <HAL_I2C_Init+0x278>)
 8001050:	4293      	cmp	r3, r2
 8001052:	bf94      	ite	ls
 8001054:	2301      	movls	r3, #1
 8001056:	2300      	movhi	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	e006      	b.n	800106a <HAL_I2C_Init+0x92>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4a7d      	ldr	r2, [pc, #500]	; (8001254 <HAL_I2C_Init+0x27c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	bf94      	ite	ls
 8001064:	2301      	movls	r3, #1
 8001066:	2300      	movhi	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0e7      	b.n	8001242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a78      	ldr	r2, [pc, #480]	; (8001258 <HAL_I2C_Init+0x280>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	430a      	orrs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a6a      	ldr	r2, [pc, #424]	; (800124c <HAL_I2C_Init+0x274>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d802      	bhi.n	80010ac <HAL_I2C_Init+0xd4>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	e009      	b.n	80010c0 <HAL_I2C_Init+0xe8>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	4a69      	ldr	r2, [pc, #420]	; (800125c <HAL_I2C_Init+0x284>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	3301      	adds	r3, #1
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	495c      	ldr	r1, [pc, #368]	; (800124c <HAL_I2C_Init+0x274>)
 80010dc:	428b      	cmp	r3, r1
 80010de:	d819      	bhi.n	8001114 <HAL_I2C_Init+0x13c>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e59      	subs	r1, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010f4:	400b      	ands	r3, r1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <HAL_I2C_Init+0x138>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1e59      	subs	r1, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fbb1 f3f3 	udiv	r3, r1, r3
 8001108:	3301      	adds	r3, #1
 800110a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110e:	e051      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 8001110:	2304      	movs	r3, #4
 8001112:	e04f      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d111      	bne.n	8001140 <HAL_I2C_Init+0x168>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1e58      	subs	r0, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6859      	ldr	r1, [r3, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	440b      	add	r3, r1
 800112a:	fbb0 f3f3 	udiv	r3, r0, r3
 800112e:	3301      	adds	r3, #1
 8001130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	e012      	b.n	8001166 <HAL_I2C_Init+0x18e>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e58      	subs	r0, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	0099      	lsls	r1, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	fbb0 f3f3 	udiv	r3, r0, r3
 8001156:	3301      	adds	r3, #1
 8001158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf0c      	ite	eq
 8001160:	2301      	moveq	r3, #1
 8001162:	2300      	movne	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_Init+0x196>
 800116a:	2301      	movs	r3, #1
 800116c:	e022      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10e      	bne.n	8001194 <HAL_I2C_Init+0x1bc>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1e58      	subs	r0, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6859      	ldr	r1, [r3, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	440b      	add	r3, r1
 8001184:	fbb0 f3f3 	udiv	r3, r0, r3
 8001188:	3301      	adds	r3, #1
 800118a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800118e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001192:	e00f      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1e58      	subs	r0, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	0099      	lsls	r1, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	6809      	ldr	r1, [r1, #0]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69da      	ldr	r2, [r3, #28]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6911      	ldr	r1, [r2, #16]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68d2      	ldr	r2, [r2, #12]
 80011ee:	4311      	orrs	r1, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	000186a0 	.word	0x000186a0
 8001250:	001e847f 	.word	0x001e847f
 8001254:	003d08ff 	.word	0x003d08ff
 8001258:	431bde83 	.word	0x431bde83
 800125c:	10624dd3 	.word	0x10624dd3

08001260 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af02      	add	r7, sp, #8
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	4608      	mov	r0, r1
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	4603      	mov	r3, r0
 8001270:	817b      	strh	r3, [r7, #10]
 8001272:	460b      	mov	r3, r1
 8001274:	813b      	strh	r3, [r7, #8]
 8001276:	4613      	mov	r3, r2
 8001278:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800127a:	f7ff fbe9 	bl	8000a50 <HAL_GetTick>
 800127e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b20      	cmp	r3, #32
 800128a:	f040 80d9 	bne.w	8001440 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2319      	movs	r3, #25
 8001294:	2201      	movs	r2, #1
 8001296:	496d      	ldr	r1, [pc, #436]	; (800144c <HAL_I2C_Mem_Write+0x1ec>)
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f000 fc7f 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012a4:	2302      	movs	r3, #2
 80012a6:	e0cc      	b.n	8001442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d101      	bne.n	80012b6 <HAL_I2C_Mem_Write+0x56>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e0c5      	b.n	8001442 <HAL_I2C_Mem_Write+0x1e2>
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d007      	beq.n	80012dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0201 	orr.w	r2, r2, #1
 80012da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2221      	movs	r2, #33	; 0x21
 80012f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2240      	movs	r2, #64	; 0x40
 80012f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a3a      	ldr	r2, [r7, #32]
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800130c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a4d      	ldr	r2, [pc, #308]	; (8001450 <HAL_I2C_Mem_Write+0x1f0>)
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800131e:	88f8      	ldrh	r0, [r7, #6]
 8001320:	893a      	ldrh	r2, [r7, #8]
 8001322:	8979      	ldrh	r1, [r7, #10]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	4603      	mov	r3, r0
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 fab6 	bl	80018a0 <I2C_RequestMemoryWrite>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d052      	beq.n	80013e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e081      	b.n	8001442 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800133e:	697a      	ldr	r2, [r7, #20]
 8001340:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fd00 	bl	8001d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00d      	beq.n	800136a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	2b04      	cmp	r3, #4
 8001354:	d107      	bne.n	8001366 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001364:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e06b      	b.n	8001442 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	781a      	ldrb	r2, [r3, #0]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001384:	3b01      	subs	r3, #1
 8001386:	b29a      	uxth	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001390:	b29b      	uxth	r3, r3
 8001392:	3b01      	subs	r3, #1
 8001394:	b29a      	uxth	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d11b      	bne.n	80013e0 <HAL_I2C_Mem_Write+0x180>
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d017      	beq.n	80013e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	781a      	ldrb	r2, [r3, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	1c5a      	adds	r2, r3, #1
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ca:	3b01      	subs	r3, #1
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3b01      	subs	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1aa      	bne.n	800133e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 fcec 	bl	8001dca <I2C_WaitOnBTFFlagUntilTimeout>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00d      	beq.n	8001414 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d107      	bne.n	8001410 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800140e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e016      	b.n	8001442 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2220      	movs	r2, #32
 8001428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	e000      	b.n	8001442 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001440:	2302      	movs	r3, #2
  }
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	00100002 	.word	0x00100002
 8001450:	ffff0000 	.word	0xffff0000

08001454 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08c      	sub	sp, #48	; 0x30
 8001458:	af02      	add	r7, sp, #8
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	4608      	mov	r0, r1
 800145e:	4611      	mov	r1, r2
 8001460:	461a      	mov	r2, r3
 8001462:	4603      	mov	r3, r0
 8001464:	817b      	strh	r3, [r7, #10]
 8001466:	460b      	mov	r3, r1
 8001468:	813b      	strh	r3, [r7, #8]
 800146a:	4613      	mov	r3, r2
 800146c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800146e:	f7ff faef 	bl	8000a50 <HAL_GetTick>
 8001472:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b20      	cmp	r3, #32
 800147e:	f040 8208 	bne.w	8001892 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2319      	movs	r3, #25
 8001488:	2201      	movs	r2, #1
 800148a:	497b      	ldr	r1, [pc, #492]	; (8001678 <HAL_I2C_Mem_Read+0x224>)
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 fb85 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001498:	2302      	movs	r3, #2
 800149a:	e1fb      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_I2C_Mem_Read+0x56>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e1f4      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d007      	beq.n	80014d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2222      	movs	r2, #34	; 0x22
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001506:	b29a      	uxth	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4a5b      	ldr	r2, [pc, #364]	; (800167c <HAL_I2C_Mem_Read+0x228>)
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001512:	88f8      	ldrh	r0, [r7, #6]
 8001514:	893a      	ldrh	r2, [r7, #8]
 8001516:	8979      	ldrh	r1, [r7, #10]
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	4603      	mov	r3, r0
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	f000 fa52 	bl	80019cc <I2C_RequestMemoryRead>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e1b0      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	2b00      	cmp	r3, #0
 8001538:	d113      	bne.n	8001562 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	623b      	str	r3, [r7, #32]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	623b      	str	r3, [r7, #32]
 800154e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e184      	b.n	800186c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001566:	2b01      	cmp	r3, #1
 8001568:	d11b      	bne.n	80015a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001578:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e164      	b.n	800186c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d11b      	bne.n	80015e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	61bb      	str	r3, [r7, #24]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	e144      	b.n	800186c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80015f8:	e138      	b.n	800186c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	2b03      	cmp	r3, #3
 8001600:	f200 80f1 	bhi.w	80017e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	2b01      	cmp	r3, #1
 800160a:	d123      	bne.n	8001654 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fc1b 	bl	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e139      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001652:	e10b      	b.n	800186c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	2b02      	cmp	r3, #2
 800165a:	d14e      	bne.n	80016fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001662:	2200      	movs	r2, #0
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <HAL_I2C_Mem_Read+0x22c>)
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 fa98 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e10e      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
 8001676:	bf00      	nop
 8001678:	00100002 	.word	0x00100002
 800167c:	ffff0000 	.word	0xffff0000
 8001680:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001692:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b0:	3b01      	subs	r3, #1
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016bc:	b29b      	uxth	r3, r3
 80016be:	3b01      	subs	r3, #1
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d0:	b2d2      	uxtb	r2, r2
 80016d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016f8:	e0b8      	b.n	800186c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001700:	2200      	movs	r2, #0
 8001702:	4966      	ldr	r1, [pc, #408]	; (800189c <HAL_I2C_Mem_Read+0x448>)
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fa49 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e0bf      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	3b01      	subs	r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800175c:	2200      	movs	r2, #0
 800175e:	494f      	ldr	r1, [pc, #316]	; (800189c <HAL_I2C_Mem_Read+0x448>)
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 fa1b 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e091      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	691a      	ldr	r2, [r3, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	3b01      	subs	r3, #1
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017e4:	e042      	b.n	800186c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fb2e 	bl	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e04c      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	3b01      	subs	r3, #1
 8001818:	b29a      	uxth	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001822:	b29b      	uxth	r3, r3
 8001824:	3b01      	subs	r3, #1
 8001826:	b29a      	uxth	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b04      	cmp	r3, #4
 8001838:	d118      	bne.n	800186c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	1c5a      	adds	r2, r3, #1
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001856:	3b01      	subs	r3, #1
 8001858:	b29a      	uxth	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	2b00      	cmp	r3, #0
 8001872:	f47f aec2 	bne.w	80015fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2220      	movs	r2, #32
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
  }
}
 8001894:	4618      	mov	r0, r3
 8001896:	3728      	adds	r7, #40	; 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	00010004 	.word	0x00010004

080018a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	4608      	mov	r0, r1
 80018aa:	4611      	mov	r1, r2
 80018ac:	461a      	mov	r2, r3
 80018ae:	4603      	mov	r3, r0
 80018b0:	817b      	strh	r3, [r7, #10]
 80018b2:	460b      	mov	r3, r1
 80018b4:	813b      	strh	r3, [r7, #8]
 80018b6:	4613      	mov	r3, r2
 80018b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 f960 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00d      	beq.n	80018fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f0:	d103      	bne.n	80018fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e05f      	b.n	80019be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018fe:	897b      	ldrh	r3, [r7, #10]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800190c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	6a3a      	ldr	r2, [r7, #32]
 8001912:	492d      	ldr	r1, [pc, #180]	; (80019c8 <I2C_RequestMemoryWrite+0x128>)
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 f998 	bl	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e04c      	b.n	80019be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800193a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800193c:	6a39      	ldr	r1, [r7, #32]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fa02 	bl	8001d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b04      	cmp	r3, #4
 8001950:	d107      	bne.n	8001962 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e02b      	b.n	80019be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d105      	bne.n	8001978 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800196c:	893b      	ldrh	r3, [r7, #8]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	e021      	b.n	80019bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001978:	893b      	ldrh	r3, [r7, #8]
 800197a:	0a1b      	lsrs	r3, r3, #8
 800197c:	b29b      	uxth	r3, r3
 800197e:	b2da      	uxtb	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001988:	6a39      	ldr	r1, [r7, #32]
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 f9dc 	bl	8001d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00d      	beq.n	80019b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b04      	cmp	r3, #4
 800199c:	d107      	bne.n	80019ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e005      	b.n	80019be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	00010002 	.word	0x00010002

080019cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	817b      	strh	r3, [r7, #10]
 80019de:	460b      	mov	r3, r1
 80019e0:	813b      	strh	r3, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80019f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	6a3b      	ldr	r3, [r7, #32]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f8c2 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00d      	beq.n	8001a3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2c:	d103      	bne.n	8001a36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e0aa      	b.n	8001b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001a3a:	897b      	ldrh	r3, [r7, #10]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461a      	mov	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001a48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	6a3a      	ldr	r2, [r7, #32]
 8001a4e:	4952      	ldr	r1, [pc, #328]	; (8001b98 <I2C_RequestMemoryRead+0x1cc>)
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 f8fa 	bl	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e097      	b.n	8001b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a78:	6a39      	ldr	r1, [r7, #32]
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f964 	bl	8001d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00d      	beq.n	8001aa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d107      	bne.n	8001a9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e076      	b.n	8001b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	e021      	b.n	8001af8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ab4:	893b      	ldrh	r3, [r7, #8]
 8001ab6:	0a1b      	lsrs	r3, r3, #8
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac4:	6a39      	ldr	r1, [r7, #32]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 f93e 	bl	8001d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00d      	beq.n	8001aee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d107      	bne.n	8001aea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ae8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e050      	b.n	8001b90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001aee:	893b      	ldrh	r3, [r7, #8]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f923 	bl	8001d48 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00d      	beq.n	8001b24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e035      	b.n	8001b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 f82b 	bl	8001b9c <I2C_WaitOnFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00d      	beq.n	8001b68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b5a:	d103      	bne.n	8001b64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e013      	b.n	8001b90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001b68:	897b      	ldrh	r3, [r7, #10]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	6a3a      	ldr	r2, [r7, #32]
 8001b7c:	4906      	ldr	r1, [pc, #24]	; (8001b98 <I2C_RequestMemoryRead+0x1cc>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f863 	bl	8001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	00010002 	.word	0x00010002

08001b9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bac:	e025      	b.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bb4:	d021      	beq.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7fe ff4b 	bl	8000a50 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d116      	bne.n	8001bfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f043 0220 	orr.w	r2, r3, #32
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e023      	b.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	0c1b      	lsrs	r3, r3, #16
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d10d      	bne.n	8001c20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf0c      	ite	eq
 8001c16:	2301      	moveq	r3, #1
 8001c18:	2300      	movne	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	e00c      	b.n	8001c3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d0b6      	beq.n	8001bae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b084      	sub	sp, #16
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c58:	e051      	b.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c68:	d123      	bne.n	8001cb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f043 0204 	orr.w	r2, r3, #4
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e046      	b.n	8001d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cb8:	d021      	beq.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cba:	f7fe fec9 	bl	8000a50 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d302      	bcc.n	8001cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d116      	bne.n	8001cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f043 0220 	orr.w	r2, r3, #32
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e020      	b.n	8001d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d10c      	bne.n	8001d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	43da      	mvns	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4013      	ands	r3, r2
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	bf14      	ite	ne
 8001d1a:	2301      	movne	r3, #1
 8001d1c:	2300      	moveq	r3, #0
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	e00b      	b.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	43da      	mvns	r2, r3
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d18d      	bne.n	8001c5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d54:	e02d      	b.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 f8ce 	bl	8001ef8 <I2C_IsAcknowledgeFailed>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e02d      	b.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d6c:	d021      	beq.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7fe fe6f 	bl	8000a50 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	68ba      	ldr	r2, [r7, #8]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2220      	movs	r2, #32
 8001d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f043 0220 	orr.w	r2, r3, #32
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b80      	cmp	r3, #128	; 0x80
 8001dbe:	d1ca      	bne.n	8001d56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dd6:	e02d      	b.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f000 f88d 	bl	8001ef8 <I2C_IsAcknowledgeFailed>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e02d      	b.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dee:	d021      	beq.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df0:	f7fe fe2e 	bl	8000a50 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d302      	bcc.n	8001e06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d116      	bne.n	8001e34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e007      	b.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f003 0304 	and.w	r3, r3, #4
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d1ca      	bne.n	8001dd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e58:	e042      	b.n	8001ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d119      	bne.n	8001e9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0210 	mvn.w	r2, #16
 8001e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e029      	b.n	8001ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9c:	f7fe fdd8 	bl	8000a50 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d302      	bcc.n	8001eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d116      	bne.n	8001ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f043 0220 	orr.w	r2, r3, #32
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e007      	b.n	8001ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b40      	cmp	r3, #64	; 0x40
 8001eec:	d1b5      	bne.n	8001e5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d11b      	bne.n	8001f48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f043 0204 	orr.w	r2, r3, #4
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e000      	b.n	8001f4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000000 	.word	0x20000000

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f74:	f7ff fff0 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4903      	ldr	r1, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08002970 	.word	0x08002970

08001f98 <__errno>:
 8001f98:	4b01      	ldr	r3, [pc, #4]	; (8001fa0 <__errno+0x8>)
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	2000000c 	.word	0x2000000c

08001fa4 <__libc_init_array>:
 8001fa4:	b570      	push	{r4, r5, r6, lr}
 8001fa6:	4d0d      	ldr	r5, [pc, #52]	; (8001fdc <__libc_init_array+0x38>)
 8001fa8:	4c0d      	ldr	r4, [pc, #52]	; (8001fe0 <__libc_init_array+0x3c>)
 8001faa:	1b64      	subs	r4, r4, r5
 8001fac:	10a4      	asrs	r4, r4, #2
 8001fae:	2600      	movs	r6, #0
 8001fb0:	42a6      	cmp	r6, r4
 8001fb2:	d109      	bne.n	8001fc8 <__libc_init_array+0x24>
 8001fb4:	4d0b      	ldr	r5, [pc, #44]	; (8001fe4 <__libc_init_array+0x40>)
 8001fb6:	4c0c      	ldr	r4, [pc, #48]	; (8001fe8 <__libc_init_array+0x44>)
 8001fb8:	f000 fc9a 	bl	80028f0 <_init>
 8001fbc:	1b64      	subs	r4, r4, r5
 8001fbe:	10a4      	asrs	r4, r4, #2
 8001fc0:	2600      	movs	r6, #0
 8001fc2:	42a6      	cmp	r6, r4
 8001fc4:	d105      	bne.n	8001fd2 <__libc_init_array+0x2e>
 8001fc6:	bd70      	pop	{r4, r5, r6, pc}
 8001fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fcc:	4798      	blx	r3
 8001fce:	3601      	adds	r6, #1
 8001fd0:	e7ee      	b.n	8001fb0 <__libc_init_array+0xc>
 8001fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fd6:	4798      	blx	r3
 8001fd8:	3601      	adds	r6, #1
 8001fda:	e7f2      	b.n	8001fc2 <__libc_init_array+0x1e>
 8001fdc:	080029ac 	.word	0x080029ac
 8001fe0:	080029ac 	.word	0x080029ac
 8001fe4:	080029ac 	.word	0x080029ac
 8001fe8:	080029b0 	.word	0x080029b0

08001fec <sniprintf>:
 8001fec:	b40c      	push	{r2, r3}
 8001fee:	b530      	push	{r4, r5, lr}
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <sniprintf+0x64>)
 8001ff2:	1e0c      	subs	r4, r1, #0
 8001ff4:	681d      	ldr	r5, [r3, #0]
 8001ff6:	b09d      	sub	sp, #116	; 0x74
 8001ff8:	da08      	bge.n	800200c <sniprintf+0x20>
 8001ffa:	238b      	movs	r3, #139	; 0x8b
 8001ffc:	602b      	str	r3, [r5, #0]
 8001ffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002002:	b01d      	add	sp, #116	; 0x74
 8002004:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002008:	b002      	add	sp, #8
 800200a:	4770      	bx	lr
 800200c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002010:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002014:	bf14      	ite	ne
 8002016:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800201a:	4623      	moveq	r3, r4
 800201c:	9304      	str	r3, [sp, #16]
 800201e:	9307      	str	r3, [sp, #28]
 8002020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002024:	9002      	str	r0, [sp, #8]
 8002026:	9006      	str	r0, [sp, #24]
 8002028:	f8ad 3016 	strh.w	r3, [sp, #22]
 800202c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800202e:	ab21      	add	r3, sp, #132	; 0x84
 8002030:	a902      	add	r1, sp, #8
 8002032:	4628      	mov	r0, r5
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	f000 f869 	bl	800210c <_svfiprintf_r>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	bfbc      	itt	lt
 800203e:	238b      	movlt	r3, #139	; 0x8b
 8002040:	602b      	strlt	r3, [r5, #0]
 8002042:	2c00      	cmp	r4, #0
 8002044:	d0dd      	beq.n	8002002 <sniprintf+0x16>
 8002046:	9b02      	ldr	r3, [sp, #8]
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e7d9      	b.n	8002002 <sniprintf+0x16>
 800204e:	bf00      	nop
 8002050:	2000000c 	.word	0x2000000c

08002054 <__ssputs_r>:
 8002054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002058:	688e      	ldr	r6, [r1, #8]
 800205a:	429e      	cmp	r6, r3
 800205c:	4682      	mov	sl, r0
 800205e:	460c      	mov	r4, r1
 8002060:	4690      	mov	r8, r2
 8002062:	461f      	mov	r7, r3
 8002064:	d838      	bhi.n	80020d8 <__ssputs_r+0x84>
 8002066:	898a      	ldrh	r2, [r1, #12]
 8002068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800206c:	d032      	beq.n	80020d4 <__ssputs_r+0x80>
 800206e:	6825      	ldr	r5, [r4, #0]
 8002070:	6909      	ldr	r1, [r1, #16]
 8002072:	eba5 0901 	sub.w	r9, r5, r1
 8002076:	6965      	ldr	r5, [r4, #20]
 8002078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800207c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002080:	3301      	adds	r3, #1
 8002082:	444b      	add	r3, r9
 8002084:	106d      	asrs	r5, r5, #1
 8002086:	429d      	cmp	r5, r3
 8002088:	bf38      	it	cc
 800208a:	461d      	movcc	r5, r3
 800208c:	0553      	lsls	r3, r2, #21
 800208e:	d531      	bpl.n	80020f4 <__ssputs_r+0xa0>
 8002090:	4629      	mov	r1, r5
 8002092:	f000 fb63 	bl	800275c <_malloc_r>
 8002096:	4606      	mov	r6, r0
 8002098:	b950      	cbnz	r0, 80020b0 <__ssputs_r+0x5c>
 800209a:	230c      	movs	r3, #12
 800209c:	f8ca 3000 	str.w	r3, [sl]
 80020a0:	89a3      	ldrh	r3, [r4, #12]
 80020a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a6:	81a3      	strh	r3, [r4, #12]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020b0:	6921      	ldr	r1, [r4, #16]
 80020b2:	464a      	mov	r2, r9
 80020b4:	f000 fabe 	bl	8002634 <memcpy>
 80020b8:	89a3      	ldrh	r3, [r4, #12]
 80020ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80020be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c2:	81a3      	strh	r3, [r4, #12]
 80020c4:	6126      	str	r6, [r4, #16]
 80020c6:	6165      	str	r5, [r4, #20]
 80020c8:	444e      	add	r6, r9
 80020ca:	eba5 0509 	sub.w	r5, r5, r9
 80020ce:	6026      	str	r6, [r4, #0]
 80020d0:	60a5      	str	r5, [r4, #8]
 80020d2:	463e      	mov	r6, r7
 80020d4:	42be      	cmp	r6, r7
 80020d6:	d900      	bls.n	80020da <__ssputs_r+0x86>
 80020d8:	463e      	mov	r6, r7
 80020da:	6820      	ldr	r0, [r4, #0]
 80020dc:	4632      	mov	r2, r6
 80020de:	4641      	mov	r1, r8
 80020e0:	f000 fab6 	bl	8002650 <memmove>
 80020e4:	68a3      	ldr	r3, [r4, #8]
 80020e6:	1b9b      	subs	r3, r3, r6
 80020e8:	60a3      	str	r3, [r4, #8]
 80020ea:	6823      	ldr	r3, [r4, #0]
 80020ec:	4433      	add	r3, r6
 80020ee:	6023      	str	r3, [r4, #0]
 80020f0:	2000      	movs	r0, #0
 80020f2:	e7db      	b.n	80020ac <__ssputs_r+0x58>
 80020f4:	462a      	mov	r2, r5
 80020f6:	f000 fba5 	bl	8002844 <_realloc_r>
 80020fa:	4606      	mov	r6, r0
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d1e1      	bne.n	80020c4 <__ssputs_r+0x70>
 8002100:	6921      	ldr	r1, [r4, #16]
 8002102:	4650      	mov	r0, sl
 8002104:	f000 fabe 	bl	8002684 <_free_r>
 8002108:	e7c7      	b.n	800209a <__ssputs_r+0x46>
	...

0800210c <_svfiprintf_r>:
 800210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002110:	4698      	mov	r8, r3
 8002112:	898b      	ldrh	r3, [r1, #12]
 8002114:	061b      	lsls	r3, r3, #24
 8002116:	b09d      	sub	sp, #116	; 0x74
 8002118:	4607      	mov	r7, r0
 800211a:	460d      	mov	r5, r1
 800211c:	4614      	mov	r4, r2
 800211e:	d50e      	bpl.n	800213e <_svfiprintf_r+0x32>
 8002120:	690b      	ldr	r3, [r1, #16]
 8002122:	b963      	cbnz	r3, 800213e <_svfiprintf_r+0x32>
 8002124:	2140      	movs	r1, #64	; 0x40
 8002126:	f000 fb19 	bl	800275c <_malloc_r>
 800212a:	6028      	str	r0, [r5, #0]
 800212c:	6128      	str	r0, [r5, #16]
 800212e:	b920      	cbnz	r0, 800213a <_svfiprintf_r+0x2e>
 8002130:	230c      	movs	r3, #12
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002138:	e0d1      	b.n	80022de <_svfiprintf_r+0x1d2>
 800213a:	2340      	movs	r3, #64	; 0x40
 800213c:	616b      	str	r3, [r5, #20]
 800213e:	2300      	movs	r3, #0
 8002140:	9309      	str	r3, [sp, #36]	; 0x24
 8002142:	2320      	movs	r3, #32
 8002144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002148:	f8cd 800c 	str.w	r8, [sp, #12]
 800214c:	2330      	movs	r3, #48	; 0x30
 800214e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80022f8 <_svfiprintf_r+0x1ec>
 8002152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002156:	f04f 0901 	mov.w	r9, #1
 800215a:	4623      	mov	r3, r4
 800215c:	469a      	mov	sl, r3
 800215e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002162:	b10a      	cbz	r2, 8002168 <_svfiprintf_r+0x5c>
 8002164:	2a25      	cmp	r2, #37	; 0x25
 8002166:	d1f9      	bne.n	800215c <_svfiprintf_r+0x50>
 8002168:	ebba 0b04 	subs.w	fp, sl, r4
 800216c:	d00b      	beq.n	8002186 <_svfiprintf_r+0x7a>
 800216e:	465b      	mov	r3, fp
 8002170:	4622      	mov	r2, r4
 8002172:	4629      	mov	r1, r5
 8002174:	4638      	mov	r0, r7
 8002176:	f7ff ff6d 	bl	8002054 <__ssputs_r>
 800217a:	3001      	adds	r0, #1
 800217c:	f000 80aa 	beq.w	80022d4 <_svfiprintf_r+0x1c8>
 8002180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002182:	445a      	add	r2, fp
 8002184:	9209      	str	r2, [sp, #36]	; 0x24
 8002186:	f89a 3000 	ldrb.w	r3, [sl]
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80a2 	beq.w	80022d4 <_svfiprintf_r+0x1c8>
 8002190:	2300      	movs	r3, #0
 8002192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800219a:	f10a 0a01 	add.w	sl, sl, #1
 800219e:	9304      	str	r3, [sp, #16]
 80021a0:	9307      	str	r3, [sp, #28]
 80021a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80021a6:	931a      	str	r3, [sp, #104]	; 0x68
 80021a8:	4654      	mov	r4, sl
 80021aa:	2205      	movs	r2, #5
 80021ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021b0:	4851      	ldr	r0, [pc, #324]	; (80022f8 <_svfiprintf_r+0x1ec>)
 80021b2:	f7fe f82d 	bl	8000210 <memchr>
 80021b6:	9a04      	ldr	r2, [sp, #16]
 80021b8:	b9d8      	cbnz	r0, 80021f2 <_svfiprintf_r+0xe6>
 80021ba:	06d0      	lsls	r0, r2, #27
 80021bc:	bf44      	itt	mi
 80021be:	2320      	movmi	r3, #32
 80021c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021c4:	0711      	lsls	r1, r2, #28
 80021c6:	bf44      	itt	mi
 80021c8:	232b      	movmi	r3, #43	; 0x2b
 80021ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80021ce:	f89a 3000 	ldrb.w	r3, [sl]
 80021d2:	2b2a      	cmp	r3, #42	; 0x2a
 80021d4:	d015      	beq.n	8002202 <_svfiprintf_r+0xf6>
 80021d6:	9a07      	ldr	r2, [sp, #28]
 80021d8:	4654      	mov	r4, sl
 80021da:	2000      	movs	r0, #0
 80021dc:	f04f 0c0a 	mov.w	ip, #10
 80021e0:	4621      	mov	r1, r4
 80021e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021e6:	3b30      	subs	r3, #48	; 0x30
 80021e8:	2b09      	cmp	r3, #9
 80021ea:	d94e      	bls.n	800228a <_svfiprintf_r+0x17e>
 80021ec:	b1b0      	cbz	r0, 800221c <_svfiprintf_r+0x110>
 80021ee:	9207      	str	r2, [sp, #28]
 80021f0:	e014      	b.n	800221c <_svfiprintf_r+0x110>
 80021f2:	eba0 0308 	sub.w	r3, r0, r8
 80021f6:	fa09 f303 	lsl.w	r3, r9, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	9304      	str	r3, [sp, #16]
 80021fe:	46a2      	mov	sl, r4
 8002200:	e7d2      	b.n	80021a8 <_svfiprintf_r+0x9c>
 8002202:	9b03      	ldr	r3, [sp, #12]
 8002204:	1d19      	adds	r1, r3, #4
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	9103      	str	r1, [sp, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	bfbb      	ittet	lt
 800220e:	425b      	neglt	r3, r3
 8002210:	f042 0202 	orrlt.w	r2, r2, #2
 8002214:	9307      	strge	r3, [sp, #28]
 8002216:	9307      	strlt	r3, [sp, #28]
 8002218:	bfb8      	it	lt
 800221a:	9204      	strlt	r2, [sp, #16]
 800221c:	7823      	ldrb	r3, [r4, #0]
 800221e:	2b2e      	cmp	r3, #46	; 0x2e
 8002220:	d10c      	bne.n	800223c <_svfiprintf_r+0x130>
 8002222:	7863      	ldrb	r3, [r4, #1]
 8002224:	2b2a      	cmp	r3, #42	; 0x2a
 8002226:	d135      	bne.n	8002294 <_svfiprintf_r+0x188>
 8002228:	9b03      	ldr	r3, [sp, #12]
 800222a:	1d1a      	adds	r2, r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	9203      	str	r2, [sp, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	bfb8      	it	lt
 8002234:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002238:	3402      	adds	r4, #2
 800223a:	9305      	str	r3, [sp, #20]
 800223c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002308 <_svfiprintf_r+0x1fc>
 8002240:	7821      	ldrb	r1, [r4, #0]
 8002242:	2203      	movs	r2, #3
 8002244:	4650      	mov	r0, sl
 8002246:	f7fd ffe3 	bl	8000210 <memchr>
 800224a:	b140      	cbz	r0, 800225e <_svfiprintf_r+0x152>
 800224c:	2340      	movs	r3, #64	; 0x40
 800224e:	eba0 000a 	sub.w	r0, r0, sl
 8002252:	fa03 f000 	lsl.w	r0, r3, r0
 8002256:	9b04      	ldr	r3, [sp, #16]
 8002258:	4303      	orrs	r3, r0
 800225a:	3401      	adds	r4, #1
 800225c:	9304      	str	r3, [sp, #16]
 800225e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002262:	4826      	ldr	r0, [pc, #152]	; (80022fc <_svfiprintf_r+0x1f0>)
 8002264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002268:	2206      	movs	r2, #6
 800226a:	f7fd ffd1 	bl	8000210 <memchr>
 800226e:	2800      	cmp	r0, #0
 8002270:	d038      	beq.n	80022e4 <_svfiprintf_r+0x1d8>
 8002272:	4b23      	ldr	r3, [pc, #140]	; (8002300 <_svfiprintf_r+0x1f4>)
 8002274:	bb1b      	cbnz	r3, 80022be <_svfiprintf_r+0x1b2>
 8002276:	9b03      	ldr	r3, [sp, #12]
 8002278:	3307      	adds	r3, #7
 800227a:	f023 0307 	bic.w	r3, r3, #7
 800227e:	3308      	adds	r3, #8
 8002280:	9303      	str	r3, [sp, #12]
 8002282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002284:	4433      	add	r3, r6
 8002286:	9309      	str	r3, [sp, #36]	; 0x24
 8002288:	e767      	b.n	800215a <_svfiprintf_r+0x4e>
 800228a:	fb0c 3202 	mla	r2, ip, r2, r3
 800228e:	460c      	mov	r4, r1
 8002290:	2001      	movs	r0, #1
 8002292:	e7a5      	b.n	80021e0 <_svfiprintf_r+0xd4>
 8002294:	2300      	movs	r3, #0
 8002296:	3401      	adds	r4, #1
 8002298:	9305      	str	r3, [sp, #20]
 800229a:	4619      	mov	r1, r3
 800229c:	f04f 0c0a 	mov.w	ip, #10
 80022a0:	4620      	mov	r0, r4
 80022a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022a6:	3a30      	subs	r2, #48	; 0x30
 80022a8:	2a09      	cmp	r2, #9
 80022aa:	d903      	bls.n	80022b4 <_svfiprintf_r+0x1a8>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0c5      	beq.n	800223c <_svfiprintf_r+0x130>
 80022b0:	9105      	str	r1, [sp, #20]
 80022b2:	e7c3      	b.n	800223c <_svfiprintf_r+0x130>
 80022b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80022b8:	4604      	mov	r4, r0
 80022ba:	2301      	movs	r3, #1
 80022bc:	e7f0      	b.n	80022a0 <_svfiprintf_r+0x194>
 80022be:	ab03      	add	r3, sp, #12
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	462a      	mov	r2, r5
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <_svfiprintf_r+0x1f8>)
 80022c6:	a904      	add	r1, sp, #16
 80022c8:	4638      	mov	r0, r7
 80022ca:	f3af 8000 	nop.w
 80022ce:	1c42      	adds	r2, r0, #1
 80022d0:	4606      	mov	r6, r0
 80022d2:	d1d6      	bne.n	8002282 <_svfiprintf_r+0x176>
 80022d4:	89ab      	ldrh	r3, [r5, #12]
 80022d6:	065b      	lsls	r3, r3, #25
 80022d8:	f53f af2c 	bmi.w	8002134 <_svfiprintf_r+0x28>
 80022dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022de:	b01d      	add	sp, #116	; 0x74
 80022e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022e4:	ab03      	add	r3, sp, #12
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	462a      	mov	r2, r5
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <_svfiprintf_r+0x1f8>)
 80022ec:	a904      	add	r1, sp, #16
 80022ee:	4638      	mov	r0, r7
 80022f0:	f000 f87a 	bl	80023e8 <_printf_i>
 80022f4:	e7eb      	b.n	80022ce <_svfiprintf_r+0x1c2>
 80022f6:	bf00      	nop
 80022f8:	08002978 	.word	0x08002978
 80022fc:	08002982 	.word	0x08002982
 8002300:	00000000 	.word	0x00000000
 8002304:	08002055 	.word	0x08002055
 8002308:	0800297e 	.word	0x0800297e

0800230c <_printf_common>:
 800230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002310:	4616      	mov	r6, r2
 8002312:	4699      	mov	r9, r3
 8002314:	688a      	ldr	r2, [r1, #8]
 8002316:	690b      	ldr	r3, [r1, #16]
 8002318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800231c:	4293      	cmp	r3, r2
 800231e:	bfb8      	it	lt
 8002320:	4613      	movlt	r3, r2
 8002322:	6033      	str	r3, [r6, #0]
 8002324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002328:	4607      	mov	r7, r0
 800232a:	460c      	mov	r4, r1
 800232c:	b10a      	cbz	r2, 8002332 <_printf_common+0x26>
 800232e:	3301      	adds	r3, #1
 8002330:	6033      	str	r3, [r6, #0]
 8002332:	6823      	ldr	r3, [r4, #0]
 8002334:	0699      	lsls	r1, r3, #26
 8002336:	bf42      	ittt	mi
 8002338:	6833      	ldrmi	r3, [r6, #0]
 800233a:	3302      	addmi	r3, #2
 800233c:	6033      	strmi	r3, [r6, #0]
 800233e:	6825      	ldr	r5, [r4, #0]
 8002340:	f015 0506 	ands.w	r5, r5, #6
 8002344:	d106      	bne.n	8002354 <_printf_common+0x48>
 8002346:	f104 0a19 	add.w	sl, r4, #25
 800234a:	68e3      	ldr	r3, [r4, #12]
 800234c:	6832      	ldr	r2, [r6, #0]
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	42ab      	cmp	r3, r5
 8002352:	dc26      	bgt.n	80023a2 <_printf_common+0x96>
 8002354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002358:	1e13      	subs	r3, r2, #0
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	bf18      	it	ne
 800235e:	2301      	movne	r3, #1
 8002360:	0692      	lsls	r2, r2, #26
 8002362:	d42b      	bmi.n	80023bc <_printf_common+0xb0>
 8002364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002368:	4649      	mov	r1, r9
 800236a:	4638      	mov	r0, r7
 800236c:	47c0      	blx	r8
 800236e:	3001      	adds	r0, #1
 8002370:	d01e      	beq.n	80023b0 <_printf_common+0xa4>
 8002372:	6823      	ldr	r3, [r4, #0]
 8002374:	68e5      	ldr	r5, [r4, #12]
 8002376:	6832      	ldr	r2, [r6, #0]
 8002378:	f003 0306 	and.w	r3, r3, #6
 800237c:	2b04      	cmp	r3, #4
 800237e:	bf08      	it	eq
 8002380:	1aad      	subeq	r5, r5, r2
 8002382:	68a3      	ldr	r3, [r4, #8]
 8002384:	6922      	ldr	r2, [r4, #16]
 8002386:	bf0c      	ite	eq
 8002388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800238c:	2500      	movne	r5, #0
 800238e:	4293      	cmp	r3, r2
 8002390:	bfc4      	itt	gt
 8002392:	1a9b      	subgt	r3, r3, r2
 8002394:	18ed      	addgt	r5, r5, r3
 8002396:	2600      	movs	r6, #0
 8002398:	341a      	adds	r4, #26
 800239a:	42b5      	cmp	r5, r6
 800239c:	d11a      	bne.n	80023d4 <_printf_common+0xc8>
 800239e:	2000      	movs	r0, #0
 80023a0:	e008      	b.n	80023b4 <_printf_common+0xa8>
 80023a2:	2301      	movs	r3, #1
 80023a4:	4652      	mov	r2, sl
 80023a6:	4649      	mov	r1, r9
 80023a8:	4638      	mov	r0, r7
 80023aa:	47c0      	blx	r8
 80023ac:	3001      	adds	r0, #1
 80023ae:	d103      	bne.n	80023b8 <_printf_common+0xac>
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023b8:	3501      	adds	r5, #1
 80023ba:	e7c6      	b.n	800234a <_printf_common+0x3e>
 80023bc:	18e1      	adds	r1, r4, r3
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	2030      	movs	r0, #48	; 0x30
 80023c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023c6:	4422      	add	r2, r4
 80023c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023d0:	3302      	adds	r3, #2
 80023d2:	e7c7      	b.n	8002364 <_printf_common+0x58>
 80023d4:	2301      	movs	r3, #1
 80023d6:	4622      	mov	r2, r4
 80023d8:	4649      	mov	r1, r9
 80023da:	4638      	mov	r0, r7
 80023dc:	47c0      	blx	r8
 80023de:	3001      	adds	r0, #1
 80023e0:	d0e6      	beq.n	80023b0 <_printf_common+0xa4>
 80023e2:	3601      	adds	r6, #1
 80023e4:	e7d9      	b.n	800239a <_printf_common+0x8e>
	...

080023e8 <_printf_i>:
 80023e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023ec:	7e0f      	ldrb	r7, [r1, #24]
 80023ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023f0:	2f78      	cmp	r7, #120	; 0x78
 80023f2:	4691      	mov	r9, r2
 80023f4:	4680      	mov	r8, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	469a      	mov	sl, r3
 80023fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023fe:	d807      	bhi.n	8002410 <_printf_i+0x28>
 8002400:	2f62      	cmp	r7, #98	; 0x62
 8002402:	d80a      	bhi.n	800241a <_printf_i+0x32>
 8002404:	2f00      	cmp	r7, #0
 8002406:	f000 80d8 	beq.w	80025ba <_printf_i+0x1d2>
 800240a:	2f58      	cmp	r7, #88	; 0x58
 800240c:	f000 80a3 	beq.w	8002556 <_printf_i+0x16e>
 8002410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002418:	e03a      	b.n	8002490 <_printf_i+0xa8>
 800241a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800241e:	2b15      	cmp	r3, #21
 8002420:	d8f6      	bhi.n	8002410 <_printf_i+0x28>
 8002422:	a101      	add	r1, pc, #4	; (adr r1, 8002428 <_printf_i+0x40>)
 8002424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002428:	08002481 	.word	0x08002481
 800242c:	08002495 	.word	0x08002495
 8002430:	08002411 	.word	0x08002411
 8002434:	08002411 	.word	0x08002411
 8002438:	08002411 	.word	0x08002411
 800243c:	08002411 	.word	0x08002411
 8002440:	08002495 	.word	0x08002495
 8002444:	08002411 	.word	0x08002411
 8002448:	08002411 	.word	0x08002411
 800244c:	08002411 	.word	0x08002411
 8002450:	08002411 	.word	0x08002411
 8002454:	080025a1 	.word	0x080025a1
 8002458:	080024c5 	.word	0x080024c5
 800245c:	08002583 	.word	0x08002583
 8002460:	08002411 	.word	0x08002411
 8002464:	08002411 	.word	0x08002411
 8002468:	080025c3 	.word	0x080025c3
 800246c:	08002411 	.word	0x08002411
 8002470:	080024c5 	.word	0x080024c5
 8002474:	08002411 	.word	0x08002411
 8002478:	08002411 	.word	0x08002411
 800247c:	0800258b 	.word	0x0800258b
 8002480:	682b      	ldr	r3, [r5, #0]
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	602a      	str	r2, [r5, #0]
 8002488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800248c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002490:	2301      	movs	r3, #1
 8002492:	e0a3      	b.n	80025dc <_printf_i+0x1f4>
 8002494:	6820      	ldr	r0, [r4, #0]
 8002496:	6829      	ldr	r1, [r5, #0]
 8002498:	0606      	lsls	r6, r0, #24
 800249a:	f101 0304 	add.w	r3, r1, #4
 800249e:	d50a      	bpl.n	80024b6 <_printf_i+0xce>
 80024a0:	680e      	ldr	r6, [r1, #0]
 80024a2:	602b      	str	r3, [r5, #0]
 80024a4:	2e00      	cmp	r6, #0
 80024a6:	da03      	bge.n	80024b0 <_printf_i+0xc8>
 80024a8:	232d      	movs	r3, #45	; 0x2d
 80024aa:	4276      	negs	r6, r6
 80024ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024b0:	485e      	ldr	r0, [pc, #376]	; (800262c <_printf_i+0x244>)
 80024b2:	230a      	movs	r3, #10
 80024b4:	e019      	b.n	80024ea <_printf_i+0x102>
 80024b6:	680e      	ldr	r6, [r1, #0]
 80024b8:	602b      	str	r3, [r5, #0]
 80024ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024be:	bf18      	it	ne
 80024c0:	b236      	sxthne	r6, r6
 80024c2:	e7ef      	b.n	80024a4 <_printf_i+0xbc>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	1d19      	adds	r1, r3, #4
 80024ca:	6029      	str	r1, [r5, #0]
 80024cc:	0601      	lsls	r1, r0, #24
 80024ce:	d501      	bpl.n	80024d4 <_printf_i+0xec>
 80024d0:	681e      	ldr	r6, [r3, #0]
 80024d2:	e002      	b.n	80024da <_printf_i+0xf2>
 80024d4:	0646      	lsls	r6, r0, #25
 80024d6:	d5fb      	bpl.n	80024d0 <_printf_i+0xe8>
 80024d8:	881e      	ldrh	r6, [r3, #0]
 80024da:	4854      	ldr	r0, [pc, #336]	; (800262c <_printf_i+0x244>)
 80024dc:	2f6f      	cmp	r7, #111	; 0x6f
 80024de:	bf0c      	ite	eq
 80024e0:	2308      	moveq	r3, #8
 80024e2:	230a      	movne	r3, #10
 80024e4:	2100      	movs	r1, #0
 80024e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024ea:	6865      	ldr	r5, [r4, #4]
 80024ec:	60a5      	str	r5, [r4, #8]
 80024ee:	2d00      	cmp	r5, #0
 80024f0:	bfa2      	ittt	ge
 80024f2:	6821      	ldrge	r1, [r4, #0]
 80024f4:	f021 0104 	bicge.w	r1, r1, #4
 80024f8:	6021      	strge	r1, [r4, #0]
 80024fa:	b90e      	cbnz	r6, 8002500 <_printf_i+0x118>
 80024fc:	2d00      	cmp	r5, #0
 80024fe:	d04d      	beq.n	800259c <_printf_i+0x1b4>
 8002500:	4615      	mov	r5, r2
 8002502:	fbb6 f1f3 	udiv	r1, r6, r3
 8002506:	fb03 6711 	mls	r7, r3, r1, r6
 800250a:	5dc7      	ldrb	r7, [r0, r7]
 800250c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002510:	4637      	mov	r7, r6
 8002512:	42bb      	cmp	r3, r7
 8002514:	460e      	mov	r6, r1
 8002516:	d9f4      	bls.n	8002502 <_printf_i+0x11a>
 8002518:	2b08      	cmp	r3, #8
 800251a:	d10b      	bne.n	8002534 <_printf_i+0x14c>
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	07de      	lsls	r6, r3, #31
 8002520:	d508      	bpl.n	8002534 <_printf_i+0x14c>
 8002522:	6923      	ldr	r3, [r4, #16]
 8002524:	6861      	ldr	r1, [r4, #4]
 8002526:	4299      	cmp	r1, r3
 8002528:	bfde      	ittt	le
 800252a:	2330      	movle	r3, #48	; 0x30
 800252c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002530:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002534:	1b52      	subs	r2, r2, r5
 8002536:	6122      	str	r2, [r4, #16]
 8002538:	f8cd a000 	str.w	sl, [sp]
 800253c:	464b      	mov	r3, r9
 800253e:	aa03      	add	r2, sp, #12
 8002540:	4621      	mov	r1, r4
 8002542:	4640      	mov	r0, r8
 8002544:	f7ff fee2 	bl	800230c <_printf_common>
 8002548:	3001      	adds	r0, #1
 800254a:	d14c      	bne.n	80025e6 <_printf_i+0x1fe>
 800254c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002550:	b004      	add	sp, #16
 8002552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002556:	4835      	ldr	r0, [pc, #212]	; (800262c <_printf_i+0x244>)
 8002558:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800255c:	6829      	ldr	r1, [r5, #0]
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	f851 6b04 	ldr.w	r6, [r1], #4
 8002564:	6029      	str	r1, [r5, #0]
 8002566:	061d      	lsls	r5, r3, #24
 8002568:	d514      	bpl.n	8002594 <_printf_i+0x1ac>
 800256a:	07df      	lsls	r7, r3, #31
 800256c:	bf44      	itt	mi
 800256e:	f043 0320 	orrmi.w	r3, r3, #32
 8002572:	6023      	strmi	r3, [r4, #0]
 8002574:	b91e      	cbnz	r6, 800257e <_printf_i+0x196>
 8002576:	6823      	ldr	r3, [r4, #0]
 8002578:	f023 0320 	bic.w	r3, r3, #32
 800257c:	6023      	str	r3, [r4, #0]
 800257e:	2310      	movs	r3, #16
 8002580:	e7b0      	b.n	80024e4 <_printf_i+0xfc>
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	f043 0320 	orr.w	r3, r3, #32
 8002588:	6023      	str	r3, [r4, #0]
 800258a:	2378      	movs	r3, #120	; 0x78
 800258c:	4828      	ldr	r0, [pc, #160]	; (8002630 <_printf_i+0x248>)
 800258e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002592:	e7e3      	b.n	800255c <_printf_i+0x174>
 8002594:	0659      	lsls	r1, r3, #25
 8002596:	bf48      	it	mi
 8002598:	b2b6      	uxthmi	r6, r6
 800259a:	e7e6      	b.n	800256a <_printf_i+0x182>
 800259c:	4615      	mov	r5, r2
 800259e:	e7bb      	b.n	8002518 <_printf_i+0x130>
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	6826      	ldr	r6, [r4, #0]
 80025a4:	6961      	ldr	r1, [r4, #20]
 80025a6:	1d18      	adds	r0, r3, #4
 80025a8:	6028      	str	r0, [r5, #0]
 80025aa:	0635      	lsls	r5, r6, #24
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	d501      	bpl.n	80025b4 <_printf_i+0x1cc>
 80025b0:	6019      	str	r1, [r3, #0]
 80025b2:	e002      	b.n	80025ba <_printf_i+0x1d2>
 80025b4:	0670      	lsls	r0, r6, #25
 80025b6:	d5fb      	bpl.n	80025b0 <_printf_i+0x1c8>
 80025b8:	8019      	strh	r1, [r3, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	6123      	str	r3, [r4, #16]
 80025be:	4615      	mov	r5, r2
 80025c0:	e7ba      	b.n	8002538 <_printf_i+0x150>
 80025c2:	682b      	ldr	r3, [r5, #0]
 80025c4:	1d1a      	adds	r2, r3, #4
 80025c6:	602a      	str	r2, [r5, #0]
 80025c8:	681d      	ldr	r5, [r3, #0]
 80025ca:	6862      	ldr	r2, [r4, #4]
 80025cc:	2100      	movs	r1, #0
 80025ce:	4628      	mov	r0, r5
 80025d0:	f7fd fe1e 	bl	8000210 <memchr>
 80025d4:	b108      	cbz	r0, 80025da <_printf_i+0x1f2>
 80025d6:	1b40      	subs	r0, r0, r5
 80025d8:	6060      	str	r0, [r4, #4]
 80025da:	6863      	ldr	r3, [r4, #4]
 80025dc:	6123      	str	r3, [r4, #16]
 80025de:	2300      	movs	r3, #0
 80025e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025e4:	e7a8      	b.n	8002538 <_printf_i+0x150>
 80025e6:	6923      	ldr	r3, [r4, #16]
 80025e8:	462a      	mov	r2, r5
 80025ea:	4649      	mov	r1, r9
 80025ec:	4640      	mov	r0, r8
 80025ee:	47d0      	blx	sl
 80025f0:	3001      	adds	r0, #1
 80025f2:	d0ab      	beq.n	800254c <_printf_i+0x164>
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	079b      	lsls	r3, r3, #30
 80025f8:	d413      	bmi.n	8002622 <_printf_i+0x23a>
 80025fa:	68e0      	ldr	r0, [r4, #12]
 80025fc:	9b03      	ldr	r3, [sp, #12]
 80025fe:	4298      	cmp	r0, r3
 8002600:	bfb8      	it	lt
 8002602:	4618      	movlt	r0, r3
 8002604:	e7a4      	b.n	8002550 <_printf_i+0x168>
 8002606:	2301      	movs	r3, #1
 8002608:	4632      	mov	r2, r6
 800260a:	4649      	mov	r1, r9
 800260c:	4640      	mov	r0, r8
 800260e:	47d0      	blx	sl
 8002610:	3001      	adds	r0, #1
 8002612:	d09b      	beq.n	800254c <_printf_i+0x164>
 8002614:	3501      	adds	r5, #1
 8002616:	68e3      	ldr	r3, [r4, #12]
 8002618:	9903      	ldr	r1, [sp, #12]
 800261a:	1a5b      	subs	r3, r3, r1
 800261c:	42ab      	cmp	r3, r5
 800261e:	dcf2      	bgt.n	8002606 <_printf_i+0x21e>
 8002620:	e7eb      	b.n	80025fa <_printf_i+0x212>
 8002622:	2500      	movs	r5, #0
 8002624:	f104 0619 	add.w	r6, r4, #25
 8002628:	e7f5      	b.n	8002616 <_printf_i+0x22e>
 800262a:	bf00      	nop
 800262c:	08002989 	.word	0x08002989
 8002630:	0800299a 	.word	0x0800299a

08002634 <memcpy>:
 8002634:	440a      	add	r2, r1
 8002636:	4291      	cmp	r1, r2
 8002638:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800263c:	d100      	bne.n	8002640 <memcpy+0xc>
 800263e:	4770      	bx	lr
 8002640:	b510      	push	{r4, lr}
 8002642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800264a:	4291      	cmp	r1, r2
 800264c:	d1f9      	bne.n	8002642 <memcpy+0xe>
 800264e:	bd10      	pop	{r4, pc}

08002650 <memmove>:
 8002650:	4288      	cmp	r0, r1
 8002652:	b510      	push	{r4, lr}
 8002654:	eb01 0402 	add.w	r4, r1, r2
 8002658:	d902      	bls.n	8002660 <memmove+0x10>
 800265a:	4284      	cmp	r4, r0
 800265c:	4623      	mov	r3, r4
 800265e:	d807      	bhi.n	8002670 <memmove+0x20>
 8002660:	1e43      	subs	r3, r0, #1
 8002662:	42a1      	cmp	r1, r4
 8002664:	d008      	beq.n	8002678 <memmove+0x28>
 8002666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800266a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800266e:	e7f8      	b.n	8002662 <memmove+0x12>
 8002670:	4402      	add	r2, r0
 8002672:	4601      	mov	r1, r0
 8002674:	428a      	cmp	r2, r1
 8002676:	d100      	bne.n	800267a <memmove+0x2a>
 8002678:	bd10      	pop	{r4, pc}
 800267a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800267e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002682:	e7f7      	b.n	8002674 <memmove+0x24>

08002684 <_free_r>:
 8002684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002686:	2900      	cmp	r1, #0
 8002688:	d044      	beq.n	8002714 <_free_r+0x90>
 800268a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800268e:	9001      	str	r0, [sp, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	f1a1 0404 	sub.w	r4, r1, #4
 8002696:	bfb8      	it	lt
 8002698:	18e4      	addlt	r4, r4, r3
 800269a:	f000 f913 	bl	80028c4 <__malloc_lock>
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <_free_r+0x94>)
 80026a0:	9801      	ldr	r0, [sp, #4]
 80026a2:	6813      	ldr	r3, [r2, #0]
 80026a4:	b933      	cbnz	r3, 80026b4 <_free_r+0x30>
 80026a6:	6063      	str	r3, [r4, #4]
 80026a8:	6014      	str	r4, [r2, #0]
 80026aa:	b003      	add	sp, #12
 80026ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026b0:	f000 b90e 	b.w	80028d0 <__malloc_unlock>
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	d908      	bls.n	80026ca <_free_r+0x46>
 80026b8:	6825      	ldr	r5, [r4, #0]
 80026ba:	1961      	adds	r1, r4, r5
 80026bc:	428b      	cmp	r3, r1
 80026be:	bf01      	itttt	eq
 80026c0:	6819      	ldreq	r1, [r3, #0]
 80026c2:	685b      	ldreq	r3, [r3, #4]
 80026c4:	1949      	addeq	r1, r1, r5
 80026c6:	6021      	streq	r1, [r4, #0]
 80026c8:	e7ed      	b.n	80026a6 <_free_r+0x22>
 80026ca:	461a      	mov	r2, r3
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	b10b      	cbz	r3, 80026d4 <_free_r+0x50>
 80026d0:	42a3      	cmp	r3, r4
 80026d2:	d9fa      	bls.n	80026ca <_free_r+0x46>
 80026d4:	6811      	ldr	r1, [r2, #0]
 80026d6:	1855      	adds	r5, r2, r1
 80026d8:	42a5      	cmp	r5, r4
 80026da:	d10b      	bne.n	80026f4 <_free_r+0x70>
 80026dc:	6824      	ldr	r4, [r4, #0]
 80026de:	4421      	add	r1, r4
 80026e0:	1854      	adds	r4, r2, r1
 80026e2:	42a3      	cmp	r3, r4
 80026e4:	6011      	str	r1, [r2, #0]
 80026e6:	d1e0      	bne.n	80026aa <_free_r+0x26>
 80026e8:	681c      	ldr	r4, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	6053      	str	r3, [r2, #4]
 80026ee:	4421      	add	r1, r4
 80026f0:	6011      	str	r1, [r2, #0]
 80026f2:	e7da      	b.n	80026aa <_free_r+0x26>
 80026f4:	d902      	bls.n	80026fc <_free_r+0x78>
 80026f6:	230c      	movs	r3, #12
 80026f8:	6003      	str	r3, [r0, #0]
 80026fa:	e7d6      	b.n	80026aa <_free_r+0x26>
 80026fc:	6825      	ldr	r5, [r4, #0]
 80026fe:	1961      	adds	r1, r4, r5
 8002700:	428b      	cmp	r3, r1
 8002702:	bf04      	itt	eq
 8002704:	6819      	ldreq	r1, [r3, #0]
 8002706:	685b      	ldreq	r3, [r3, #4]
 8002708:	6063      	str	r3, [r4, #4]
 800270a:	bf04      	itt	eq
 800270c:	1949      	addeq	r1, r1, r5
 800270e:	6021      	streq	r1, [r4, #0]
 8002710:	6054      	str	r4, [r2, #4]
 8002712:	e7ca      	b.n	80026aa <_free_r+0x26>
 8002714:	b003      	add	sp, #12
 8002716:	bd30      	pop	{r4, r5, pc}
 8002718:	200000f0 	.word	0x200000f0

0800271c <sbrk_aligned>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4e0e      	ldr	r6, [pc, #56]	; (8002758 <sbrk_aligned+0x3c>)
 8002720:	460c      	mov	r4, r1
 8002722:	6831      	ldr	r1, [r6, #0]
 8002724:	4605      	mov	r5, r0
 8002726:	b911      	cbnz	r1, 800272e <sbrk_aligned+0x12>
 8002728:	f000 f8bc 	bl	80028a4 <_sbrk_r>
 800272c:	6030      	str	r0, [r6, #0]
 800272e:	4621      	mov	r1, r4
 8002730:	4628      	mov	r0, r5
 8002732:	f000 f8b7 	bl	80028a4 <_sbrk_r>
 8002736:	1c43      	adds	r3, r0, #1
 8002738:	d00a      	beq.n	8002750 <sbrk_aligned+0x34>
 800273a:	1cc4      	adds	r4, r0, #3
 800273c:	f024 0403 	bic.w	r4, r4, #3
 8002740:	42a0      	cmp	r0, r4
 8002742:	d007      	beq.n	8002754 <sbrk_aligned+0x38>
 8002744:	1a21      	subs	r1, r4, r0
 8002746:	4628      	mov	r0, r5
 8002748:	f000 f8ac 	bl	80028a4 <_sbrk_r>
 800274c:	3001      	adds	r0, #1
 800274e:	d101      	bne.n	8002754 <sbrk_aligned+0x38>
 8002750:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002754:	4620      	mov	r0, r4
 8002756:	bd70      	pop	{r4, r5, r6, pc}
 8002758:	200000f4 	.word	0x200000f4

0800275c <_malloc_r>:
 800275c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002760:	1ccd      	adds	r5, r1, #3
 8002762:	f025 0503 	bic.w	r5, r5, #3
 8002766:	3508      	adds	r5, #8
 8002768:	2d0c      	cmp	r5, #12
 800276a:	bf38      	it	cc
 800276c:	250c      	movcc	r5, #12
 800276e:	2d00      	cmp	r5, #0
 8002770:	4607      	mov	r7, r0
 8002772:	db01      	blt.n	8002778 <_malloc_r+0x1c>
 8002774:	42a9      	cmp	r1, r5
 8002776:	d905      	bls.n	8002784 <_malloc_r+0x28>
 8002778:	230c      	movs	r3, #12
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	2600      	movs	r6, #0
 800277e:	4630      	mov	r0, r6
 8002780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002784:	4e2e      	ldr	r6, [pc, #184]	; (8002840 <_malloc_r+0xe4>)
 8002786:	f000 f89d 	bl	80028c4 <__malloc_lock>
 800278a:	6833      	ldr	r3, [r6, #0]
 800278c:	461c      	mov	r4, r3
 800278e:	bb34      	cbnz	r4, 80027de <_malloc_r+0x82>
 8002790:	4629      	mov	r1, r5
 8002792:	4638      	mov	r0, r7
 8002794:	f7ff ffc2 	bl	800271c <sbrk_aligned>
 8002798:	1c43      	adds	r3, r0, #1
 800279a:	4604      	mov	r4, r0
 800279c:	d14d      	bne.n	800283a <_malloc_r+0xde>
 800279e:	6834      	ldr	r4, [r6, #0]
 80027a0:	4626      	mov	r6, r4
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d140      	bne.n	8002828 <_malloc_r+0xcc>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	4631      	mov	r1, r6
 80027aa:	4638      	mov	r0, r7
 80027ac:	eb04 0803 	add.w	r8, r4, r3
 80027b0:	f000 f878 	bl	80028a4 <_sbrk_r>
 80027b4:	4580      	cmp	r8, r0
 80027b6:	d13a      	bne.n	800282e <_malloc_r+0xd2>
 80027b8:	6821      	ldr	r1, [r4, #0]
 80027ba:	3503      	adds	r5, #3
 80027bc:	1a6d      	subs	r5, r5, r1
 80027be:	f025 0503 	bic.w	r5, r5, #3
 80027c2:	3508      	adds	r5, #8
 80027c4:	2d0c      	cmp	r5, #12
 80027c6:	bf38      	it	cc
 80027c8:	250c      	movcc	r5, #12
 80027ca:	4629      	mov	r1, r5
 80027cc:	4638      	mov	r0, r7
 80027ce:	f7ff ffa5 	bl	800271c <sbrk_aligned>
 80027d2:	3001      	adds	r0, #1
 80027d4:	d02b      	beq.n	800282e <_malloc_r+0xd2>
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	442b      	add	r3, r5
 80027da:	6023      	str	r3, [r4, #0]
 80027dc:	e00e      	b.n	80027fc <_malloc_r+0xa0>
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	1b52      	subs	r2, r2, r5
 80027e2:	d41e      	bmi.n	8002822 <_malloc_r+0xc6>
 80027e4:	2a0b      	cmp	r2, #11
 80027e6:	d916      	bls.n	8002816 <_malloc_r+0xba>
 80027e8:	1961      	adds	r1, r4, r5
 80027ea:	42a3      	cmp	r3, r4
 80027ec:	6025      	str	r5, [r4, #0]
 80027ee:	bf18      	it	ne
 80027f0:	6059      	strne	r1, [r3, #4]
 80027f2:	6863      	ldr	r3, [r4, #4]
 80027f4:	bf08      	it	eq
 80027f6:	6031      	streq	r1, [r6, #0]
 80027f8:	5162      	str	r2, [r4, r5]
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	4638      	mov	r0, r7
 80027fe:	f104 060b 	add.w	r6, r4, #11
 8002802:	f000 f865 	bl	80028d0 <__malloc_unlock>
 8002806:	f026 0607 	bic.w	r6, r6, #7
 800280a:	1d23      	adds	r3, r4, #4
 800280c:	1af2      	subs	r2, r6, r3
 800280e:	d0b6      	beq.n	800277e <_malloc_r+0x22>
 8002810:	1b9b      	subs	r3, r3, r6
 8002812:	50a3      	str	r3, [r4, r2]
 8002814:	e7b3      	b.n	800277e <_malloc_r+0x22>
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	42a3      	cmp	r3, r4
 800281a:	bf0c      	ite	eq
 800281c:	6032      	streq	r2, [r6, #0]
 800281e:	605a      	strne	r2, [r3, #4]
 8002820:	e7ec      	b.n	80027fc <_malloc_r+0xa0>
 8002822:	4623      	mov	r3, r4
 8002824:	6864      	ldr	r4, [r4, #4]
 8002826:	e7b2      	b.n	800278e <_malloc_r+0x32>
 8002828:	4634      	mov	r4, r6
 800282a:	6876      	ldr	r6, [r6, #4]
 800282c:	e7b9      	b.n	80027a2 <_malloc_r+0x46>
 800282e:	230c      	movs	r3, #12
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	4638      	mov	r0, r7
 8002834:	f000 f84c 	bl	80028d0 <__malloc_unlock>
 8002838:	e7a1      	b.n	800277e <_malloc_r+0x22>
 800283a:	6025      	str	r5, [r4, #0]
 800283c:	e7de      	b.n	80027fc <_malloc_r+0xa0>
 800283e:	bf00      	nop
 8002840:	200000f0 	.word	0x200000f0

08002844 <_realloc_r>:
 8002844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002848:	4680      	mov	r8, r0
 800284a:	4614      	mov	r4, r2
 800284c:	460e      	mov	r6, r1
 800284e:	b921      	cbnz	r1, 800285a <_realloc_r+0x16>
 8002850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002854:	4611      	mov	r1, r2
 8002856:	f7ff bf81 	b.w	800275c <_malloc_r>
 800285a:	b92a      	cbnz	r2, 8002868 <_realloc_r+0x24>
 800285c:	f7ff ff12 	bl	8002684 <_free_r>
 8002860:	4625      	mov	r5, r4
 8002862:	4628      	mov	r0, r5
 8002864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002868:	f000 f838 	bl	80028dc <_malloc_usable_size_r>
 800286c:	4284      	cmp	r4, r0
 800286e:	4607      	mov	r7, r0
 8002870:	d802      	bhi.n	8002878 <_realloc_r+0x34>
 8002872:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002876:	d812      	bhi.n	800289e <_realloc_r+0x5a>
 8002878:	4621      	mov	r1, r4
 800287a:	4640      	mov	r0, r8
 800287c:	f7ff ff6e 	bl	800275c <_malloc_r>
 8002880:	4605      	mov	r5, r0
 8002882:	2800      	cmp	r0, #0
 8002884:	d0ed      	beq.n	8002862 <_realloc_r+0x1e>
 8002886:	42bc      	cmp	r4, r7
 8002888:	4622      	mov	r2, r4
 800288a:	4631      	mov	r1, r6
 800288c:	bf28      	it	cs
 800288e:	463a      	movcs	r2, r7
 8002890:	f7ff fed0 	bl	8002634 <memcpy>
 8002894:	4631      	mov	r1, r6
 8002896:	4640      	mov	r0, r8
 8002898:	f7ff fef4 	bl	8002684 <_free_r>
 800289c:	e7e1      	b.n	8002862 <_realloc_r+0x1e>
 800289e:	4635      	mov	r5, r6
 80028a0:	e7df      	b.n	8002862 <_realloc_r+0x1e>
	...

080028a4 <_sbrk_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4d06      	ldr	r5, [pc, #24]	; (80028c0 <_sbrk_r+0x1c>)
 80028a8:	2300      	movs	r3, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	602b      	str	r3, [r5, #0]
 80028b0:	f7fd fff6 	bl	80008a0 <_sbrk>
 80028b4:	1c43      	adds	r3, r0, #1
 80028b6:	d102      	bne.n	80028be <_sbrk_r+0x1a>
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	b103      	cbz	r3, 80028be <_sbrk_r+0x1a>
 80028bc:	6023      	str	r3, [r4, #0]
 80028be:	bd38      	pop	{r3, r4, r5, pc}
 80028c0:	200000f8 	.word	0x200000f8

080028c4 <__malloc_lock>:
 80028c4:	4801      	ldr	r0, [pc, #4]	; (80028cc <__malloc_lock+0x8>)
 80028c6:	f000 b811 	b.w	80028ec <__retarget_lock_acquire_recursive>
 80028ca:	bf00      	nop
 80028cc:	200000fc 	.word	0x200000fc

080028d0 <__malloc_unlock>:
 80028d0:	4801      	ldr	r0, [pc, #4]	; (80028d8 <__malloc_unlock+0x8>)
 80028d2:	f000 b80c 	b.w	80028ee <__retarget_lock_release_recursive>
 80028d6:	bf00      	nop
 80028d8:	200000fc 	.word	0x200000fc

080028dc <_malloc_usable_size_r>:
 80028dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028e0:	1f18      	subs	r0, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bfbc      	itt	lt
 80028e6:	580b      	ldrlt	r3, [r1, r0]
 80028e8:	18c0      	addlt	r0, r0, r3
 80028ea:	4770      	bx	lr

080028ec <__retarget_lock_acquire_recursive>:
 80028ec:	4770      	bx	lr

080028ee <__retarget_lock_release_recursive>:
 80028ee:	4770      	bx	lr

080028f0 <_init>:
 80028f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f2:	bf00      	nop
 80028f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028f6:	bc08      	pop	{r3}
 80028f8:	469e      	mov	lr, r3
 80028fa:	4770      	bx	lr

080028fc <_fini>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr
