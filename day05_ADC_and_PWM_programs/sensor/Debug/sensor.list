
sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080029b8  080029b8  000129b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a78  08002a78  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002a78  08002a78  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a78  08002a78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  08002af0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08002af0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006848  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000146f  00000000  00000000  000268e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005e0  00000000  00000000  00027d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  00028338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229ef  00000000  00000000  00028860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006c48  00000000  00000000  0004b24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d57f7  00000000  00000000  00051e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012768e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e00  00000000  00000000  001276e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080029a0 	.word	0x080029a0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080029a0 	.word	0x080029a0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);


int main(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    /* Initialize the HAL Library */
    HAL_Init();
 80002b6:	f000 fa85 	bl	80007c4 <HAL_Init>

    /* Configure the system clock */
    SystemClock_Config();
 80002ba:	f000 f83b 	bl	8000334 <SystemClock_Config>

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80002be:	f000 f893 	bl	80003e8 <MX_GPIO_Init>
    MX_ADC1_Init();
 80002c2:	f000 f83f 	bl	8000344 <MX_ADC1_Init>


    /* Infinite loop */
    while (1) {
    	  /* Start the ADC in continuous mode */
    	     (HAL_ADC_Start(&hadc1));
 80002c6:	4817      	ldr	r0, [pc, #92]	; (8000324 <main+0x74>)
 80002c8:	f000 fb56 	bl	8000978 <HAL_ADC_Start>

        /* Poll for the end of ADC conversion */
        if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 80002cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <main+0x74>)
 80002d2:	f000 fc56 	bl	8000b82 <HAL_ADC_PollForConversion>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d117      	bne.n	800030c <main+0x5c>
            /* Get the ADC value */
            uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80002dc:	4811      	ldr	r0, [pc, #68]	; (8000324 <main+0x74>)
 80002de:	f000 fdeb 	bl	8000eb8 <HAL_ADC_GetValue>
 80002e2:	6078      	str	r0, [r7, #4]

            /* Print the ADC value */
            printf("ADC Value: %lu\n", adcValue);
 80002e4:	6879      	ldr	r1, [r7, #4]
 80002e6:	4810      	ldr	r0, [pc, #64]	; (8000328 <main+0x78>)
 80002e8:	f001 fb56 	bl	8001998 <iprintf>
            if (adcValue > 2000) {
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80002f2:	d905      	bls.n	8000300 <main+0x50>
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2120      	movs	r1, #32
 80002f8:	480c      	ldr	r0, [pc, #48]	; (800032c <main+0x7c>)
 80002fa:	f001 fae7 	bl	80018cc <HAL_GPIO_WritePin>
 80002fe:	e008      	b.n	8000312 <main+0x62>
                    } else {
                        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2120      	movs	r1, #32
 8000304:	4809      	ldr	r0, [pc, #36]	; (800032c <main+0x7c>)
 8000306:	f001 fae1 	bl	80018cc <HAL_GPIO_WritePin>
 800030a:	e002      	b.n	8000312 <main+0x62>
                    }
        } else {
            /* Handle ADC conversion error or timeout */
            printf("ADC Conversion Timeout\n");
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <main+0x80>)
 800030e:	f001 fbc9 	bl	8001aa4 <puts>
        }

        HAL_Delay(500); // Adjust delay as needed
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f000 fac7 	bl	80008a8 <HAL_Delay>
        HAL_ADC_Stop(&hadc1);
 800031a:	4802      	ldr	r0, [pc, #8]	; (8000324 <main+0x74>)
 800031c:	f000 fbfe 	bl	8000b1c <HAL_ADC_Stop>
    	     (HAL_ADC_Start(&hadc1));
 8000320:	e7d1      	b.n	80002c6 <main+0x16>
 8000322:	bf00      	nop
 8000324:	2000008c 	.word	0x2000008c
 8000328:	080029b8 	.word	0x080029b8
 800032c:	40020000 	.word	0x40020000
 8000330:	080029c8 	.word	0x080029c8

08000334 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
    // Configure system clock (use STM32CubeMX generated code or modify as needed)
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
	...

08000344 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 800034a:	463b      	mov	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]

    /* Configure the global features of the ADC */
    hadc1.Instance = ADC1;
 8000356:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_ADC1_Init+0x98>)
 8000358:	4a21      	ldr	r2, [pc, #132]	; (80003e0 <MX_ADC1_Init+0x9c>)
 800035a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800035c:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <MX_ADC1_Init+0x98>)
 800035e:	2200      	movs	r2, #0
 8000360:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000362:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_ADC1_Init+0x98>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <MX_ADC1_Init+0x98>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = ENABLE;
 800036e:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_ADC1_Init+0x98>)
 8000370:	2201      	movs	r2, #1
 8000372:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000374:	4b19      	ldr	r3, [pc, #100]	; (80003dc <MX_ADC1_Init+0x98>)
 8000376:	2200      	movs	r2, #0
 8000378:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800037c:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_ADC1_Init+0x98>)
 800037e:	2200      	movs	r2, #0
 8000380:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000382:	4b16      	ldr	r3, [pc, #88]	; (80003dc <MX_ADC1_Init+0x98>)
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_ADC1_Init+0xa0>)
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_ADC1_Init+0x98>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_ADC1_Init+0x98>)
 8000390:	2201      	movs	r2, #1
 8000392:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_ADC1_Init+0x98>)
 8000396:	2200      	movs	r2, #0
 8000398:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_ADC1_Init+0x98>)
 800039e:	2201      	movs	r2, #1
 80003a0:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80003a2:	480e      	ldr	r0, [pc, #56]	; (80003dc <MX_ADC1_Init+0x98>)
 80003a4:	f000 faa4 	bl	80008f0 <HAL_ADC_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_ADC1_Init+0x6e>
        Error_Handler();
 80003ae:	f000 f84d 	bl	800044c <Error_Handler>
    }

    /* Configure the selected ADC regular channel */
    sConfig.Channel = ADC_CHANNEL_0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80003b6:	2301      	movs	r3, #1
 80003b8:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES; // Increase sampling time if needed
 80003ba:	2301      	movs	r3, #1
 80003bc:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80003be:	463b      	mov	r3, r7
 80003c0:	4619      	mov	r1, r3
 80003c2:	4806      	ldr	r0, [pc, #24]	; (80003dc <MX_ADC1_Init+0x98>)
 80003c4:	f000 fda4 	bl	8000f10 <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0x8e>
        Error_Handler();
 80003ce:	f000 f83d 	bl	800044c <Error_Handler>
    }
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	2000008c 	.word	0x2000008c
 80003e0:	40012000 	.word	0x40012000
 80003e4:	0f000001 	.word	0x0f000001

080003e8 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	2300      	movs	r3, #0
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <MX_GPIO_Init+0x5c>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000404:	4a0f      	ldr	r2, [pc, #60]	; (8000444 <MX_GPIO_Init+0x5c>)
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	6313      	str	r3, [r2, #48]	; 0x30
 800040c:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <MX_GPIO_Init+0x5c>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	603b      	str	r3, [r7, #0]
 8000416:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	2120      	movs	r1, #32
 800041c:	480a      	ldr	r0, [pc, #40]	; (8000448 <MX_GPIO_Init+0x60>)
 800041e:	f001 fa55 	bl	80018cc <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PA5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000422:	2320      	movs	r3, #32
 8000424:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000426:	2301      	movs	r3, #1
 8000428:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042e:	2300      	movs	r3, #0
 8000430:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_GPIO_Init+0x60>)
 8000438:	f001 f8b4 	bl	80015a4 <HAL_GPIO_Init>
}
 800043c:	bf00      	nop
 800043e:	3718      	adds	r7, #24
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40023800 	.word	0x40023800
 8000448:	40020000 	.word	0x40020000

0800044c <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1) {
        // Blink an LED to indicate an error
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000450:	2120      	movs	r1, #32
 8000452:	4803      	ldr	r0, [pc, #12]	; (8000460 <Error_Handler+0x14>)
 8000454:	f001 fa53 	bl	80018fe <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f000 fa25 	bl	80008a8 <HAL_Delay>
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800045e:	e7f7      	b.n	8000450 <Error_Handler+0x4>
 8000460:	40020000 	.word	0x40020000

08000464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <HAL_MspInit+0x4c>)
 8000470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000472:	4a0f      	ldr	r2, [pc, #60]	; (80004b0 <HAL_MspInit+0x4c>)
 8000474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000478:	6453      	str	r3, [r2, #68]	; 0x44
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <HAL_MspInit+0x4c>)
 800047c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800047e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000482:	607b      	str	r3, [r7, #4]
 8000484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000486:	2300      	movs	r3, #0
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <HAL_MspInit+0x4c>)
 800048c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800048e:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <HAL_MspInit+0x4c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	6413      	str	r3, [r2, #64]	; 0x40
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_MspInit+0x4c>)
 8000498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	603b      	str	r3, [r7, #0]
 80004a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004a2:	2007      	movs	r0, #7
 80004a4:	f001 f83c 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a8:	bf00      	nop
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	40023800 	.word	0x40023800

080004b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08a      	sub	sp, #40	; 0x28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <HAL_ADC_MspInit+0x8c>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d12f      	bne.n	8000536 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <HAL_ADC_MspInit+0x90>)
 80004dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004de:	4a19      	ldr	r2, [pc, #100]	; (8000544 <HAL_ADC_MspInit+0x90>)
 80004e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e4:	6453      	str	r3, [r2, #68]	; 0x44
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <HAL_ADC_MspInit+0x90>)
 80004e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b13      	ldr	r3, [pc, #76]	; (8000544 <HAL_ADC_MspInit+0x90>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <HAL_ADC_MspInit+0x90>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b10      	ldr	r3, [pc, #64]	; (8000544 <HAL_ADC_MspInit+0x90>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800050e:	2301      	movs	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000512:	2303      	movs	r3, #3
 8000514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	4619      	mov	r1, r3
 8000520:	4809      	ldr	r0, [pc, #36]	; (8000548 <HAL_ADC_MspInit+0x94>)
 8000522:	f001 f83f 	bl	80015a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	2012      	movs	r0, #18
 800052c:	f001 f803 	bl	8001536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000530:	2012      	movs	r0, #18
 8000532:	f001 f81c 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3728      	adds	r7, #40	; 0x28
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40012000 	.word	0x40012000
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000598:	f000 f966 	bl	8000868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <ADC_IRQHandler+0x10>)
 80005a6:	f000 fb77 	bl	8000c98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	2000008c 	.word	0x2000008c

080005b4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )
#define DEMCR        			*((volatile uint32_t*) 0xE000EDFCU )
void ITM_SendChar(uint8_t ch)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80005be:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <ITM_SendChar+0x48>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <ITM_SendChar+0x48>)
 80005c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005c8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80005ca:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <ITM_SendChar+0x4c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <ITM_SendChar+0x4c>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80005d6:	bf00      	nop
 80005d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f8      	beq.n	80005d8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80005e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	6013      	str	r3, [r2, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000edfc 	.word	0xe000edfc
 8000600:	e0000e00 	.word	0xe0000e00

08000604 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	e00a      	b.n	800062c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000616:	f3af 8000 	nop.w
 800061a:	4601      	mov	r1, r0
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	60ba      	str	r2, [r7, #8]
 8000622:	b2ca      	uxtb	r2, r1
 8000624:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	dbf0      	blt.n	8000616 <_read+0x12>
  }

  return len;
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b086      	sub	sp, #24
 8000642:	af00      	add	r7, sp, #0
 8000644:	60f8      	str	r0, [r7, #12]
 8000646:	60b9      	str	r1, [r7, #8]
 8000648:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	e009      	b.n	8000664 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	1c5a      	adds	r2, r3, #1
 8000654:	60ba      	str	r2, [r7, #8]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffab 	bl	80005b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	3301      	adds	r3, #1
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	429a      	cmp	r2, r3
 800066a:	dbf1      	blt.n	8000650 <_write+0x12>
  }
  return len;
 800066c:	687b      	ldr	r3, [r7, #4]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <_close>:

int _close(int file)
{
 8000676:	b480      	push	{r7}
 8000678:	b083      	sub	sp, #12
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000682:	4618      	mov	r0, r3
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800069e:	605a      	str	r2, [r3, #4]
  return 0;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_isatty>:

int _isatty(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006b6:	2301      	movs	r3, #1
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	; (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f001 f910 	bl	8001934 <__errno>
 8000714:	4603      	mov	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a05      	ldr	r2, [pc, #20]	; (8000744 <_sbrk+0x64>)
 8000730:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20020000 	.word	0x20020000
 8000740:	00000400 	.word	0x00000400
 8000744:	200000d4 	.word	0x200000d4
 8000748:	200000f0 	.word	0x200000f0

0800074c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	; (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000778:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0b      	ldr	r2, [pc, #44]	; (80007b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800079a:	f7ff ffd7 	bl	800074c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800079e:	f001 f8cf 	bl	8001940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007a2:	f7ff fd85 	bl	80002b0 <main>
  bx  lr    
 80007a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80007b4:	08002a80 	.word	0x08002a80
  ldr r2, =_sbss
 80007b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80007bc:	200000ec 	.word	0x200000ec

080007c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <CAN1_RX0_IRQHandler>
	...

080007c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <HAL_Init+0x40>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <HAL_Init+0x40>)
 80007ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_Init+0x40>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_Init+0x40>)
 80007da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_Init+0x40>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_Init+0x40>)
 80007e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ec:	2003      	movs	r0, #3
 80007ee:	f000 fe97 	bl	8001520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f000 f808 	bl	8000808 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f8:	f7ff fe34 	bl	8000464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023c00 	.word	0x40023c00

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_InitTick+0x54>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_InitTick+0x58>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4619      	mov	r1, r3
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000822:	fbb2 f3f3 	udiv	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f000 feaf 	bl	800158a <HAL_SYSTICK_Config>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e00e      	b.n	8000854 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d80a      	bhi.n	8000852 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000844:	f000 fe77 	bl	8001536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000848:	4a06      	ldr	r2, [pc, #24]	; (8000864 <HAL_InitTick+0x5c>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084e:	2300      	movs	r3, #0
 8000850:	e000      	b.n	8000854 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000000 	.word	0x20000000
 8000860:	20000008 	.word	0x20000008
 8000864:	20000004 	.word	0x20000004

08000868 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <HAL_IncTick+0x20>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	461a      	mov	r2, r3
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_IncTick+0x24>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4413      	add	r3, r2
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_IncTick+0x24>)
 800087a:	6013      	str	r3, [r2, #0]
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	20000008 	.word	0x20000008
 800088c:	200000d8 	.word	0x200000d8

08000890 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  return uwTick;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_GetTick+0x14>)
 8000896:	681b      	ldr	r3, [r3, #0]
}
 8000898:	4618      	mov	r0, r3
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	200000d8 	.word	0x200000d8

080008a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff ffee 	bl	8000890 <HAL_GetTick>
 80008b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80008c0:	d005      	beq.n	80008ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_Delay+0x44>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4413      	add	r3, r2
 80008cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008ce:	bf00      	nop
 80008d0:	f7ff ffde 	bl	8000890 <HAL_GetTick>
 80008d4:	4602      	mov	r2, r0
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d8f7      	bhi.n	80008d0 <HAL_Delay+0x28>
  {
  }
}
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000008 	.word	0x20000008

080008f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e033      	b.n	800096e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	2b00      	cmp	r3, #0
 800090c:	d109      	bne.n	8000922 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff fdd0 	bl	80004b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 0310 	and.w	r3, r3, #16
 800092a:	2b00      	cmp	r3, #0
 800092c:	d118      	bne.n	8000960 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000936:	f023 0302 	bic.w	r3, r3, #2
 800093a:	f043 0202 	orr.w	r2, r3, #2
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f000 fc16 	bl	8001174 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2200      	movs	r2, #0
 800094c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f023 0303 	bic.w	r3, r3, #3
 8000956:	f043 0201 	orr.w	r2, r3, #1
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	641a      	str	r2, [r3, #64]	; 0x40
 800095e:	e001      	b.n	8000964 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2200      	movs	r2, #0
 8000968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800096c:	7bfb      	ldrb	r3, [r7, #15]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800098a:	2b01      	cmp	r3, #1
 800098c:	d101      	bne.n	8000992 <HAL_ADC_Start+0x1a>
 800098e:	2302      	movs	r3, #2
 8000990:	e0b2      	b.n	8000af8 <HAL_ADC_Start+0x180>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2201      	movs	r2, #1
 8000996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d018      	beq.n	80009da <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0201 	orr.w	r2, r2, #1
 80009b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009b8:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <HAL_ADC_Start+0x18c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a52      	ldr	r2, [pc, #328]	; (8000b08 <HAL_ADC_Start+0x190>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9a      	lsrs	r2, r3, #18
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80009cc:	e002      	b.n	80009d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d1f9      	bne.n	80009ce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d17a      	bne.n	8000ade <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009f0:	f023 0301 	bic.w	r3, r3, #1
 80009f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d007      	beq.n	8000a1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a26:	d106      	bne.n	8000a36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2c:	f023 0206 	bic.w	r2, r3, #6
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	645a      	str	r2, [r3, #68]	; 0x44
 8000a34:	e002      	b.n	8000a3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a44:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <HAL_ADC_Start+0x194>)
 8000a46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000a50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f003 031f 	and.w	r3, r3, #31
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d12a      	bne.n	8000ab4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a2b      	ldr	r2, [pc, #172]	; (8000b10 <HAL_ADC_Start+0x198>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d015      	beq.n	8000a94 <HAL_ADC_Start+0x11c>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a29      	ldr	r2, [pc, #164]	; (8000b14 <HAL_ADC_Start+0x19c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d105      	bne.n	8000a7e <HAL_ADC_Start+0x106>
 8000a72:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <HAL_ADC_Start+0x194>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00a      	beq.n	8000a94 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_ADC_Start+0x1a0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d136      	bne.n	8000af6 <HAL_ADC_Start+0x17e>
 8000a88:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_ADC_Start+0x194>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d130      	bne.n	8000af6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d129      	bne.n	8000af6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	e020      	b.n	8000af6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <HAL_ADC_Start+0x198>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d11b      	bne.n	8000af6 <HAL_ADC_Start+0x17e>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d114      	bne.n	8000af6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	e00b      	b.n	8000af6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f043 0210 	orr.w	r2, r3, #16
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f043 0201 	orr.w	r2, r3, #1
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20000000 	.word	0x20000000
 8000b08:	431bde83 	.word	0x431bde83
 8000b0c:	40012300 	.word	0x40012300
 8000b10:	40012000 	.word	0x40012000
 8000b14:	40012100 	.word	0x40012100
 8000b18:	40012200 	.word	0x40012200

08000b1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d101      	bne.n	8000b32 <HAL_ADC_Stop+0x16>
 8000b2e:	2302      	movs	r3, #2
 8000b30:	e021      	b.n	8000b76 <HAL_ADC_Stop+0x5a>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2201      	movs	r2, #1
 8000b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0201 	bic.w	r2, r2, #1
 8000b48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d109      	bne.n	8000b6c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	f043 0201 	orr.w	r2, r3, #1
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b9e:	d113      	bne.n	8000bc8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f043 0220 	orr.w	r2, r3, #32
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e063      	b.n	8000c90 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000bc8:	f7ff fe62 	bl	8000890 <HAL_GetTick>
 8000bcc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000bce:	e021      	b.n	8000c14 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd6:	d01d      	beq.n	8000c14 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d007      	beq.n	8000bee <HAL_ADC_PollForConversion+0x6c>
 8000bde:	f7ff fe57 	bl	8000890 <HAL_GetTick>
 8000be2:	4602      	mov	r2, r0
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d212      	bcs.n	8000c14 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f003 0302 	and.w	r3, r3, #2
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d00b      	beq.n	8000c14 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f043 0204 	orr.w	r2, r3, #4
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e03d      	b.n	8000c90 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d1d6      	bne.n	8000bd0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f06f 0212 	mvn.w	r2, #18
 8000c2a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d123      	bne.n	8000c8e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d11f      	bne.n	8000c8e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d006      	beq.n	8000c6a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d105      	bne.n	8000c8e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	f003 0320 	and.w	r3, r3, #32
 8000cc6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d049      	beq.n	8000d62 <HAL_ADC_IRQHandler+0xca>
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d046      	beq.n	8000d62 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d105      	bne.n	8000cec <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d12b      	bne.n	8000d52 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d127      	bne.n	8000d52 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d006      	beq.n	8000d1e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d119      	bne.n	8000d52 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f022 0220 	bic.w	r2, r2, #32
 8000d2c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d105      	bne.n	8000d52 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	f043 0201 	orr.w	r2, r3, #1
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f000 f8bd 	bl	8000ed2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f06f 0212 	mvn.w	r2, #18
 8000d60:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d70:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d057      	beq.n	8000e28 <HAL_ADC_IRQHandler+0x190>
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d054      	beq.n	8000e28 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d105      	bne.n	8000d96 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d139      	bne.n	8000e18 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000daa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d12b      	bne.n	8000e18 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d124      	bne.n	8000e18 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d11d      	bne.n	8000e18 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d119      	bne.n	8000e18 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000df2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d105      	bne.n	8000e18 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f043 0201 	orr.w	r2, r3, #1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 faa7 	bl	800136c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f06f 020c 	mvn.w	r2, #12
 8000e26:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e36:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d017      	beq.n	8000e6e <HAL_ADC_IRQHandler+0x1d6>
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d014      	beq.n	8000e6e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d10d      	bne.n	8000e6e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f841 	bl	8000ee6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f06f 0201 	mvn.w	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	f003 0320 	and.w	r3, r3, #32
 8000e74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e7c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d015      	beq.n	8000eb0 <HAL_ADC_IRQHandler+0x218>
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d012      	beq.n	8000eb0 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f043 0202 	orr.w	r2, r3, #2
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f06f 0220 	mvn.w	r2, #32
 8000e9e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f000 f82a 	bl	8000efa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f06f 0220 	mvn.w	r2, #32
 8000eae:	601a      	str	r2, [r3, #0]
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d101      	bne.n	8000f2c <HAL_ADC_ConfigChannel+0x1c>
 8000f28:	2302      	movs	r3, #2
 8000f2a:	e113      	b.n	8001154 <HAL_ADC_ConfigChannel+0x244>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d925      	bls.n	8000f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	68d9      	ldr	r1, [r3, #12]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b1e      	subs	r3, #30
 8000f52:	2207      	movs	r2, #7
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	400a      	ands	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68d9      	ldr	r1, [r3, #12]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	4603      	mov	r3, r0
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	4403      	add	r3, r0
 8000f7a:	3b1e      	subs	r3, #30
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	e022      	b.n	8000fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6919      	ldr	r1, [r3, #16]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	461a      	mov	r2, r3
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	400a      	ands	r2, r1
 8000faa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6919      	ldr	r1, [r3, #16]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4403      	add	r3, r0
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d824      	bhi.n	8001020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b05      	subs	r3, #5
 8000fe8:	221f      	movs	r2, #31
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4618      	mov	r0, r3
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	3b05      	subs	r3, #5
 8001012:	fa00 f203 	lsl.w	r2, r0, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	430a      	orrs	r2, r1
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
 800101e:	e04c      	b.n	80010ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b0c      	cmp	r3, #12
 8001026:	d824      	bhi.n	8001072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	3b23      	subs	r3, #35	; 0x23
 800103a:	221f      	movs	r2, #31
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43da      	mvns	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	400a      	ands	r2, r1
 8001048:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	3b23      	subs	r3, #35	; 0x23
 8001064:	fa00 f203 	lsl.w	r2, r0, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	430a      	orrs	r2, r1
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
 8001070:	e023      	b.n	80010ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	3b41      	subs	r3, #65	; 0x41
 8001084:	221f      	movs	r2, #31
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	400a      	ands	r2, r1
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	3b41      	subs	r3, #65	; 0x41
 80010ae:	fa00 f203 	lsl.w	r2, r0, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <HAL_ADC_ConfigChannel+0x250>)
 80010bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a28      	ldr	r2, [pc, #160]	; (8001164 <HAL_ADC_ConfigChannel+0x254>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d10f      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x1d8>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b12      	cmp	r3, #18
 80010ce:	d10b      	bne.n	80010e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <HAL_ADC_ConfigChannel+0x254>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d12b      	bne.n	800114a <HAL_ADC_ConfigChannel+0x23a>
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_ADC_ConfigChannel+0x258>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d003      	beq.n	8001104 <HAL_ADC_ConfigChannel+0x1f4>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b11      	cmp	r3, #17
 8001102:	d122      	bne.n	800114a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a11      	ldr	r2, [pc, #68]	; (8001168 <HAL_ADC_ConfigChannel+0x258>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d111      	bne.n	800114a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_ADC_ConfigChannel+0x25c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a11      	ldr	r2, [pc, #68]	; (8001170 <HAL_ADC_ConfigChannel+0x260>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	0c9a      	lsrs	r2, r3, #18
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800113c:	e002      	b.n	8001144 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40012300 	.word	0x40012300
 8001164:	40012000 	.word	0x40012000
 8001168:	10000012 	.word	0x10000012
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83

08001174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800117c:	4b79      	ldr	r3, [pc, #484]	; (8001364 <ADC_Init+0x1f0>)
 800117e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	431a      	orrs	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6859      	ldr	r1, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	021a      	lsls	r2, r3, #8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	430a      	orrs	r2, r1
 80011bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6859      	ldr	r1, [r3, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6899      	ldr	r1, [r3, #8]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <ADC_Init+0x1f4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d022      	beq.n	8001252 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800121a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6899      	ldr	r1, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800123c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	6899      	ldr	r1, [r3, #8]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	430a      	orrs	r2, r1
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	e00f      	b.n	8001272 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001270:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 0202 	bic.w	r2, r2, #2
 8001280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6899      	ldr	r1, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7e1b      	ldrb	r3, [r3, #24]
 800128c:	005a      	lsls	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d01b      	beq.n	80012d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6859      	ldr	r1, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ca:	3b01      	subs	r3, #1
 80012cc:	035a      	lsls	r2, r3, #13
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	e007      	b.n	80012e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80012f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	3b01      	subs	r3, #1
 8001304:	051a      	lsls	r2, r3, #20
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	430a      	orrs	r2, r1
 800130c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800131c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6899      	ldr	r1, [r3, #8]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800132a:	025a      	lsls	r2, r3, #9
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	430a      	orrs	r2, r1
 8001332:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6899      	ldr	r1, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	029a      	lsls	r2, r3, #10
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	609a      	str	r2, [r3, #8]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40012300 	.word	0x40012300
 8001368:	0f000001 	.word	0x0f000001

0800136c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db0b      	blt.n	800140e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	f003 021f 	and.w	r2, r3, #31
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <__NVIC_EnableIRQ+0x38>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	095b      	lsrs	r3, r3, #5
 8001404:	2001      	movs	r0, #1
 8001406:	fa00 f202 	lsl.w	r2, r0, r2
 800140a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000e100 	.word	0xe000e100

08001420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	6039      	str	r1, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	db0a      	blt.n	800144a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	490c      	ldr	r1, [pc, #48]	; (800146c <__NVIC_SetPriority+0x4c>)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	0112      	lsls	r2, r2, #4
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	440b      	add	r3, r1
 8001444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001448:	e00a      	b.n	8001460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4908      	ldr	r1, [pc, #32]	; (8001470 <__NVIC_SetPriority+0x50>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	f003 030f 	and.w	r3, r3, #15
 8001456:	3b04      	subs	r3, #4
 8001458:	0112      	lsls	r2, r2, #4
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	440b      	add	r3, r1
 800145e:	761a      	strb	r2, [r3, #24]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014ec:	d301      	bcc.n	80014f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00f      	b.n	8001512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <SysTick_Config+0x40>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fa:	210f      	movs	r1, #15
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001500:	f7ff ff8e 	bl	8001420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SysTick_Config+0x40>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <SysTick_Config+0x40>)
 800150c:	2207      	movs	r2, #7
 800150e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	e000e010 	.word	0xe000e010

08001520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff29 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001536:	b580      	push	{r7, lr}
 8001538:	b086      	sub	sp, #24
 800153a:	af00      	add	r7, sp, #0
 800153c:	4603      	mov	r3, r0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff3e 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff8e 	bl	8001474 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5d 	bl	8001420 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff31 	bl	80013e4 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa2 	bl	80014dc <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e165      	b.n	800188c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c0:	2201      	movs	r2, #1
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	429a      	cmp	r2, r3
 80015da:	f040 8154 	bne.w	8001886 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d005      	beq.n	80015f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d130      	bne.n	8001658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	2203      	movs	r2, #3
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	43db      	mvns	r3, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4013      	ands	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f003 0201 	and.w	r2, r3, #1
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b03      	cmp	r3, #3
 8001662:	d017      	beq.n	8001694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d123      	bne.n	80016e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	220f      	movs	r2, #15
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	691a      	ldr	r2, [r3, #16]
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	08da      	lsrs	r2, r3, #3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3208      	adds	r2, #8
 80016e2:	69b9      	ldr	r1, [r7, #24]
 80016e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0203 	and.w	r2, r3, #3
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001724:	2b00      	cmp	r3, #0
 8001726:	f000 80ae 	beq.w	8001886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b5d      	ldr	r3, [pc, #372]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001732:	4a5c      	ldr	r2, [pc, #368]	; (80018a4 <HAL_GPIO_Init+0x300>)
 8001734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001738:	6453      	str	r3, [r2, #68]	; 0x44
 800173a:	4b5a      	ldr	r3, [pc, #360]	; (80018a4 <HAL_GPIO_Init+0x300>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001746:	4a58      	ldr	r2, [pc, #352]	; (80018a8 <HAL_GPIO_Init+0x304>)
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4f      	ldr	r2, [pc, #316]	; (80018ac <HAL_GPIO_Init+0x308>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d025      	beq.n	80017be <HAL_GPIO_Init+0x21a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <HAL_GPIO_Init+0x30c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01f      	beq.n	80017ba <HAL_GPIO_Init+0x216>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x310>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_Init+0x212>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <HAL_GPIO_Init+0x314>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <HAL_GPIO_Init+0x318>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x20a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4a      	ldr	r2, [pc, #296]	; (80018c0 <HAL_GPIO_Init+0x31c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x206>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_GPIO_Init+0x320>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x202>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_Init+0x21c>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_Init+0x21c>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x21c>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x21c>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x21c>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x21c>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x21c>
 80017be:	2300      	movs	r3, #0
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017d0:	4935      	ldr	r1, [pc, #212]	; (80018a8 <HAL_GPIO_Init+0x304>)
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_GPIO_Init+0x324>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001802:	4a31      	ldr	r2, [pc, #196]	; (80018c8 <HAL_GPIO_Init+0x324>)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001808:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_GPIO_Init+0x324>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800182c:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_GPIO_Init+0x324>)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001832:	4b25      	ldr	r3, [pc, #148]	; (80018c8 <HAL_GPIO_Init+0x324>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_GPIO_Init+0x324>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800185c:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_GPIO_Init+0x324>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001880:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_GPIO_Init+0x324>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	f67f ae96 	bls.w	80015c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3724      	adds	r7, #36	; 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40013800 	.word	0x40013800
 80018ac:	40020000 	.word	0x40020000
 80018b0:	40020400 	.word	0x40020400
 80018b4:	40020800 	.word	0x40020800
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40021400 	.word	0x40021400
 80018c4:	40021800 	.word	0x40021800
 80018c8:	40013c00 	.word	0x40013c00

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018fe:	b480      	push	{r7}
 8001900:	b085      	sub	sp, #20
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	460b      	mov	r3, r1
 8001908:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001910:	887a      	ldrh	r2, [r7, #2]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	041a      	lsls	r2, r3, #16
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43d9      	mvns	r1, r3
 800191c:	887b      	ldrh	r3, [r7, #2]
 800191e:	400b      	ands	r3, r1
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	619a      	str	r2, [r3, #24]
}
 8001926:	bf00      	nop
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <__errno>:
 8001934:	4b01      	ldr	r3, [pc, #4]	; (800193c <__errno+0x8>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	2000000c 	.word	0x2000000c

08001940 <__libc_init_array>:
 8001940:	b570      	push	{r4, r5, r6, lr}
 8001942:	4d0d      	ldr	r5, [pc, #52]	; (8001978 <__libc_init_array+0x38>)
 8001944:	4c0d      	ldr	r4, [pc, #52]	; (800197c <__libc_init_array+0x3c>)
 8001946:	1b64      	subs	r4, r4, r5
 8001948:	10a4      	asrs	r4, r4, #2
 800194a:	2600      	movs	r6, #0
 800194c:	42a6      	cmp	r6, r4
 800194e:	d109      	bne.n	8001964 <__libc_init_array+0x24>
 8001950:	4d0b      	ldr	r5, [pc, #44]	; (8001980 <__libc_init_array+0x40>)
 8001952:	4c0c      	ldr	r4, [pc, #48]	; (8001984 <__libc_init_array+0x44>)
 8001954:	f001 f824 	bl	80029a0 <_init>
 8001958:	1b64      	subs	r4, r4, r5
 800195a:	10a4      	asrs	r4, r4, #2
 800195c:	2600      	movs	r6, #0
 800195e:	42a6      	cmp	r6, r4
 8001960:	d105      	bne.n	800196e <__libc_init_array+0x2e>
 8001962:	bd70      	pop	{r4, r5, r6, pc}
 8001964:	f855 3b04 	ldr.w	r3, [r5], #4
 8001968:	4798      	blx	r3
 800196a:	3601      	adds	r6, #1
 800196c:	e7ee      	b.n	800194c <__libc_init_array+0xc>
 800196e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001972:	4798      	blx	r3
 8001974:	3601      	adds	r6, #1
 8001976:	e7f2      	b.n	800195e <__libc_init_array+0x1e>
 8001978:	08002a78 	.word	0x08002a78
 800197c:	08002a78 	.word	0x08002a78
 8001980:	08002a78 	.word	0x08002a78
 8001984:	08002a7c 	.word	0x08002a7c

08001988 <memset>:
 8001988:	4402      	add	r2, r0
 800198a:	4603      	mov	r3, r0
 800198c:	4293      	cmp	r3, r2
 800198e:	d100      	bne.n	8001992 <memset+0xa>
 8001990:	4770      	bx	lr
 8001992:	f803 1b01 	strb.w	r1, [r3], #1
 8001996:	e7f9      	b.n	800198c <memset+0x4>

08001998 <iprintf>:
 8001998:	b40f      	push	{r0, r1, r2, r3}
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <iprintf+0x2c>)
 800199c:	b513      	push	{r0, r1, r4, lr}
 800199e:	681c      	ldr	r4, [r3, #0]
 80019a0:	b124      	cbz	r4, 80019ac <iprintf+0x14>
 80019a2:	69a3      	ldr	r3, [r4, #24]
 80019a4:	b913      	cbnz	r3, 80019ac <iprintf+0x14>
 80019a6:	4620      	mov	r0, r4
 80019a8:	f000 fa5e 	bl	8001e68 <__sinit>
 80019ac:	ab05      	add	r3, sp, #20
 80019ae:	9a04      	ldr	r2, [sp, #16]
 80019b0:	68a1      	ldr	r1, [r4, #8]
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 fc67 	bl	8002288 <_vfiprintf_r>
 80019ba:	b002      	add	sp, #8
 80019bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019c0:	b004      	add	sp, #16
 80019c2:	4770      	bx	lr
 80019c4:	2000000c 	.word	0x2000000c

080019c8 <_puts_r>:
 80019c8:	b570      	push	{r4, r5, r6, lr}
 80019ca:	460e      	mov	r6, r1
 80019cc:	4605      	mov	r5, r0
 80019ce:	b118      	cbz	r0, 80019d8 <_puts_r+0x10>
 80019d0:	6983      	ldr	r3, [r0, #24]
 80019d2:	b90b      	cbnz	r3, 80019d8 <_puts_r+0x10>
 80019d4:	f000 fa48 	bl	8001e68 <__sinit>
 80019d8:	69ab      	ldr	r3, [r5, #24]
 80019da:	68ac      	ldr	r4, [r5, #8]
 80019dc:	b913      	cbnz	r3, 80019e4 <_puts_r+0x1c>
 80019de:	4628      	mov	r0, r5
 80019e0:	f000 fa42 	bl	8001e68 <__sinit>
 80019e4:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <_puts_r+0xd0>)
 80019e6:	429c      	cmp	r4, r3
 80019e8:	d120      	bne.n	8001a2c <_puts_r+0x64>
 80019ea:	686c      	ldr	r4, [r5, #4]
 80019ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019ee:	07db      	lsls	r3, r3, #31
 80019f0:	d405      	bmi.n	80019fe <_puts_r+0x36>
 80019f2:	89a3      	ldrh	r3, [r4, #12]
 80019f4:	0598      	lsls	r0, r3, #22
 80019f6:	d402      	bmi.n	80019fe <_puts_r+0x36>
 80019f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019fa:	f000 fad3 	bl	8001fa4 <__retarget_lock_acquire_recursive>
 80019fe:	89a3      	ldrh	r3, [r4, #12]
 8001a00:	0719      	lsls	r1, r3, #28
 8001a02:	d51d      	bpl.n	8001a40 <_puts_r+0x78>
 8001a04:	6923      	ldr	r3, [r4, #16]
 8001a06:	b1db      	cbz	r3, 8001a40 <_puts_r+0x78>
 8001a08:	3e01      	subs	r6, #1
 8001a0a:	68a3      	ldr	r3, [r4, #8]
 8001a0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60a3      	str	r3, [r4, #8]
 8001a14:	bb39      	cbnz	r1, 8001a66 <_puts_r+0x9e>
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da38      	bge.n	8001a8c <_puts_r+0xc4>
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	210a      	movs	r1, #10
 8001a1e:	4628      	mov	r0, r5
 8001a20:	f000 f848 	bl	8001ab4 <__swbuf_r>
 8001a24:	3001      	adds	r0, #1
 8001a26:	d011      	beq.n	8001a4c <_puts_r+0x84>
 8001a28:	250a      	movs	r5, #10
 8001a2a:	e011      	b.n	8001a50 <_puts_r+0x88>
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <_puts_r+0xd4>)
 8001a2e:	429c      	cmp	r4, r3
 8001a30:	d101      	bne.n	8001a36 <_puts_r+0x6e>
 8001a32:	68ac      	ldr	r4, [r5, #8]
 8001a34:	e7da      	b.n	80019ec <_puts_r+0x24>
 8001a36:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <_puts_r+0xd8>)
 8001a38:	429c      	cmp	r4, r3
 8001a3a:	bf08      	it	eq
 8001a3c:	68ec      	ldreq	r4, [r5, #12]
 8001a3e:	e7d5      	b.n	80019ec <_puts_r+0x24>
 8001a40:	4621      	mov	r1, r4
 8001a42:	4628      	mov	r0, r5
 8001a44:	f000 f888 	bl	8001b58 <__swsetup_r>
 8001a48:	2800      	cmp	r0, #0
 8001a4a:	d0dd      	beq.n	8001a08 <_puts_r+0x40>
 8001a4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a52:	07da      	lsls	r2, r3, #31
 8001a54:	d405      	bmi.n	8001a62 <_puts_r+0x9a>
 8001a56:	89a3      	ldrh	r3, [r4, #12]
 8001a58:	059b      	lsls	r3, r3, #22
 8001a5a:	d402      	bmi.n	8001a62 <_puts_r+0x9a>
 8001a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a5e:	f000 faa2 	bl	8001fa6 <__retarget_lock_release_recursive>
 8001a62:	4628      	mov	r0, r5
 8001a64:	bd70      	pop	{r4, r5, r6, pc}
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da04      	bge.n	8001a74 <_puts_r+0xac>
 8001a6a:	69a2      	ldr	r2, [r4, #24]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	dc06      	bgt.n	8001a7e <_puts_r+0xb6>
 8001a70:	290a      	cmp	r1, #10
 8001a72:	d004      	beq.n	8001a7e <_puts_r+0xb6>
 8001a74:	6823      	ldr	r3, [r4, #0]
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	6022      	str	r2, [r4, #0]
 8001a7a:	7019      	strb	r1, [r3, #0]
 8001a7c:	e7c5      	b.n	8001a0a <_puts_r+0x42>
 8001a7e:	4622      	mov	r2, r4
 8001a80:	4628      	mov	r0, r5
 8001a82:	f000 f817 	bl	8001ab4 <__swbuf_r>
 8001a86:	3001      	adds	r0, #1
 8001a88:	d1bf      	bne.n	8001a0a <_puts_r+0x42>
 8001a8a:	e7df      	b.n	8001a4c <_puts_r+0x84>
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	250a      	movs	r5, #10
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	6022      	str	r2, [r4, #0]
 8001a94:	701d      	strb	r5, [r3, #0]
 8001a96:	e7db      	b.n	8001a50 <_puts_r+0x88>
 8001a98:	08002a04 	.word	0x08002a04
 8001a9c:	08002a24 	.word	0x08002a24
 8001aa0:	080029e4 	.word	0x080029e4

08001aa4 <puts>:
 8001aa4:	4b02      	ldr	r3, [pc, #8]	; (8001ab0 <puts+0xc>)
 8001aa6:	4601      	mov	r1, r0
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f7ff bf8d 	b.w	80019c8 <_puts_r>
 8001aae:	bf00      	nop
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <__swbuf_r>:
 8001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ab6:	460e      	mov	r6, r1
 8001ab8:	4614      	mov	r4, r2
 8001aba:	4605      	mov	r5, r0
 8001abc:	b118      	cbz	r0, 8001ac6 <__swbuf_r+0x12>
 8001abe:	6983      	ldr	r3, [r0, #24]
 8001ac0:	b90b      	cbnz	r3, 8001ac6 <__swbuf_r+0x12>
 8001ac2:	f000 f9d1 	bl	8001e68 <__sinit>
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <__swbuf_r+0x98>)
 8001ac8:	429c      	cmp	r4, r3
 8001aca:	d12b      	bne.n	8001b24 <__swbuf_r+0x70>
 8001acc:	686c      	ldr	r4, [r5, #4]
 8001ace:	69a3      	ldr	r3, [r4, #24]
 8001ad0:	60a3      	str	r3, [r4, #8]
 8001ad2:	89a3      	ldrh	r3, [r4, #12]
 8001ad4:	071a      	lsls	r2, r3, #28
 8001ad6:	d52f      	bpl.n	8001b38 <__swbuf_r+0x84>
 8001ad8:	6923      	ldr	r3, [r4, #16]
 8001ada:	b36b      	cbz	r3, 8001b38 <__swbuf_r+0x84>
 8001adc:	6923      	ldr	r3, [r4, #16]
 8001ade:	6820      	ldr	r0, [r4, #0]
 8001ae0:	1ac0      	subs	r0, r0, r3
 8001ae2:	6963      	ldr	r3, [r4, #20]
 8001ae4:	b2f6      	uxtb	r6, r6
 8001ae6:	4283      	cmp	r3, r0
 8001ae8:	4637      	mov	r7, r6
 8001aea:	dc04      	bgt.n	8001af6 <__swbuf_r+0x42>
 8001aec:	4621      	mov	r1, r4
 8001aee:	4628      	mov	r0, r5
 8001af0:	f000 f926 	bl	8001d40 <_fflush_r>
 8001af4:	bb30      	cbnz	r0, 8001b44 <__swbuf_r+0x90>
 8001af6:	68a3      	ldr	r3, [r4, #8]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	60a3      	str	r3, [r4, #8]
 8001afc:	6823      	ldr	r3, [r4, #0]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	6022      	str	r2, [r4, #0]
 8001b02:	701e      	strb	r6, [r3, #0]
 8001b04:	6963      	ldr	r3, [r4, #20]
 8001b06:	3001      	adds	r0, #1
 8001b08:	4283      	cmp	r3, r0
 8001b0a:	d004      	beq.n	8001b16 <__swbuf_r+0x62>
 8001b0c:	89a3      	ldrh	r3, [r4, #12]
 8001b0e:	07db      	lsls	r3, r3, #31
 8001b10:	d506      	bpl.n	8001b20 <__swbuf_r+0x6c>
 8001b12:	2e0a      	cmp	r6, #10
 8001b14:	d104      	bne.n	8001b20 <__swbuf_r+0x6c>
 8001b16:	4621      	mov	r1, r4
 8001b18:	4628      	mov	r0, r5
 8001b1a:	f000 f911 	bl	8001d40 <_fflush_r>
 8001b1e:	b988      	cbnz	r0, 8001b44 <__swbuf_r+0x90>
 8001b20:	4638      	mov	r0, r7
 8001b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <__swbuf_r+0x9c>)
 8001b26:	429c      	cmp	r4, r3
 8001b28:	d101      	bne.n	8001b2e <__swbuf_r+0x7a>
 8001b2a:	68ac      	ldr	r4, [r5, #8]
 8001b2c:	e7cf      	b.n	8001ace <__swbuf_r+0x1a>
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <__swbuf_r+0xa0>)
 8001b30:	429c      	cmp	r4, r3
 8001b32:	bf08      	it	eq
 8001b34:	68ec      	ldreq	r4, [r5, #12]
 8001b36:	e7ca      	b.n	8001ace <__swbuf_r+0x1a>
 8001b38:	4621      	mov	r1, r4
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f000 f80c 	bl	8001b58 <__swsetup_r>
 8001b40:	2800      	cmp	r0, #0
 8001b42:	d0cb      	beq.n	8001adc <__swbuf_r+0x28>
 8001b44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001b48:	e7ea      	b.n	8001b20 <__swbuf_r+0x6c>
 8001b4a:	bf00      	nop
 8001b4c:	08002a04 	.word	0x08002a04
 8001b50:	08002a24 	.word	0x08002a24
 8001b54:	080029e4 	.word	0x080029e4

08001b58 <__swsetup_r>:
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <__swsetup_r+0xcc>)
 8001b5a:	b570      	push	{r4, r5, r6, lr}
 8001b5c:	681d      	ldr	r5, [r3, #0]
 8001b5e:	4606      	mov	r6, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	b125      	cbz	r5, 8001b6e <__swsetup_r+0x16>
 8001b64:	69ab      	ldr	r3, [r5, #24]
 8001b66:	b913      	cbnz	r3, 8001b6e <__swsetup_r+0x16>
 8001b68:	4628      	mov	r0, r5
 8001b6a:	f000 f97d 	bl	8001e68 <__sinit>
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <__swsetup_r+0xd0>)
 8001b70:	429c      	cmp	r4, r3
 8001b72:	d10f      	bne.n	8001b94 <__swsetup_r+0x3c>
 8001b74:	686c      	ldr	r4, [r5, #4]
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b7c:	0719      	lsls	r1, r3, #28
 8001b7e:	d42c      	bmi.n	8001bda <__swsetup_r+0x82>
 8001b80:	06dd      	lsls	r5, r3, #27
 8001b82:	d411      	bmi.n	8001ba8 <__swsetup_r+0x50>
 8001b84:	2309      	movs	r3, #9
 8001b86:	6033      	str	r3, [r6, #0]
 8001b88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b8c:	81a3      	strh	r3, [r4, #12]
 8001b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b92:	e03e      	b.n	8001c12 <__swsetup_r+0xba>
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <__swsetup_r+0xd4>)
 8001b96:	429c      	cmp	r4, r3
 8001b98:	d101      	bne.n	8001b9e <__swsetup_r+0x46>
 8001b9a:	68ac      	ldr	r4, [r5, #8]
 8001b9c:	e7eb      	b.n	8001b76 <__swsetup_r+0x1e>
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <__swsetup_r+0xd8>)
 8001ba0:	429c      	cmp	r4, r3
 8001ba2:	bf08      	it	eq
 8001ba4:	68ec      	ldreq	r4, [r5, #12]
 8001ba6:	e7e6      	b.n	8001b76 <__swsetup_r+0x1e>
 8001ba8:	0758      	lsls	r0, r3, #29
 8001baa:	d512      	bpl.n	8001bd2 <__swsetup_r+0x7a>
 8001bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bae:	b141      	cbz	r1, 8001bc2 <__swsetup_r+0x6a>
 8001bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bb4:	4299      	cmp	r1, r3
 8001bb6:	d002      	beq.n	8001bbe <__swsetup_r+0x66>
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f000 fa5b 	bl	8002074 <_free_r>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8001bc2:	89a3      	ldrh	r3, [r4, #12]
 8001bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001bc8:	81a3      	strh	r3, [r4, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6063      	str	r3, [r4, #4]
 8001bce:	6923      	ldr	r3, [r4, #16]
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	89a3      	ldrh	r3, [r4, #12]
 8001bd4:	f043 0308 	orr.w	r3, r3, #8
 8001bd8:	81a3      	strh	r3, [r4, #12]
 8001bda:	6923      	ldr	r3, [r4, #16]
 8001bdc:	b94b      	cbnz	r3, 8001bf2 <__swsetup_r+0x9a>
 8001bde:	89a3      	ldrh	r3, [r4, #12]
 8001be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be8:	d003      	beq.n	8001bf2 <__swsetup_r+0x9a>
 8001bea:	4621      	mov	r1, r4
 8001bec:	4630      	mov	r0, r6
 8001bee:	f000 fa01 	bl	8001ff4 <__smakebuf_r>
 8001bf2:	89a0      	ldrh	r0, [r4, #12]
 8001bf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bf8:	f010 0301 	ands.w	r3, r0, #1
 8001bfc:	d00a      	beq.n	8001c14 <__swsetup_r+0xbc>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60a3      	str	r3, [r4, #8]
 8001c02:	6963      	ldr	r3, [r4, #20]
 8001c04:	425b      	negs	r3, r3
 8001c06:	61a3      	str	r3, [r4, #24]
 8001c08:	6923      	ldr	r3, [r4, #16]
 8001c0a:	b943      	cbnz	r3, 8001c1e <__swsetup_r+0xc6>
 8001c0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c10:	d1ba      	bne.n	8001b88 <__swsetup_r+0x30>
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
 8001c14:	0781      	lsls	r1, r0, #30
 8001c16:	bf58      	it	pl
 8001c18:	6963      	ldrpl	r3, [r4, #20]
 8001c1a:	60a3      	str	r3, [r4, #8]
 8001c1c:	e7f4      	b.n	8001c08 <__swsetup_r+0xb0>
 8001c1e:	2000      	movs	r0, #0
 8001c20:	e7f7      	b.n	8001c12 <__swsetup_r+0xba>
 8001c22:	bf00      	nop
 8001c24:	2000000c 	.word	0x2000000c
 8001c28:	08002a04 	.word	0x08002a04
 8001c2c:	08002a24 	.word	0x08002a24
 8001c30:	080029e4 	.word	0x080029e4

08001c34 <__sflush_r>:
 8001c34:	898a      	ldrh	r2, [r1, #12]
 8001c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c3a:	4605      	mov	r5, r0
 8001c3c:	0710      	lsls	r0, r2, #28
 8001c3e:	460c      	mov	r4, r1
 8001c40:	d458      	bmi.n	8001cf4 <__sflush_r+0xc0>
 8001c42:	684b      	ldr	r3, [r1, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dc05      	bgt.n	8001c54 <__sflush_r+0x20>
 8001c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	dc02      	bgt.n	8001c54 <__sflush_r+0x20>
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c56:	2e00      	cmp	r6, #0
 8001c58:	d0f9      	beq.n	8001c4e <__sflush_r+0x1a>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c60:	682f      	ldr	r7, [r5, #0]
 8001c62:	602b      	str	r3, [r5, #0]
 8001c64:	d032      	beq.n	8001ccc <__sflush_r+0x98>
 8001c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c68:	89a3      	ldrh	r3, [r4, #12]
 8001c6a:	075a      	lsls	r2, r3, #29
 8001c6c:	d505      	bpl.n	8001c7a <__sflush_r+0x46>
 8001c6e:	6863      	ldr	r3, [r4, #4]
 8001c70:	1ac0      	subs	r0, r0, r3
 8001c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c74:	b10b      	cbz	r3, 8001c7a <__sflush_r+0x46>
 8001c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c78:	1ac0      	subs	r0, r0, r3
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c80:	6a21      	ldr	r1, [r4, #32]
 8001c82:	4628      	mov	r0, r5
 8001c84:	47b0      	blx	r6
 8001c86:	1c43      	adds	r3, r0, #1
 8001c88:	89a3      	ldrh	r3, [r4, #12]
 8001c8a:	d106      	bne.n	8001c9a <__sflush_r+0x66>
 8001c8c:	6829      	ldr	r1, [r5, #0]
 8001c8e:	291d      	cmp	r1, #29
 8001c90:	d82c      	bhi.n	8001cec <__sflush_r+0xb8>
 8001c92:	4a2a      	ldr	r2, [pc, #168]	; (8001d3c <__sflush_r+0x108>)
 8001c94:	40ca      	lsrs	r2, r1
 8001c96:	07d6      	lsls	r6, r2, #31
 8001c98:	d528      	bpl.n	8001cec <__sflush_r+0xb8>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	6062      	str	r2, [r4, #4]
 8001c9e:	04d9      	lsls	r1, r3, #19
 8001ca0:	6922      	ldr	r2, [r4, #16]
 8001ca2:	6022      	str	r2, [r4, #0]
 8001ca4:	d504      	bpl.n	8001cb0 <__sflush_r+0x7c>
 8001ca6:	1c42      	adds	r2, r0, #1
 8001ca8:	d101      	bne.n	8001cae <__sflush_r+0x7a>
 8001caa:	682b      	ldr	r3, [r5, #0]
 8001cac:	b903      	cbnz	r3, 8001cb0 <__sflush_r+0x7c>
 8001cae:	6560      	str	r0, [r4, #84]	; 0x54
 8001cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cb2:	602f      	str	r7, [r5, #0]
 8001cb4:	2900      	cmp	r1, #0
 8001cb6:	d0ca      	beq.n	8001c4e <__sflush_r+0x1a>
 8001cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001cbc:	4299      	cmp	r1, r3
 8001cbe:	d002      	beq.n	8001cc6 <__sflush_r+0x92>
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	f000 f9d7 	bl	8002074 <_free_r>
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	6360      	str	r0, [r4, #52]	; 0x34
 8001cca:	e7c1      	b.n	8001c50 <__sflush_r+0x1c>
 8001ccc:	6a21      	ldr	r1, [r4, #32]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	47b0      	blx	r6
 8001cd4:	1c41      	adds	r1, r0, #1
 8001cd6:	d1c7      	bne.n	8001c68 <__sflush_r+0x34>
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0c4      	beq.n	8001c68 <__sflush_r+0x34>
 8001cde:	2b1d      	cmp	r3, #29
 8001ce0:	d001      	beq.n	8001ce6 <__sflush_r+0xb2>
 8001ce2:	2b16      	cmp	r3, #22
 8001ce4:	d101      	bne.n	8001cea <__sflush_r+0xb6>
 8001ce6:	602f      	str	r7, [r5, #0]
 8001ce8:	e7b1      	b.n	8001c4e <__sflush_r+0x1a>
 8001cea:	89a3      	ldrh	r3, [r4, #12]
 8001cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cf0:	81a3      	strh	r3, [r4, #12]
 8001cf2:	e7ad      	b.n	8001c50 <__sflush_r+0x1c>
 8001cf4:	690f      	ldr	r7, [r1, #16]
 8001cf6:	2f00      	cmp	r7, #0
 8001cf8:	d0a9      	beq.n	8001c4e <__sflush_r+0x1a>
 8001cfa:	0793      	lsls	r3, r2, #30
 8001cfc:	680e      	ldr	r6, [r1, #0]
 8001cfe:	bf08      	it	eq
 8001d00:	694b      	ldreq	r3, [r1, #20]
 8001d02:	600f      	str	r7, [r1, #0]
 8001d04:	bf18      	it	ne
 8001d06:	2300      	movne	r3, #0
 8001d08:	eba6 0807 	sub.w	r8, r6, r7
 8001d0c:	608b      	str	r3, [r1, #8]
 8001d0e:	f1b8 0f00 	cmp.w	r8, #0
 8001d12:	dd9c      	ble.n	8001c4e <__sflush_r+0x1a>
 8001d14:	6a21      	ldr	r1, [r4, #32]
 8001d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d18:	4643      	mov	r3, r8
 8001d1a:	463a      	mov	r2, r7
 8001d1c:	4628      	mov	r0, r5
 8001d1e:	47b0      	blx	r6
 8001d20:	2800      	cmp	r0, #0
 8001d22:	dc06      	bgt.n	8001d32 <__sflush_r+0xfe>
 8001d24:	89a3      	ldrh	r3, [r4, #12]
 8001d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d2a:	81a3      	strh	r3, [r4, #12]
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d30:	e78e      	b.n	8001c50 <__sflush_r+0x1c>
 8001d32:	4407      	add	r7, r0
 8001d34:	eba8 0800 	sub.w	r8, r8, r0
 8001d38:	e7e9      	b.n	8001d0e <__sflush_r+0xda>
 8001d3a:	bf00      	nop
 8001d3c:	20400001 	.word	0x20400001

08001d40 <_fflush_r>:
 8001d40:	b538      	push	{r3, r4, r5, lr}
 8001d42:	690b      	ldr	r3, [r1, #16]
 8001d44:	4605      	mov	r5, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	b913      	cbnz	r3, 8001d50 <_fflush_r+0x10>
 8001d4a:	2500      	movs	r5, #0
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	bd38      	pop	{r3, r4, r5, pc}
 8001d50:	b118      	cbz	r0, 8001d5a <_fflush_r+0x1a>
 8001d52:	6983      	ldr	r3, [r0, #24]
 8001d54:	b90b      	cbnz	r3, 8001d5a <_fflush_r+0x1a>
 8001d56:	f000 f887 	bl	8001e68 <__sinit>
 8001d5a:	4b14      	ldr	r3, [pc, #80]	; (8001dac <_fflush_r+0x6c>)
 8001d5c:	429c      	cmp	r4, r3
 8001d5e:	d11b      	bne.n	8001d98 <_fflush_r+0x58>
 8001d60:	686c      	ldr	r4, [r5, #4]
 8001d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0ef      	beq.n	8001d4a <_fflush_r+0xa>
 8001d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d6c:	07d0      	lsls	r0, r2, #31
 8001d6e:	d404      	bmi.n	8001d7a <_fflush_r+0x3a>
 8001d70:	0599      	lsls	r1, r3, #22
 8001d72:	d402      	bmi.n	8001d7a <_fflush_r+0x3a>
 8001d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d76:	f000 f915 	bl	8001fa4 <__retarget_lock_acquire_recursive>
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	f7ff ff59 	bl	8001c34 <__sflush_r>
 8001d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d84:	07da      	lsls	r2, r3, #31
 8001d86:	4605      	mov	r5, r0
 8001d88:	d4e0      	bmi.n	8001d4c <_fflush_r+0xc>
 8001d8a:	89a3      	ldrh	r3, [r4, #12]
 8001d8c:	059b      	lsls	r3, r3, #22
 8001d8e:	d4dd      	bmi.n	8001d4c <_fflush_r+0xc>
 8001d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d92:	f000 f908 	bl	8001fa6 <__retarget_lock_release_recursive>
 8001d96:	e7d9      	b.n	8001d4c <_fflush_r+0xc>
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <_fflush_r+0x70>)
 8001d9a:	429c      	cmp	r4, r3
 8001d9c:	d101      	bne.n	8001da2 <_fflush_r+0x62>
 8001d9e:	68ac      	ldr	r4, [r5, #8]
 8001da0:	e7df      	b.n	8001d62 <_fflush_r+0x22>
 8001da2:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <_fflush_r+0x74>)
 8001da4:	429c      	cmp	r4, r3
 8001da6:	bf08      	it	eq
 8001da8:	68ec      	ldreq	r4, [r5, #12]
 8001daa:	e7da      	b.n	8001d62 <_fflush_r+0x22>
 8001dac:	08002a04 	.word	0x08002a04
 8001db0:	08002a24 	.word	0x08002a24
 8001db4:	080029e4 	.word	0x080029e4

08001db8 <std>:
 8001db8:	2300      	movs	r3, #0
 8001dba:	b510      	push	{r4, lr}
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8001dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001dc6:	6083      	str	r3, [r0, #8]
 8001dc8:	8181      	strh	r1, [r0, #12]
 8001dca:	6643      	str	r3, [r0, #100]	; 0x64
 8001dcc:	81c2      	strh	r2, [r0, #14]
 8001dce:	6183      	str	r3, [r0, #24]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	2208      	movs	r2, #8
 8001dd4:	305c      	adds	r0, #92	; 0x5c
 8001dd6:	f7ff fdd7 	bl	8001988 <memset>
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <std+0x38>)
 8001ddc:	6263      	str	r3, [r4, #36]	; 0x24
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <std+0x3c>)
 8001de0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <std+0x40>)
 8001de4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <std+0x44>)
 8001de8:	6224      	str	r4, [r4, #32]
 8001dea:	6323      	str	r3, [r4, #48]	; 0x30
 8001dec:	bd10      	pop	{r4, pc}
 8001dee:	bf00      	nop
 8001df0:	08002831 	.word	0x08002831
 8001df4:	08002853 	.word	0x08002853
 8001df8:	0800288b 	.word	0x0800288b
 8001dfc:	080028af 	.word	0x080028af

08001e00 <_cleanup_r>:
 8001e00:	4901      	ldr	r1, [pc, #4]	; (8001e08 <_cleanup_r+0x8>)
 8001e02:	f000 b8af 	b.w	8001f64 <_fwalk_reent>
 8001e06:	bf00      	nop
 8001e08:	08001d41 	.word	0x08001d41

08001e0c <__sfmoreglue>:
 8001e0c:	b570      	push	{r4, r5, r6, lr}
 8001e0e:	2268      	movs	r2, #104	; 0x68
 8001e10:	1e4d      	subs	r5, r1, #1
 8001e12:	4355      	muls	r5, r2
 8001e14:	460e      	mov	r6, r1
 8001e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e1a:	f000 f997 	bl	800214c <_malloc_r>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	b140      	cbz	r0, 8001e34 <__sfmoreglue+0x28>
 8001e22:	2100      	movs	r1, #0
 8001e24:	e9c0 1600 	strd	r1, r6, [r0]
 8001e28:	300c      	adds	r0, #12
 8001e2a:	60a0      	str	r0, [r4, #8]
 8001e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e30:	f7ff fdaa 	bl	8001988 <memset>
 8001e34:	4620      	mov	r0, r4
 8001e36:	bd70      	pop	{r4, r5, r6, pc}

08001e38 <__sfp_lock_acquire>:
 8001e38:	4801      	ldr	r0, [pc, #4]	; (8001e40 <__sfp_lock_acquire+0x8>)
 8001e3a:	f000 b8b3 	b.w	8001fa4 <__retarget_lock_acquire_recursive>
 8001e3e:	bf00      	nop
 8001e40:	200000dd 	.word	0x200000dd

08001e44 <__sfp_lock_release>:
 8001e44:	4801      	ldr	r0, [pc, #4]	; (8001e4c <__sfp_lock_release+0x8>)
 8001e46:	f000 b8ae 	b.w	8001fa6 <__retarget_lock_release_recursive>
 8001e4a:	bf00      	nop
 8001e4c:	200000dd 	.word	0x200000dd

08001e50 <__sinit_lock_acquire>:
 8001e50:	4801      	ldr	r0, [pc, #4]	; (8001e58 <__sinit_lock_acquire+0x8>)
 8001e52:	f000 b8a7 	b.w	8001fa4 <__retarget_lock_acquire_recursive>
 8001e56:	bf00      	nop
 8001e58:	200000de 	.word	0x200000de

08001e5c <__sinit_lock_release>:
 8001e5c:	4801      	ldr	r0, [pc, #4]	; (8001e64 <__sinit_lock_release+0x8>)
 8001e5e:	f000 b8a2 	b.w	8001fa6 <__retarget_lock_release_recursive>
 8001e62:	bf00      	nop
 8001e64:	200000de 	.word	0x200000de

08001e68 <__sinit>:
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	f7ff fff0 	bl	8001e50 <__sinit_lock_acquire>
 8001e70:	69a3      	ldr	r3, [r4, #24]
 8001e72:	b11b      	cbz	r3, 8001e7c <__sinit+0x14>
 8001e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e78:	f7ff bff0 	b.w	8001e5c <__sinit_lock_release>
 8001e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e80:	6523      	str	r3, [r4, #80]	; 0x50
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <__sinit+0x68>)
 8001e84:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <__sinit+0x6c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e8a:	42a3      	cmp	r3, r4
 8001e8c:	bf04      	itt	eq
 8001e8e:	2301      	moveq	r3, #1
 8001e90:	61a3      	streq	r3, [r4, #24]
 8001e92:	4620      	mov	r0, r4
 8001e94:	f000 f820 	bl	8001ed8 <__sfp>
 8001e98:	6060      	str	r0, [r4, #4]
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f000 f81c 	bl	8001ed8 <__sfp>
 8001ea0:	60a0      	str	r0, [r4, #8]
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f000 f818 	bl	8001ed8 <__sfp>
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60e0      	str	r0, [r4, #12]
 8001eac:	2104      	movs	r1, #4
 8001eae:	6860      	ldr	r0, [r4, #4]
 8001eb0:	f7ff ff82 	bl	8001db8 <std>
 8001eb4:	68a0      	ldr	r0, [r4, #8]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2109      	movs	r1, #9
 8001eba:	f7ff ff7d 	bl	8001db8 <std>
 8001ebe:	68e0      	ldr	r0, [r4, #12]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	2112      	movs	r1, #18
 8001ec4:	f7ff ff78 	bl	8001db8 <std>
 8001ec8:	2301      	movs	r3, #1
 8001eca:	61a3      	str	r3, [r4, #24]
 8001ecc:	e7d2      	b.n	8001e74 <__sinit+0xc>
 8001ece:	bf00      	nop
 8001ed0:	080029e0 	.word	0x080029e0
 8001ed4:	08001e01 	.word	0x08001e01

08001ed8 <__sfp>:
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eda:	4607      	mov	r7, r0
 8001edc:	f7ff ffac 	bl	8001e38 <__sfp_lock_acquire>
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <__sfp+0x84>)
 8001ee2:	681e      	ldr	r6, [r3, #0]
 8001ee4:	69b3      	ldr	r3, [r6, #24]
 8001ee6:	b913      	cbnz	r3, 8001eee <__sfp+0x16>
 8001ee8:	4630      	mov	r0, r6
 8001eea:	f7ff ffbd 	bl	8001e68 <__sinit>
 8001eee:	3648      	adds	r6, #72	; 0x48
 8001ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	d503      	bpl.n	8001f00 <__sfp+0x28>
 8001ef8:	6833      	ldr	r3, [r6, #0]
 8001efa:	b30b      	cbz	r3, 8001f40 <__sfp+0x68>
 8001efc:	6836      	ldr	r6, [r6, #0]
 8001efe:	e7f7      	b.n	8001ef0 <__sfp+0x18>
 8001f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f04:	b9d5      	cbnz	r5, 8001f3c <__sfp+0x64>
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <__sfp+0x88>)
 8001f08:	60e3      	str	r3, [r4, #12]
 8001f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f0e:	6665      	str	r5, [r4, #100]	; 0x64
 8001f10:	f000 f847 	bl	8001fa2 <__retarget_lock_init_recursive>
 8001f14:	f7ff ff96 	bl	8001e44 <__sfp_lock_release>
 8001f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f20:	6025      	str	r5, [r4, #0]
 8001f22:	61a5      	str	r5, [r4, #24]
 8001f24:	2208      	movs	r2, #8
 8001f26:	4629      	mov	r1, r5
 8001f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f2c:	f7ff fd2c 	bl	8001988 <memset>
 8001f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f38:	4620      	mov	r0, r4
 8001f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f3c:	3468      	adds	r4, #104	; 0x68
 8001f3e:	e7d9      	b.n	8001ef4 <__sfp+0x1c>
 8001f40:	2104      	movs	r1, #4
 8001f42:	4638      	mov	r0, r7
 8001f44:	f7ff ff62 	bl	8001e0c <__sfmoreglue>
 8001f48:	4604      	mov	r4, r0
 8001f4a:	6030      	str	r0, [r6, #0]
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d1d5      	bne.n	8001efc <__sfp+0x24>
 8001f50:	f7ff ff78 	bl	8001e44 <__sfp_lock_release>
 8001f54:	230c      	movs	r3, #12
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	e7ee      	b.n	8001f38 <__sfp+0x60>
 8001f5a:	bf00      	nop
 8001f5c:	080029e0 	.word	0x080029e0
 8001f60:	ffff0001 	.word	0xffff0001

08001f64 <_fwalk_reent>:
 8001f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f68:	4606      	mov	r6, r0
 8001f6a:	4688      	mov	r8, r1
 8001f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f70:	2700      	movs	r7, #0
 8001f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f76:	f1b9 0901 	subs.w	r9, r9, #1
 8001f7a:	d505      	bpl.n	8001f88 <_fwalk_reent+0x24>
 8001f7c:	6824      	ldr	r4, [r4, #0]
 8001f7e:	2c00      	cmp	r4, #0
 8001f80:	d1f7      	bne.n	8001f72 <_fwalk_reent+0xe>
 8001f82:	4638      	mov	r0, r7
 8001f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f88:	89ab      	ldrh	r3, [r5, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d907      	bls.n	8001f9e <_fwalk_reent+0x3a>
 8001f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f92:	3301      	adds	r3, #1
 8001f94:	d003      	beq.n	8001f9e <_fwalk_reent+0x3a>
 8001f96:	4629      	mov	r1, r5
 8001f98:	4630      	mov	r0, r6
 8001f9a:	47c0      	blx	r8
 8001f9c:	4307      	orrs	r7, r0
 8001f9e:	3568      	adds	r5, #104	; 0x68
 8001fa0:	e7e9      	b.n	8001f76 <_fwalk_reent+0x12>

08001fa2 <__retarget_lock_init_recursive>:
 8001fa2:	4770      	bx	lr

08001fa4 <__retarget_lock_acquire_recursive>:
 8001fa4:	4770      	bx	lr

08001fa6 <__retarget_lock_release_recursive>:
 8001fa6:	4770      	bx	lr

08001fa8 <__swhatbuf_r>:
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	460e      	mov	r6, r1
 8001fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fb0:	2900      	cmp	r1, #0
 8001fb2:	b096      	sub	sp, #88	; 0x58
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	da08      	bge.n	8001fcc <__swhatbuf_r+0x24>
 8001fba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	602a      	str	r2, [r5, #0]
 8001fc2:	061a      	lsls	r2, r3, #24
 8001fc4:	d410      	bmi.n	8001fe8 <__swhatbuf_r+0x40>
 8001fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fca:	e00e      	b.n	8001fea <__swhatbuf_r+0x42>
 8001fcc:	466a      	mov	r2, sp
 8001fce:	f000 fc95 	bl	80028fc <_fstat_r>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	dbf1      	blt.n	8001fba <__swhatbuf_r+0x12>
 8001fd6:	9a01      	ldr	r2, [sp, #4]
 8001fd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001fdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001fe0:	425a      	negs	r2, r3
 8001fe2:	415a      	adcs	r2, r3
 8001fe4:	602a      	str	r2, [r5, #0]
 8001fe6:	e7ee      	b.n	8001fc6 <__swhatbuf_r+0x1e>
 8001fe8:	2340      	movs	r3, #64	; 0x40
 8001fea:	2000      	movs	r0, #0
 8001fec:	6023      	str	r3, [r4, #0]
 8001fee:	b016      	add	sp, #88	; 0x58
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ff4 <__smakebuf_r>:
 8001ff4:	898b      	ldrh	r3, [r1, #12]
 8001ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ff8:	079d      	lsls	r5, r3, #30
 8001ffa:	4606      	mov	r6, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	d507      	bpl.n	8002010 <__smakebuf_r+0x1c>
 8002000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002004:	6023      	str	r3, [r4, #0]
 8002006:	6123      	str	r3, [r4, #16]
 8002008:	2301      	movs	r3, #1
 800200a:	6163      	str	r3, [r4, #20]
 800200c:	b002      	add	sp, #8
 800200e:	bd70      	pop	{r4, r5, r6, pc}
 8002010:	ab01      	add	r3, sp, #4
 8002012:	466a      	mov	r2, sp
 8002014:	f7ff ffc8 	bl	8001fa8 <__swhatbuf_r>
 8002018:	9900      	ldr	r1, [sp, #0]
 800201a:	4605      	mov	r5, r0
 800201c:	4630      	mov	r0, r6
 800201e:	f000 f895 	bl	800214c <_malloc_r>
 8002022:	b948      	cbnz	r0, 8002038 <__smakebuf_r+0x44>
 8002024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002028:	059a      	lsls	r2, r3, #22
 800202a:	d4ef      	bmi.n	800200c <__smakebuf_r+0x18>
 800202c:	f023 0303 	bic.w	r3, r3, #3
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	81a3      	strh	r3, [r4, #12]
 8002036:	e7e3      	b.n	8002000 <__smakebuf_r+0xc>
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <__smakebuf_r+0x7c>)
 800203a:	62b3      	str	r3, [r6, #40]	; 0x28
 800203c:	89a3      	ldrh	r3, [r4, #12]
 800203e:	6020      	str	r0, [r4, #0]
 8002040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002044:	81a3      	strh	r3, [r4, #12]
 8002046:	9b00      	ldr	r3, [sp, #0]
 8002048:	6163      	str	r3, [r4, #20]
 800204a:	9b01      	ldr	r3, [sp, #4]
 800204c:	6120      	str	r0, [r4, #16]
 800204e:	b15b      	cbz	r3, 8002068 <__smakebuf_r+0x74>
 8002050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002054:	4630      	mov	r0, r6
 8002056:	f000 fc63 	bl	8002920 <_isatty_r>
 800205a:	b128      	cbz	r0, 8002068 <__smakebuf_r+0x74>
 800205c:	89a3      	ldrh	r3, [r4, #12]
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	81a3      	strh	r3, [r4, #12]
 8002068:	89a0      	ldrh	r0, [r4, #12]
 800206a:	4305      	orrs	r5, r0
 800206c:	81a5      	strh	r5, [r4, #12]
 800206e:	e7cd      	b.n	800200c <__smakebuf_r+0x18>
 8002070:	08001e01 	.word	0x08001e01

08002074 <_free_r>:
 8002074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002076:	2900      	cmp	r1, #0
 8002078:	d044      	beq.n	8002104 <_free_r+0x90>
 800207a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800207e:	9001      	str	r0, [sp, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	f1a1 0404 	sub.w	r4, r1, #4
 8002086:	bfb8      	it	lt
 8002088:	18e4      	addlt	r4, r4, r3
 800208a:	f000 fc6b 	bl	8002964 <__malloc_lock>
 800208e:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <_free_r+0x94>)
 8002090:	9801      	ldr	r0, [sp, #4]
 8002092:	6813      	ldr	r3, [r2, #0]
 8002094:	b933      	cbnz	r3, 80020a4 <_free_r+0x30>
 8002096:	6063      	str	r3, [r4, #4]
 8002098:	6014      	str	r4, [r2, #0]
 800209a:	b003      	add	sp, #12
 800209c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020a0:	f000 bc66 	b.w	8002970 <__malloc_unlock>
 80020a4:	42a3      	cmp	r3, r4
 80020a6:	d908      	bls.n	80020ba <_free_r+0x46>
 80020a8:	6825      	ldr	r5, [r4, #0]
 80020aa:	1961      	adds	r1, r4, r5
 80020ac:	428b      	cmp	r3, r1
 80020ae:	bf01      	itttt	eq
 80020b0:	6819      	ldreq	r1, [r3, #0]
 80020b2:	685b      	ldreq	r3, [r3, #4]
 80020b4:	1949      	addeq	r1, r1, r5
 80020b6:	6021      	streq	r1, [r4, #0]
 80020b8:	e7ed      	b.n	8002096 <_free_r+0x22>
 80020ba:	461a      	mov	r2, r3
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	b10b      	cbz	r3, 80020c4 <_free_r+0x50>
 80020c0:	42a3      	cmp	r3, r4
 80020c2:	d9fa      	bls.n	80020ba <_free_r+0x46>
 80020c4:	6811      	ldr	r1, [r2, #0]
 80020c6:	1855      	adds	r5, r2, r1
 80020c8:	42a5      	cmp	r5, r4
 80020ca:	d10b      	bne.n	80020e4 <_free_r+0x70>
 80020cc:	6824      	ldr	r4, [r4, #0]
 80020ce:	4421      	add	r1, r4
 80020d0:	1854      	adds	r4, r2, r1
 80020d2:	42a3      	cmp	r3, r4
 80020d4:	6011      	str	r1, [r2, #0]
 80020d6:	d1e0      	bne.n	800209a <_free_r+0x26>
 80020d8:	681c      	ldr	r4, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	6053      	str	r3, [r2, #4]
 80020de:	4421      	add	r1, r4
 80020e0:	6011      	str	r1, [r2, #0]
 80020e2:	e7da      	b.n	800209a <_free_r+0x26>
 80020e4:	d902      	bls.n	80020ec <_free_r+0x78>
 80020e6:	230c      	movs	r3, #12
 80020e8:	6003      	str	r3, [r0, #0]
 80020ea:	e7d6      	b.n	800209a <_free_r+0x26>
 80020ec:	6825      	ldr	r5, [r4, #0]
 80020ee:	1961      	adds	r1, r4, r5
 80020f0:	428b      	cmp	r3, r1
 80020f2:	bf04      	itt	eq
 80020f4:	6819      	ldreq	r1, [r3, #0]
 80020f6:	685b      	ldreq	r3, [r3, #4]
 80020f8:	6063      	str	r3, [r4, #4]
 80020fa:	bf04      	itt	eq
 80020fc:	1949      	addeq	r1, r1, r5
 80020fe:	6021      	streq	r1, [r4, #0]
 8002100:	6054      	str	r4, [r2, #4]
 8002102:	e7ca      	b.n	800209a <_free_r+0x26>
 8002104:	b003      	add	sp, #12
 8002106:	bd30      	pop	{r4, r5, pc}
 8002108:	200000e0 	.word	0x200000e0

0800210c <sbrk_aligned>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	4e0e      	ldr	r6, [pc, #56]	; (8002148 <sbrk_aligned+0x3c>)
 8002110:	460c      	mov	r4, r1
 8002112:	6831      	ldr	r1, [r6, #0]
 8002114:	4605      	mov	r5, r0
 8002116:	b911      	cbnz	r1, 800211e <sbrk_aligned+0x12>
 8002118:	f000 fb7a 	bl	8002810 <_sbrk_r>
 800211c:	6030      	str	r0, [r6, #0]
 800211e:	4621      	mov	r1, r4
 8002120:	4628      	mov	r0, r5
 8002122:	f000 fb75 	bl	8002810 <_sbrk_r>
 8002126:	1c43      	adds	r3, r0, #1
 8002128:	d00a      	beq.n	8002140 <sbrk_aligned+0x34>
 800212a:	1cc4      	adds	r4, r0, #3
 800212c:	f024 0403 	bic.w	r4, r4, #3
 8002130:	42a0      	cmp	r0, r4
 8002132:	d007      	beq.n	8002144 <sbrk_aligned+0x38>
 8002134:	1a21      	subs	r1, r4, r0
 8002136:	4628      	mov	r0, r5
 8002138:	f000 fb6a 	bl	8002810 <_sbrk_r>
 800213c:	3001      	adds	r0, #1
 800213e:	d101      	bne.n	8002144 <sbrk_aligned+0x38>
 8002140:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002144:	4620      	mov	r0, r4
 8002146:	bd70      	pop	{r4, r5, r6, pc}
 8002148:	200000e4 	.word	0x200000e4

0800214c <_malloc_r>:
 800214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002150:	1ccd      	adds	r5, r1, #3
 8002152:	f025 0503 	bic.w	r5, r5, #3
 8002156:	3508      	adds	r5, #8
 8002158:	2d0c      	cmp	r5, #12
 800215a:	bf38      	it	cc
 800215c:	250c      	movcc	r5, #12
 800215e:	2d00      	cmp	r5, #0
 8002160:	4607      	mov	r7, r0
 8002162:	db01      	blt.n	8002168 <_malloc_r+0x1c>
 8002164:	42a9      	cmp	r1, r5
 8002166:	d905      	bls.n	8002174 <_malloc_r+0x28>
 8002168:	230c      	movs	r3, #12
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	2600      	movs	r6, #0
 800216e:	4630      	mov	r0, r6
 8002170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002174:	4e2e      	ldr	r6, [pc, #184]	; (8002230 <_malloc_r+0xe4>)
 8002176:	f000 fbf5 	bl	8002964 <__malloc_lock>
 800217a:	6833      	ldr	r3, [r6, #0]
 800217c:	461c      	mov	r4, r3
 800217e:	bb34      	cbnz	r4, 80021ce <_malloc_r+0x82>
 8002180:	4629      	mov	r1, r5
 8002182:	4638      	mov	r0, r7
 8002184:	f7ff ffc2 	bl	800210c <sbrk_aligned>
 8002188:	1c43      	adds	r3, r0, #1
 800218a:	4604      	mov	r4, r0
 800218c:	d14d      	bne.n	800222a <_malloc_r+0xde>
 800218e:	6834      	ldr	r4, [r6, #0]
 8002190:	4626      	mov	r6, r4
 8002192:	2e00      	cmp	r6, #0
 8002194:	d140      	bne.n	8002218 <_malloc_r+0xcc>
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	4631      	mov	r1, r6
 800219a:	4638      	mov	r0, r7
 800219c:	eb04 0803 	add.w	r8, r4, r3
 80021a0:	f000 fb36 	bl	8002810 <_sbrk_r>
 80021a4:	4580      	cmp	r8, r0
 80021a6:	d13a      	bne.n	800221e <_malloc_r+0xd2>
 80021a8:	6821      	ldr	r1, [r4, #0]
 80021aa:	3503      	adds	r5, #3
 80021ac:	1a6d      	subs	r5, r5, r1
 80021ae:	f025 0503 	bic.w	r5, r5, #3
 80021b2:	3508      	adds	r5, #8
 80021b4:	2d0c      	cmp	r5, #12
 80021b6:	bf38      	it	cc
 80021b8:	250c      	movcc	r5, #12
 80021ba:	4629      	mov	r1, r5
 80021bc:	4638      	mov	r0, r7
 80021be:	f7ff ffa5 	bl	800210c <sbrk_aligned>
 80021c2:	3001      	adds	r0, #1
 80021c4:	d02b      	beq.n	800221e <_malloc_r+0xd2>
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	442b      	add	r3, r5
 80021ca:	6023      	str	r3, [r4, #0]
 80021cc:	e00e      	b.n	80021ec <_malloc_r+0xa0>
 80021ce:	6822      	ldr	r2, [r4, #0]
 80021d0:	1b52      	subs	r2, r2, r5
 80021d2:	d41e      	bmi.n	8002212 <_malloc_r+0xc6>
 80021d4:	2a0b      	cmp	r2, #11
 80021d6:	d916      	bls.n	8002206 <_malloc_r+0xba>
 80021d8:	1961      	adds	r1, r4, r5
 80021da:	42a3      	cmp	r3, r4
 80021dc:	6025      	str	r5, [r4, #0]
 80021de:	bf18      	it	ne
 80021e0:	6059      	strne	r1, [r3, #4]
 80021e2:	6863      	ldr	r3, [r4, #4]
 80021e4:	bf08      	it	eq
 80021e6:	6031      	streq	r1, [r6, #0]
 80021e8:	5162      	str	r2, [r4, r5]
 80021ea:	604b      	str	r3, [r1, #4]
 80021ec:	4638      	mov	r0, r7
 80021ee:	f104 060b 	add.w	r6, r4, #11
 80021f2:	f000 fbbd 	bl	8002970 <__malloc_unlock>
 80021f6:	f026 0607 	bic.w	r6, r6, #7
 80021fa:	1d23      	adds	r3, r4, #4
 80021fc:	1af2      	subs	r2, r6, r3
 80021fe:	d0b6      	beq.n	800216e <_malloc_r+0x22>
 8002200:	1b9b      	subs	r3, r3, r6
 8002202:	50a3      	str	r3, [r4, r2]
 8002204:	e7b3      	b.n	800216e <_malloc_r+0x22>
 8002206:	6862      	ldr	r2, [r4, #4]
 8002208:	42a3      	cmp	r3, r4
 800220a:	bf0c      	ite	eq
 800220c:	6032      	streq	r2, [r6, #0]
 800220e:	605a      	strne	r2, [r3, #4]
 8002210:	e7ec      	b.n	80021ec <_malloc_r+0xa0>
 8002212:	4623      	mov	r3, r4
 8002214:	6864      	ldr	r4, [r4, #4]
 8002216:	e7b2      	b.n	800217e <_malloc_r+0x32>
 8002218:	4634      	mov	r4, r6
 800221a:	6876      	ldr	r6, [r6, #4]
 800221c:	e7b9      	b.n	8002192 <_malloc_r+0x46>
 800221e:	230c      	movs	r3, #12
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4638      	mov	r0, r7
 8002224:	f000 fba4 	bl	8002970 <__malloc_unlock>
 8002228:	e7a1      	b.n	800216e <_malloc_r+0x22>
 800222a:	6025      	str	r5, [r4, #0]
 800222c:	e7de      	b.n	80021ec <_malloc_r+0xa0>
 800222e:	bf00      	nop
 8002230:	200000e0 	.word	0x200000e0

08002234 <__sfputc_r>:
 8002234:	6893      	ldr	r3, [r2, #8]
 8002236:	3b01      	subs	r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	b410      	push	{r4}
 800223c:	6093      	str	r3, [r2, #8]
 800223e:	da08      	bge.n	8002252 <__sfputc_r+0x1e>
 8002240:	6994      	ldr	r4, [r2, #24]
 8002242:	42a3      	cmp	r3, r4
 8002244:	db01      	blt.n	800224a <__sfputc_r+0x16>
 8002246:	290a      	cmp	r1, #10
 8002248:	d103      	bne.n	8002252 <__sfputc_r+0x1e>
 800224a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800224e:	f7ff bc31 	b.w	8001ab4 <__swbuf_r>
 8002252:	6813      	ldr	r3, [r2, #0]
 8002254:	1c58      	adds	r0, r3, #1
 8002256:	6010      	str	r0, [r2, #0]
 8002258:	7019      	strb	r1, [r3, #0]
 800225a:	4608      	mov	r0, r1
 800225c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002260:	4770      	bx	lr

08002262 <__sfputs_r>:
 8002262:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002264:	4606      	mov	r6, r0
 8002266:	460f      	mov	r7, r1
 8002268:	4614      	mov	r4, r2
 800226a:	18d5      	adds	r5, r2, r3
 800226c:	42ac      	cmp	r4, r5
 800226e:	d101      	bne.n	8002274 <__sfputs_r+0x12>
 8002270:	2000      	movs	r0, #0
 8002272:	e007      	b.n	8002284 <__sfputs_r+0x22>
 8002274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002278:	463a      	mov	r2, r7
 800227a:	4630      	mov	r0, r6
 800227c:	f7ff ffda 	bl	8002234 <__sfputc_r>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d1f3      	bne.n	800226c <__sfputs_r+0xa>
 8002284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002288 <_vfiprintf_r>:
 8002288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800228c:	460d      	mov	r5, r1
 800228e:	b09d      	sub	sp, #116	; 0x74
 8002290:	4614      	mov	r4, r2
 8002292:	4698      	mov	r8, r3
 8002294:	4606      	mov	r6, r0
 8002296:	b118      	cbz	r0, 80022a0 <_vfiprintf_r+0x18>
 8002298:	6983      	ldr	r3, [r0, #24]
 800229a:	b90b      	cbnz	r3, 80022a0 <_vfiprintf_r+0x18>
 800229c:	f7ff fde4 	bl	8001e68 <__sinit>
 80022a0:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <_vfiprintf_r+0x240>)
 80022a2:	429d      	cmp	r5, r3
 80022a4:	d11b      	bne.n	80022de <_vfiprintf_r+0x56>
 80022a6:	6875      	ldr	r5, [r6, #4]
 80022a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022aa:	07d9      	lsls	r1, r3, #31
 80022ac:	d405      	bmi.n	80022ba <_vfiprintf_r+0x32>
 80022ae:	89ab      	ldrh	r3, [r5, #12]
 80022b0:	059a      	lsls	r2, r3, #22
 80022b2:	d402      	bmi.n	80022ba <_vfiprintf_r+0x32>
 80022b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022b6:	f7ff fe75 	bl	8001fa4 <__retarget_lock_acquire_recursive>
 80022ba:	89ab      	ldrh	r3, [r5, #12]
 80022bc:	071b      	lsls	r3, r3, #28
 80022be:	d501      	bpl.n	80022c4 <_vfiprintf_r+0x3c>
 80022c0:	692b      	ldr	r3, [r5, #16]
 80022c2:	b9eb      	cbnz	r3, 8002300 <_vfiprintf_r+0x78>
 80022c4:	4629      	mov	r1, r5
 80022c6:	4630      	mov	r0, r6
 80022c8:	f7ff fc46 	bl	8001b58 <__swsetup_r>
 80022cc:	b1c0      	cbz	r0, 8002300 <_vfiprintf_r+0x78>
 80022ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022d0:	07dc      	lsls	r4, r3, #31
 80022d2:	d50e      	bpl.n	80022f2 <_vfiprintf_r+0x6a>
 80022d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022d8:	b01d      	add	sp, #116	; 0x74
 80022da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022de:	4b7b      	ldr	r3, [pc, #492]	; (80024cc <_vfiprintf_r+0x244>)
 80022e0:	429d      	cmp	r5, r3
 80022e2:	d101      	bne.n	80022e8 <_vfiprintf_r+0x60>
 80022e4:	68b5      	ldr	r5, [r6, #8]
 80022e6:	e7df      	b.n	80022a8 <_vfiprintf_r+0x20>
 80022e8:	4b79      	ldr	r3, [pc, #484]	; (80024d0 <_vfiprintf_r+0x248>)
 80022ea:	429d      	cmp	r5, r3
 80022ec:	bf08      	it	eq
 80022ee:	68f5      	ldreq	r5, [r6, #12]
 80022f0:	e7da      	b.n	80022a8 <_vfiprintf_r+0x20>
 80022f2:	89ab      	ldrh	r3, [r5, #12]
 80022f4:	0598      	lsls	r0, r3, #22
 80022f6:	d4ed      	bmi.n	80022d4 <_vfiprintf_r+0x4c>
 80022f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022fa:	f7ff fe54 	bl	8001fa6 <__retarget_lock_release_recursive>
 80022fe:	e7e9      	b.n	80022d4 <_vfiprintf_r+0x4c>
 8002300:	2300      	movs	r3, #0
 8002302:	9309      	str	r3, [sp, #36]	; 0x24
 8002304:	2320      	movs	r3, #32
 8002306:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800230a:	f8cd 800c 	str.w	r8, [sp, #12]
 800230e:	2330      	movs	r3, #48	; 0x30
 8002310:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80024d4 <_vfiprintf_r+0x24c>
 8002314:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002318:	f04f 0901 	mov.w	r9, #1
 800231c:	4623      	mov	r3, r4
 800231e:	469a      	mov	sl, r3
 8002320:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002324:	b10a      	cbz	r2, 800232a <_vfiprintf_r+0xa2>
 8002326:	2a25      	cmp	r2, #37	; 0x25
 8002328:	d1f9      	bne.n	800231e <_vfiprintf_r+0x96>
 800232a:	ebba 0b04 	subs.w	fp, sl, r4
 800232e:	d00b      	beq.n	8002348 <_vfiprintf_r+0xc0>
 8002330:	465b      	mov	r3, fp
 8002332:	4622      	mov	r2, r4
 8002334:	4629      	mov	r1, r5
 8002336:	4630      	mov	r0, r6
 8002338:	f7ff ff93 	bl	8002262 <__sfputs_r>
 800233c:	3001      	adds	r0, #1
 800233e:	f000 80aa 	beq.w	8002496 <_vfiprintf_r+0x20e>
 8002342:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002344:	445a      	add	r2, fp
 8002346:	9209      	str	r2, [sp, #36]	; 0x24
 8002348:	f89a 3000 	ldrb.w	r3, [sl]
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a2 	beq.w	8002496 <_vfiprintf_r+0x20e>
 8002352:	2300      	movs	r3, #0
 8002354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800235c:	f10a 0a01 	add.w	sl, sl, #1
 8002360:	9304      	str	r3, [sp, #16]
 8002362:	9307      	str	r3, [sp, #28]
 8002364:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002368:	931a      	str	r3, [sp, #104]	; 0x68
 800236a:	4654      	mov	r4, sl
 800236c:	2205      	movs	r2, #5
 800236e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002372:	4858      	ldr	r0, [pc, #352]	; (80024d4 <_vfiprintf_r+0x24c>)
 8002374:	f7fd ff4c 	bl	8000210 <memchr>
 8002378:	9a04      	ldr	r2, [sp, #16]
 800237a:	b9d8      	cbnz	r0, 80023b4 <_vfiprintf_r+0x12c>
 800237c:	06d1      	lsls	r1, r2, #27
 800237e:	bf44      	itt	mi
 8002380:	2320      	movmi	r3, #32
 8002382:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002386:	0713      	lsls	r3, r2, #28
 8002388:	bf44      	itt	mi
 800238a:	232b      	movmi	r3, #43	; 0x2b
 800238c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002390:	f89a 3000 	ldrb.w	r3, [sl]
 8002394:	2b2a      	cmp	r3, #42	; 0x2a
 8002396:	d015      	beq.n	80023c4 <_vfiprintf_r+0x13c>
 8002398:	9a07      	ldr	r2, [sp, #28]
 800239a:	4654      	mov	r4, sl
 800239c:	2000      	movs	r0, #0
 800239e:	f04f 0c0a 	mov.w	ip, #10
 80023a2:	4621      	mov	r1, r4
 80023a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80023a8:	3b30      	subs	r3, #48	; 0x30
 80023aa:	2b09      	cmp	r3, #9
 80023ac:	d94e      	bls.n	800244c <_vfiprintf_r+0x1c4>
 80023ae:	b1b0      	cbz	r0, 80023de <_vfiprintf_r+0x156>
 80023b0:	9207      	str	r2, [sp, #28]
 80023b2:	e014      	b.n	80023de <_vfiprintf_r+0x156>
 80023b4:	eba0 0308 	sub.w	r3, r0, r8
 80023b8:	fa09 f303 	lsl.w	r3, r9, r3
 80023bc:	4313      	orrs	r3, r2
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	46a2      	mov	sl, r4
 80023c2:	e7d2      	b.n	800236a <_vfiprintf_r+0xe2>
 80023c4:	9b03      	ldr	r3, [sp, #12]
 80023c6:	1d19      	adds	r1, r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	9103      	str	r1, [sp, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bfbb      	ittet	lt
 80023d0:	425b      	neglt	r3, r3
 80023d2:	f042 0202 	orrlt.w	r2, r2, #2
 80023d6:	9307      	strge	r3, [sp, #28]
 80023d8:	9307      	strlt	r3, [sp, #28]
 80023da:	bfb8      	it	lt
 80023dc:	9204      	strlt	r2, [sp, #16]
 80023de:	7823      	ldrb	r3, [r4, #0]
 80023e0:	2b2e      	cmp	r3, #46	; 0x2e
 80023e2:	d10c      	bne.n	80023fe <_vfiprintf_r+0x176>
 80023e4:	7863      	ldrb	r3, [r4, #1]
 80023e6:	2b2a      	cmp	r3, #42	; 0x2a
 80023e8:	d135      	bne.n	8002456 <_vfiprintf_r+0x1ce>
 80023ea:	9b03      	ldr	r3, [sp, #12]
 80023ec:	1d1a      	adds	r2, r3, #4
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	9203      	str	r2, [sp, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bfb8      	it	lt
 80023f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80023fa:	3402      	adds	r4, #2
 80023fc:	9305      	str	r3, [sp, #20]
 80023fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80024e4 <_vfiprintf_r+0x25c>
 8002402:	7821      	ldrb	r1, [r4, #0]
 8002404:	2203      	movs	r2, #3
 8002406:	4650      	mov	r0, sl
 8002408:	f7fd ff02 	bl	8000210 <memchr>
 800240c:	b140      	cbz	r0, 8002420 <_vfiprintf_r+0x198>
 800240e:	2340      	movs	r3, #64	; 0x40
 8002410:	eba0 000a 	sub.w	r0, r0, sl
 8002414:	fa03 f000 	lsl.w	r0, r3, r0
 8002418:	9b04      	ldr	r3, [sp, #16]
 800241a:	4303      	orrs	r3, r0
 800241c:	3401      	adds	r4, #1
 800241e:	9304      	str	r3, [sp, #16]
 8002420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002424:	482c      	ldr	r0, [pc, #176]	; (80024d8 <_vfiprintf_r+0x250>)
 8002426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800242a:	2206      	movs	r2, #6
 800242c:	f7fd fef0 	bl	8000210 <memchr>
 8002430:	2800      	cmp	r0, #0
 8002432:	d03f      	beq.n	80024b4 <_vfiprintf_r+0x22c>
 8002434:	4b29      	ldr	r3, [pc, #164]	; (80024dc <_vfiprintf_r+0x254>)
 8002436:	bb1b      	cbnz	r3, 8002480 <_vfiprintf_r+0x1f8>
 8002438:	9b03      	ldr	r3, [sp, #12]
 800243a:	3307      	adds	r3, #7
 800243c:	f023 0307 	bic.w	r3, r3, #7
 8002440:	3308      	adds	r3, #8
 8002442:	9303      	str	r3, [sp, #12]
 8002444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002446:	443b      	add	r3, r7
 8002448:	9309      	str	r3, [sp, #36]	; 0x24
 800244a:	e767      	b.n	800231c <_vfiprintf_r+0x94>
 800244c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002450:	460c      	mov	r4, r1
 8002452:	2001      	movs	r0, #1
 8002454:	e7a5      	b.n	80023a2 <_vfiprintf_r+0x11a>
 8002456:	2300      	movs	r3, #0
 8002458:	3401      	adds	r4, #1
 800245a:	9305      	str	r3, [sp, #20]
 800245c:	4619      	mov	r1, r3
 800245e:	f04f 0c0a 	mov.w	ip, #10
 8002462:	4620      	mov	r0, r4
 8002464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002468:	3a30      	subs	r2, #48	; 0x30
 800246a:	2a09      	cmp	r2, #9
 800246c:	d903      	bls.n	8002476 <_vfiprintf_r+0x1ee>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0c5      	beq.n	80023fe <_vfiprintf_r+0x176>
 8002472:	9105      	str	r1, [sp, #20]
 8002474:	e7c3      	b.n	80023fe <_vfiprintf_r+0x176>
 8002476:	fb0c 2101 	mla	r1, ip, r1, r2
 800247a:	4604      	mov	r4, r0
 800247c:	2301      	movs	r3, #1
 800247e:	e7f0      	b.n	8002462 <_vfiprintf_r+0x1da>
 8002480:	ab03      	add	r3, sp, #12
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	462a      	mov	r2, r5
 8002486:	4b16      	ldr	r3, [pc, #88]	; (80024e0 <_vfiprintf_r+0x258>)
 8002488:	a904      	add	r1, sp, #16
 800248a:	4630      	mov	r0, r6
 800248c:	f3af 8000 	nop.w
 8002490:	4607      	mov	r7, r0
 8002492:	1c78      	adds	r0, r7, #1
 8002494:	d1d6      	bne.n	8002444 <_vfiprintf_r+0x1bc>
 8002496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002498:	07d9      	lsls	r1, r3, #31
 800249a:	d405      	bmi.n	80024a8 <_vfiprintf_r+0x220>
 800249c:	89ab      	ldrh	r3, [r5, #12]
 800249e:	059a      	lsls	r2, r3, #22
 80024a0:	d402      	bmi.n	80024a8 <_vfiprintf_r+0x220>
 80024a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80024a4:	f7ff fd7f 	bl	8001fa6 <__retarget_lock_release_recursive>
 80024a8:	89ab      	ldrh	r3, [r5, #12]
 80024aa:	065b      	lsls	r3, r3, #25
 80024ac:	f53f af12 	bmi.w	80022d4 <_vfiprintf_r+0x4c>
 80024b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80024b2:	e711      	b.n	80022d8 <_vfiprintf_r+0x50>
 80024b4:	ab03      	add	r3, sp, #12
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	462a      	mov	r2, r5
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <_vfiprintf_r+0x258>)
 80024bc:	a904      	add	r1, sp, #16
 80024be:	4630      	mov	r0, r6
 80024c0:	f000 f880 	bl	80025c4 <_printf_i>
 80024c4:	e7e4      	b.n	8002490 <_vfiprintf_r+0x208>
 80024c6:	bf00      	nop
 80024c8:	08002a04 	.word	0x08002a04
 80024cc:	08002a24 	.word	0x08002a24
 80024d0:	080029e4 	.word	0x080029e4
 80024d4:	08002a44 	.word	0x08002a44
 80024d8:	08002a4e 	.word	0x08002a4e
 80024dc:	00000000 	.word	0x00000000
 80024e0:	08002263 	.word	0x08002263
 80024e4:	08002a4a 	.word	0x08002a4a

080024e8 <_printf_common>:
 80024e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ec:	4616      	mov	r6, r2
 80024ee:	4699      	mov	r9, r3
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	690b      	ldr	r3, [r1, #16]
 80024f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024f8:	4293      	cmp	r3, r2
 80024fa:	bfb8      	it	lt
 80024fc:	4613      	movlt	r3, r2
 80024fe:	6033      	str	r3, [r6, #0]
 8002500:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002504:	4607      	mov	r7, r0
 8002506:	460c      	mov	r4, r1
 8002508:	b10a      	cbz	r2, 800250e <_printf_common+0x26>
 800250a:	3301      	adds	r3, #1
 800250c:	6033      	str	r3, [r6, #0]
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	0699      	lsls	r1, r3, #26
 8002512:	bf42      	ittt	mi
 8002514:	6833      	ldrmi	r3, [r6, #0]
 8002516:	3302      	addmi	r3, #2
 8002518:	6033      	strmi	r3, [r6, #0]
 800251a:	6825      	ldr	r5, [r4, #0]
 800251c:	f015 0506 	ands.w	r5, r5, #6
 8002520:	d106      	bne.n	8002530 <_printf_common+0x48>
 8002522:	f104 0a19 	add.w	sl, r4, #25
 8002526:	68e3      	ldr	r3, [r4, #12]
 8002528:	6832      	ldr	r2, [r6, #0]
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	42ab      	cmp	r3, r5
 800252e:	dc26      	bgt.n	800257e <_printf_common+0x96>
 8002530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002534:	1e13      	subs	r3, r2, #0
 8002536:	6822      	ldr	r2, [r4, #0]
 8002538:	bf18      	it	ne
 800253a:	2301      	movne	r3, #1
 800253c:	0692      	lsls	r2, r2, #26
 800253e:	d42b      	bmi.n	8002598 <_printf_common+0xb0>
 8002540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002544:	4649      	mov	r1, r9
 8002546:	4638      	mov	r0, r7
 8002548:	47c0      	blx	r8
 800254a:	3001      	adds	r0, #1
 800254c:	d01e      	beq.n	800258c <_printf_common+0xa4>
 800254e:	6823      	ldr	r3, [r4, #0]
 8002550:	68e5      	ldr	r5, [r4, #12]
 8002552:	6832      	ldr	r2, [r6, #0]
 8002554:	f003 0306 	and.w	r3, r3, #6
 8002558:	2b04      	cmp	r3, #4
 800255a:	bf08      	it	eq
 800255c:	1aad      	subeq	r5, r5, r2
 800255e:	68a3      	ldr	r3, [r4, #8]
 8002560:	6922      	ldr	r2, [r4, #16]
 8002562:	bf0c      	ite	eq
 8002564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002568:	2500      	movne	r5, #0
 800256a:	4293      	cmp	r3, r2
 800256c:	bfc4      	itt	gt
 800256e:	1a9b      	subgt	r3, r3, r2
 8002570:	18ed      	addgt	r5, r5, r3
 8002572:	2600      	movs	r6, #0
 8002574:	341a      	adds	r4, #26
 8002576:	42b5      	cmp	r5, r6
 8002578:	d11a      	bne.n	80025b0 <_printf_common+0xc8>
 800257a:	2000      	movs	r0, #0
 800257c:	e008      	b.n	8002590 <_printf_common+0xa8>
 800257e:	2301      	movs	r3, #1
 8002580:	4652      	mov	r2, sl
 8002582:	4649      	mov	r1, r9
 8002584:	4638      	mov	r0, r7
 8002586:	47c0      	blx	r8
 8002588:	3001      	adds	r0, #1
 800258a:	d103      	bne.n	8002594 <_printf_common+0xac>
 800258c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002594:	3501      	adds	r5, #1
 8002596:	e7c6      	b.n	8002526 <_printf_common+0x3e>
 8002598:	18e1      	adds	r1, r4, r3
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	2030      	movs	r0, #48	; 0x30
 800259e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025a2:	4422      	add	r2, r4
 80025a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025ac:	3302      	adds	r3, #2
 80025ae:	e7c7      	b.n	8002540 <_printf_common+0x58>
 80025b0:	2301      	movs	r3, #1
 80025b2:	4622      	mov	r2, r4
 80025b4:	4649      	mov	r1, r9
 80025b6:	4638      	mov	r0, r7
 80025b8:	47c0      	blx	r8
 80025ba:	3001      	adds	r0, #1
 80025bc:	d0e6      	beq.n	800258c <_printf_common+0xa4>
 80025be:	3601      	adds	r6, #1
 80025c0:	e7d9      	b.n	8002576 <_printf_common+0x8e>
	...

080025c4 <_printf_i>:
 80025c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025c8:	7e0f      	ldrb	r7, [r1, #24]
 80025ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80025cc:	2f78      	cmp	r7, #120	; 0x78
 80025ce:	4691      	mov	r9, r2
 80025d0:	4680      	mov	r8, r0
 80025d2:	460c      	mov	r4, r1
 80025d4:	469a      	mov	sl, r3
 80025d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80025da:	d807      	bhi.n	80025ec <_printf_i+0x28>
 80025dc:	2f62      	cmp	r7, #98	; 0x62
 80025de:	d80a      	bhi.n	80025f6 <_printf_i+0x32>
 80025e0:	2f00      	cmp	r7, #0
 80025e2:	f000 80d8 	beq.w	8002796 <_printf_i+0x1d2>
 80025e6:	2f58      	cmp	r7, #88	; 0x58
 80025e8:	f000 80a3 	beq.w	8002732 <_printf_i+0x16e>
 80025ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025f4:	e03a      	b.n	800266c <_printf_i+0xa8>
 80025f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025fa:	2b15      	cmp	r3, #21
 80025fc:	d8f6      	bhi.n	80025ec <_printf_i+0x28>
 80025fe:	a101      	add	r1, pc, #4	; (adr r1, 8002604 <_printf_i+0x40>)
 8002600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002604:	0800265d 	.word	0x0800265d
 8002608:	08002671 	.word	0x08002671
 800260c:	080025ed 	.word	0x080025ed
 8002610:	080025ed 	.word	0x080025ed
 8002614:	080025ed 	.word	0x080025ed
 8002618:	080025ed 	.word	0x080025ed
 800261c:	08002671 	.word	0x08002671
 8002620:	080025ed 	.word	0x080025ed
 8002624:	080025ed 	.word	0x080025ed
 8002628:	080025ed 	.word	0x080025ed
 800262c:	080025ed 	.word	0x080025ed
 8002630:	0800277d 	.word	0x0800277d
 8002634:	080026a1 	.word	0x080026a1
 8002638:	0800275f 	.word	0x0800275f
 800263c:	080025ed 	.word	0x080025ed
 8002640:	080025ed 	.word	0x080025ed
 8002644:	0800279f 	.word	0x0800279f
 8002648:	080025ed 	.word	0x080025ed
 800264c:	080026a1 	.word	0x080026a1
 8002650:	080025ed 	.word	0x080025ed
 8002654:	080025ed 	.word	0x080025ed
 8002658:	08002767 	.word	0x08002767
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	602a      	str	r2, [r5, #0]
 8002664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800266c:	2301      	movs	r3, #1
 800266e:	e0a3      	b.n	80027b8 <_printf_i+0x1f4>
 8002670:	6820      	ldr	r0, [r4, #0]
 8002672:	6829      	ldr	r1, [r5, #0]
 8002674:	0606      	lsls	r6, r0, #24
 8002676:	f101 0304 	add.w	r3, r1, #4
 800267a:	d50a      	bpl.n	8002692 <_printf_i+0xce>
 800267c:	680e      	ldr	r6, [r1, #0]
 800267e:	602b      	str	r3, [r5, #0]
 8002680:	2e00      	cmp	r6, #0
 8002682:	da03      	bge.n	800268c <_printf_i+0xc8>
 8002684:	232d      	movs	r3, #45	; 0x2d
 8002686:	4276      	negs	r6, r6
 8002688:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800268c:	485e      	ldr	r0, [pc, #376]	; (8002808 <_printf_i+0x244>)
 800268e:	230a      	movs	r3, #10
 8002690:	e019      	b.n	80026c6 <_printf_i+0x102>
 8002692:	680e      	ldr	r6, [r1, #0]
 8002694:	602b      	str	r3, [r5, #0]
 8002696:	f010 0f40 	tst.w	r0, #64	; 0x40
 800269a:	bf18      	it	ne
 800269c:	b236      	sxthne	r6, r6
 800269e:	e7ef      	b.n	8002680 <_printf_i+0xbc>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	6820      	ldr	r0, [r4, #0]
 80026a4:	1d19      	adds	r1, r3, #4
 80026a6:	6029      	str	r1, [r5, #0]
 80026a8:	0601      	lsls	r1, r0, #24
 80026aa:	d501      	bpl.n	80026b0 <_printf_i+0xec>
 80026ac:	681e      	ldr	r6, [r3, #0]
 80026ae:	e002      	b.n	80026b6 <_printf_i+0xf2>
 80026b0:	0646      	lsls	r6, r0, #25
 80026b2:	d5fb      	bpl.n	80026ac <_printf_i+0xe8>
 80026b4:	881e      	ldrh	r6, [r3, #0]
 80026b6:	4854      	ldr	r0, [pc, #336]	; (8002808 <_printf_i+0x244>)
 80026b8:	2f6f      	cmp	r7, #111	; 0x6f
 80026ba:	bf0c      	ite	eq
 80026bc:	2308      	moveq	r3, #8
 80026be:	230a      	movne	r3, #10
 80026c0:	2100      	movs	r1, #0
 80026c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026c6:	6865      	ldr	r5, [r4, #4]
 80026c8:	60a5      	str	r5, [r4, #8]
 80026ca:	2d00      	cmp	r5, #0
 80026cc:	bfa2      	ittt	ge
 80026ce:	6821      	ldrge	r1, [r4, #0]
 80026d0:	f021 0104 	bicge.w	r1, r1, #4
 80026d4:	6021      	strge	r1, [r4, #0]
 80026d6:	b90e      	cbnz	r6, 80026dc <_printf_i+0x118>
 80026d8:	2d00      	cmp	r5, #0
 80026da:	d04d      	beq.n	8002778 <_printf_i+0x1b4>
 80026dc:	4615      	mov	r5, r2
 80026de:	fbb6 f1f3 	udiv	r1, r6, r3
 80026e2:	fb03 6711 	mls	r7, r3, r1, r6
 80026e6:	5dc7      	ldrb	r7, [r0, r7]
 80026e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026ec:	4637      	mov	r7, r6
 80026ee:	42bb      	cmp	r3, r7
 80026f0:	460e      	mov	r6, r1
 80026f2:	d9f4      	bls.n	80026de <_printf_i+0x11a>
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d10b      	bne.n	8002710 <_printf_i+0x14c>
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	07de      	lsls	r6, r3, #31
 80026fc:	d508      	bpl.n	8002710 <_printf_i+0x14c>
 80026fe:	6923      	ldr	r3, [r4, #16]
 8002700:	6861      	ldr	r1, [r4, #4]
 8002702:	4299      	cmp	r1, r3
 8002704:	bfde      	ittt	le
 8002706:	2330      	movle	r3, #48	; 0x30
 8002708:	f805 3c01 	strble.w	r3, [r5, #-1]
 800270c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002710:	1b52      	subs	r2, r2, r5
 8002712:	6122      	str	r2, [r4, #16]
 8002714:	f8cd a000 	str.w	sl, [sp]
 8002718:	464b      	mov	r3, r9
 800271a:	aa03      	add	r2, sp, #12
 800271c:	4621      	mov	r1, r4
 800271e:	4640      	mov	r0, r8
 8002720:	f7ff fee2 	bl	80024e8 <_printf_common>
 8002724:	3001      	adds	r0, #1
 8002726:	d14c      	bne.n	80027c2 <_printf_i+0x1fe>
 8002728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800272c:	b004      	add	sp, #16
 800272e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002732:	4835      	ldr	r0, [pc, #212]	; (8002808 <_printf_i+0x244>)
 8002734:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002738:	6829      	ldr	r1, [r5, #0]
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002740:	6029      	str	r1, [r5, #0]
 8002742:	061d      	lsls	r5, r3, #24
 8002744:	d514      	bpl.n	8002770 <_printf_i+0x1ac>
 8002746:	07df      	lsls	r7, r3, #31
 8002748:	bf44      	itt	mi
 800274a:	f043 0320 	orrmi.w	r3, r3, #32
 800274e:	6023      	strmi	r3, [r4, #0]
 8002750:	b91e      	cbnz	r6, 800275a <_printf_i+0x196>
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	f023 0320 	bic.w	r3, r3, #32
 8002758:	6023      	str	r3, [r4, #0]
 800275a:	2310      	movs	r3, #16
 800275c:	e7b0      	b.n	80026c0 <_printf_i+0xfc>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	f043 0320 	orr.w	r3, r3, #32
 8002764:	6023      	str	r3, [r4, #0]
 8002766:	2378      	movs	r3, #120	; 0x78
 8002768:	4828      	ldr	r0, [pc, #160]	; (800280c <_printf_i+0x248>)
 800276a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800276e:	e7e3      	b.n	8002738 <_printf_i+0x174>
 8002770:	0659      	lsls	r1, r3, #25
 8002772:	bf48      	it	mi
 8002774:	b2b6      	uxthmi	r6, r6
 8002776:	e7e6      	b.n	8002746 <_printf_i+0x182>
 8002778:	4615      	mov	r5, r2
 800277a:	e7bb      	b.n	80026f4 <_printf_i+0x130>
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	6826      	ldr	r6, [r4, #0]
 8002780:	6961      	ldr	r1, [r4, #20]
 8002782:	1d18      	adds	r0, r3, #4
 8002784:	6028      	str	r0, [r5, #0]
 8002786:	0635      	lsls	r5, r6, #24
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	d501      	bpl.n	8002790 <_printf_i+0x1cc>
 800278c:	6019      	str	r1, [r3, #0]
 800278e:	e002      	b.n	8002796 <_printf_i+0x1d2>
 8002790:	0670      	lsls	r0, r6, #25
 8002792:	d5fb      	bpl.n	800278c <_printf_i+0x1c8>
 8002794:	8019      	strh	r1, [r3, #0]
 8002796:	2300      	movs	r3, #0
 8002798:	6123      	str	r3, [r4, #16]
 800279a:	4615      	mov	r5, r2
 800279c:	e7ba      	b.n	8002714 <_printf_i+0x150>
 800279e:	682b      	ldr	r3, [r5, #0]
 80027a0:	1d1a      	adds	r2, r3, #4
 80027a2:	602a      	str	r2, [r5, #0]
 80027a4:	681d      	ldr	r5, [r3, #0]
 80027a6:	6862      	ldr	r2, [r4, #4]
 80027a8:	2100      	movs	r1, #0
 80027aa:	4628      	mov	r0, r5
 80027ac:	f7fd fd30 	bl	8000210 <memchr>
 80027b0:	b108      	cbz	r0, 80027b6 <_printf_i+0x1f2>
 80027b2:	1b40      	subs	r0, r0, r5
 80027b4:	6060      	str	r0, [r4, #4]
 80027b6:	6863      	ldr	r3, [r4, #4]
 80027b8:	6123      	str	r3, [r4, #16]
 80027ba:	2300      	movs	r3, #0
 80027bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027c0:	e7a8      	b.n	8002714 <_printf_i+0x150>
 80027c2:	6923      	ldr	r3, [r4, #16]
 80027c4:	462a      	mov	r2, r5
 80027c6:	4649      	mov	r1, r9
 80027c8:	4640      	mov	r0, r8
 80027ca:	47d0      	blx	sl
 80027cc:	3001      	adds	r0, #1
 80027ce:	d0ab      	beq.n	8002728 <_printf_i+0x164>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	079b      	lsls	r3, r3, #30
 80027d4:	d413      	bmi.n	80027fe <_printf_i+0x23a>
 80027d6:	68e0      	ldr	r0, [r4, #12]
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	4298      	cmp	r0, r3
 80027dc:	bfb8      	it	lt
 80027de:	4618      	movlt	r0, r3
 80027e0:	e7a4      	b.n	800272c <_printf_i+0x168>
 80027e2:	2301      	movs	r3, #1
 80027e4:	4632      	mov	r2, r6
 80027e6:	4649      	mov	r1, r9
 80027e8:	4640      	mov	r0, r8
 80027ea:	47d0      	blx	sl
 80027ec:	3001      	adds	r0, #1
 80027ee:	d09b      	beq.n	8002728 <_printf_i+0x164>
 80027f0:	3501      	adds	r5, #1
 80027f2:	68e3      	ldr	r3, [r4, #12]
 80027f4:	9903      	ldr	r1, [sp, #12]
 80027f6:	1a5b      	subs	r3, r3, r1
 80027f8:	42ab      	cmp	r3, r5
 80027fa:	dcf2      	bgt.n	80027e2 <_printf_i+0x21e>
 80027fc:	e7eb      	b.n	80027d6 <_printf_i+0x212>
 80027fe:	2500      	movs	r5, #0
 8002800:	f104 0619 	add.w	r6, r4, #25
 8002804:	e7f5      	b.n	80027f2 <_printf_i+0x22e>
 8002806:	bf00      	nop
 8002808:	08002a55 	.word	0x08002a55
 800280c:	08002a66 	.word	0x08002a66

08002810 <_sbrk_r>:
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4d06      	ldr	r5, [pc, #24]	; (800282c <_sbrk_r+0x1c>)
 8002814:	2300      	movs	r3, #0
 8002816:	4604      	mov	r4, r0
 8002818:	4608      	mov	r0, r1
 800281a:	602b      	str	r3, [r5, #0]
 800281c:	f7fd ff60 	bl	80006e0 <_sbrk>
 8002820:	1c43      	adds	r3, r0, #1
 8002822:	d102      	bne.n	800282a <_sbrk_r+0x1a>
 8002824:	682b      	ldr	r3, [r5, #0]
 8002826:	b103      	cbz	r3, 800282a <_sbrk_r+0x1a>
 8002828:	6023      	str	r3, [r4, #0]
 800282a:	bd38      	pop	{r3, r4, r5, pc}
 800282c:	200000e8 	.word	0x200000e8

08002830 <__sread>:
 8002830:	b510      	push	{r4, lr}
 8002832:	460c      	mov	r4, r1
 8002834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002838:	f000 f8a0 	bl	800297c <_read_r>
 800283c:	2800      	cmp	r0, #0
 800283e:	bfab      	itete	ge
 8002840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002842:	89a3      	ldrhlt	r3, [r4, #12]
 8002844:	181b      	addge	r3, r3, r0
 8002846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800284a:	bfac      	ite	ge
 800284c:	6563      	strge	r3, [r4, #84]	; 0x54
 800284e:	81a3      	strhlt	r3, [r4, #12]
 8002850:	bd10      	pop	{r4, pc}

08002852 <__swrite>:
 8002852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002856:	461f      	mov	r7, r3
 8002858:	898b      	ldrh	r3, [r1, #12]
 800285a:	05db      	lsls	r3, r3, #23
 800285c:	4605      	mov	r5, r0
 800285e:	460c      	mov	r4, r1
 8002860:	4616      	mov	r6, r2
 8002862:	d505      	bpl.n	8002870 <__swrite+0x1e>
 8002864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002868:	2302      	movs	r3, #2
 800286a:	2200      	movs	r2, #0
 800286c:	f000 f868 	bl	8002940 <_lseek_r>
 8002870:	89a3      	ldrh	r3, [r4, #12]
 8002872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800287a:	81a3      	strh	r3, [r4, #12]
 800287c:	4632      	mov	r2, r6
 800287e:	463b      	mov	r3, r7
 8002880:	4628      	mov	r0, r5
 8002882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002886:	f000 b817 	b.w	80028b8 <_write_r>

0800288a <__sseek>:
 800288a:	b510      	push	{r4, lr}
 800288c:	460c      	mov	r4, r1
 800288e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002892:	f000 f855 	bl	8002940 <_lseek_r>
 8002896:	1c43      	adds	r3, r0, #1
 8002898:	89a3      	ldrh	r3, [r4, #12]
 800289a:	bf15      	itete	ne
 800289c:	6560      	strne	r0, [r4, #84]	; 0x54
 800289e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80028a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80028a6:	81a3      	strheq	r3, [r4, #12]
 80028a8:	bf18      	it	ne
 80028aa:	81a3      	strhne	r3, [r4, #12]
 80028ac:	bd10      	pop	{r4, pc}

080028ae <__sclose>:
 80028ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028b2:	f000 b813 	b.w	80028dc <_close_r>
	...

080028b8 <_write_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4d07      	ldr	r5, [pc, #28]	; (80028d8 <_write_r+0x20>)
 80028bc:	4604      	mov	r4, r0
 80028be:	4608      	mov	r0, r1
 80028c0:	4611      	mov	r1, r2
 80028c2:	2200      	movs	r2, #0
 80028c4:	602a      	str	r2, [r5, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7fd feb9 	bl	800063e <_write>
 80028cc:	1c43      	adds	r3, r0, #1
 80028ce:	d102      	bne.n	80028d6 <_write_r+0x1e>
 80028d0:	682b      	ldr	r3, [r5, #0]
 80028d2:	b103      	cbz	r3, 80028d6 <_write_r+0x1e>
 80028d4:	6023      	str	r3, [r4, #0]
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
 80028d8:	200000e8 	.word	0x200000e8

080028dc <_close_r>:
 80028dc:	b538      	push	{r3, r4, r5, lr}
 80028de:	4d06      	ldr	r5, [pc, #24]	; (80028f8 <_close_r+0x1c>)
 80028e0:	2300      	movs	r3, #0
 80028e2:	4604      	mov	r4, r0
 80028e4:	4608      	mov	r0, r1
 80028e6:	602b      	str	r3, [r5, #0]
 80028e8:	f7fd fec5 	bl	8000676 <_close>
 80028ec:	1c43      	adds	r3, r0, #1
 80028ee:	d102      	bne.n	80028f6 <_close_r+0x1a>
 80028f0:	682b      	ldr	r3, [r5, #0]
 80028f2:	b103      	cbz	r3, 80028f6 <_close_r+0x1a>
 80028f4:	6023      	str	r3, [r4, #0]
 80028f6:	bd38      	pop	{r3, r4, r5, pc}
 80028f8:	200000e8 	.word	0x200000e8

080028fc <_fstat_r>:
 80028fc:	b538      	push	{r3, r4, r5, lr}
 80028fe:	4d07      	ldr	r5, [pc, #28]	; (800291c <_fstat_r+0x20>)
 8002900:	2300      	movs	r3, #0
 8002902:	4604      	mov	r4, r0
 8002904:	4608      	mov	r0, r1
 8002906:	4611      	mov	r1, r2
 8002908:	602b      	str	r3, [r5, #0]
 800290a:	f7fd fec0 	bl	800068e <_fstat>
 800290e:	1c43      	adds	r3, r0, #1
 8002910:	d102      	bne.n	8002918 <_fstat_r+0x1c>
 8002912:	682b      	ldr	r3, [r5, #0]
 8002914:	b103      	cbz	r3, 8002918 <_fstat_r+0x1c>
 8002916:	6023      	str	r3, [r4, #0]
 8002918:	bd38      	pop	{r3, r4, r5, pc}
 800291a:	bf00      	nop
 800291c:	200000e8 	.word	0x200000e8

08002920 <_isatty_r>:
 8002920:	b538      	push	{r3, r4, r5, lr}
 8002922:	4d06      	ldr	r5, [pc, #24]	; (800293c <_isatty_r+0x1c>)
 8002924:	2300      	movs	r3, #0
 8002926:	4604      	mov	r4, r0
 8002928:	4608      	mov	r0, r1
 800292a:	602b      	str	r3, [r5, #0]
 800292c:	f7fd febf 	bl	80006ae <_isatty>
 8002930:	1c43      	adds	r3, r0, #1
 8002932:	d102      	bne.n	800293a <_isatty_r+0x1a>
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	b103      	cbz	r3, 800293a <_isatty_r+0x1a>
 8002938:	6023      	str	r3, [r4, #0]
 800293a:	bd38      	pop	{r3, r4, r5, pc}
 800293c:	200000e8 	.word	0x200000e8

08002940 <_lseek_r>:
 8002940:	b538      	push	{r3, r4, r5, lr}
 8002942:	4d07      	ldr	r5, [pc, #28]	; (8002960 <_lseek_r+0x20>)
 8002944:	4604      	mov	r4, r0
 8002946:	4608      	mov	r0, r1
 8002948:	4611      	mov	r1, r2
 800294a:	2200      	movs	r2, #0
 800294c:	602a      	str	r2, [r5, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	f7fd feb8 	bl	80006c4 <_lseek>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d102      	bne.n	800295e <_lseek_r+0x1e>
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	b103      	cbz	r3, 800295e <_lseek_r+0x1e>
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	bd38      	pop	{r3, r4, r5, pc}
 8002960:	200000e8 	.word	0x200000e8

08002964 <__malloc_lock>:
 8002964:	4801      	ldr	r0, [pc, #4]	; (800296c <__malloc_lock+0x8>)
 8002966:	f7ff bb1d 	b.w	8001fa4 <__retarget_lock_acquire_recursive>
 800296a:	bf00      	nop
 800296c:	200000dc 	.word	0x200000dc

08002970 <__malloc_unlock>:
 8002970:	4801      	ldr	r0, [pc, #4]	; (8002978 <__malloc_unlock+0x8>)
 8002972:	f7ff bb18 	b.w	8001fa6 <__retarget_lock_release_recursive>
 8002976:	bf00      	nop
 8002978:	200000dc 	.word	0x200000dc

0800297c <_read_r>:
 800297c:	b538      	push	{r3, r4, r5, lr}
 800297e:	4d07      	ldr	r5, [pc, #28]	; (800299c <_read_r+0x20>)
 8002980:	4604      	mov	r4, r0
 8002982:	4608      	mov	r0, r1
 8002984:	4611      	mov	r1, r2
 8002986:	2200      	movs	r2, #0
 8002988:	602a      	str	r2, [r5, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	f7fd fe3a 	bl	8000604 <_read>
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	d102      	bne.n	800299a <_read_r+0x1e>
 8002994:	682b      	ldr	r3, [r5, #0]
 8002996:	b103      	cbz	r3, 800299a <_read_r+0x1e>
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	bd38      	pop	{r3, r4, r5, pc}
 800299c:	200000e8 	.word	0x200000e8

080029a0 <_init>:
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a2:	bf00      	nop
 80029a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a6:	bc08      	pop	{r3}
 80029a8:	469e      	mov	lr, r3
 80029aa:	4770      	bx	lr

080029ac <_fini>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	bf00      	nop
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr
