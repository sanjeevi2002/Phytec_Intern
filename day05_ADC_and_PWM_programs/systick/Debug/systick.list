
systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001880  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001a44  08001a44  00011a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a54  08001a54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a54  08001a54  00011a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a5c  08001a5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a5c  08001a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001a70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001a70  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005264  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000123a  00000000  00000000  000252a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a0  00000000  00000000  000264e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00026980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020132  00000000  00000000  00026d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006380  00000000  00000000  00046eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3c40  00000000  00000000  0004d22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00110e6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010ac  00000000  00000000  00110ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001a2c 	.word	0x08001a2c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001a2c 	.word	0x08001a2c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	6039      	str	r1, [r7, #0]
 8000512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000518:	2b00      	cmp	r3, #0
 800051a:	db0a      	blt.n	8000532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	b2da      	uxtb	r2, r3
 8000520:	490c      	ldr	r1, [pc, #48]	; (8000554 <__NVIC_SetPriority+0x4c>)
 8000522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000526:	0112      	lsls	r2, r2, #4
 8000528:	b2d2      	uxtb	r2, r2
 800052a:	440b      	add	r3, r1
 800052c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000530:	e00a      	b.n	8000548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4908      	ldr	r1, [pc, #32]	; (8000558 <__NVIC_SetPriority+0x50>)
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f003 030f 	and.w	r3, r3, #15
 800053e:	3b04      	subs	r3, #4
 8000540:	0112      	lsls	r2, r2, #4
 8000542:	b2d2      	uxtb	r2, r2
 8000544:	440b      	add	r3, r1
 8000546:	761a      	strb	r2, [r3, #24]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	e000e100 	.word	0xe000e100
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3b01      	subs	r3, #1
 8000568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800056c:	d301      	bcc.n	8000572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800056e:	2301      	movs	r3, #1
 8000570:	e00f      	b.n	8000592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000572:	4a0a      	ldr	r2, [pc, #40]	; (800059c <SysTick_Config+0x40>)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3b01      	subs	r3, #1
 8000578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800057a:	210f      	movs	r1, #15
 800057c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000580:	f7ff ffc2 	bl	8000508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SysTick_Config+0x40>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800058a:	4b04      	ldr	r3, [pc, #16]	; (800059c <SysTick_Config+0x40>)
 800058c:	2207      	movs	r2, #7
 800058e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000590:	2300      	movs	r3, #0
}
 8000592:	4618      	mov	r0, r3
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	e000e010 	.word	0xe000e010

080005a0 <SysTick_Init>:
#define TOGGLE_INTERVAL 1500

// Global variable to keep track of the elapsed time
volatile uint32_t tickCount = 0;

void SysTick_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
    // Configure SysTick to generate an interrupt every 1 ms
    uint32_t ticks = SystemCoreClock / 1000; // Number of ticks per millisecond
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <SysTick_Init+0x2c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a09      	ldr	r2, [pc, #36]	; (80005d0 <SysTick_Init+0x30>)
 80005ac:	fba2 2303 	umull	r2, r3, r2, r3
 80005b0:	099b      	lsrs	r3, r3, #6
 80005b2:	607b      	str	r3, [r7, #4]
    if (SysTick_Config(ticks)) {
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ffd1 	bl	800055c <SysTick_Config>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d000      	beq.n	80005c2 <SysTick_Init+0x22>
        // Initialization Error
        while (1);
 80005c0:	e7fe      	b.n	80005c0 <SysTick_Init+0x20>
    }
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000000 	.word	0x20000000
 80005d0:	10624dd3 	.word	0x10624dd3

080005d4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    tickCount++;
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <SysTick_Handler+0x2c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <SysTick_Handler+0x2c>)
 80005e0:	6013      	str	r3, [r2, #0]
    if (tickCount >= TOGGLE_INTERVAL) {
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <SysTick_Handler+0x2c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f240 52db 	movw	r2, #1499	; 0x5db
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d906      	bls.n	80005fc <SysTick_Handler+0x28>
        tickCount = 0;
 80005ee:	4b04      	ldr	r3, [pc, #16]	; (8000600 <SysTick_Handler+0x2c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
        // Perform the task every TOGGLE_INTERVAL milliseconds
        // This is where you toggle the LED or perform other tasks
        HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Example: Toggle LED on PA5
 80005f4:	2120      	movs	r1, #32
 80005f6:	4803      	ldr	r0, [pc, #12]	; (8000604 <SysTick_Handler+0x30>)
 80005f8:	f000 fc1d 	bl	8000e36 <HAL_GPIO_TogglePin>
    }
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000028 	.word	0x20000028
 8000604:	40020000 	.word	0x40020000

08000608 <main>:
// Function prototypes
void SystemClock_Config(void);
static void MX_GPIO_Init(void);

// Main application code
int main(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    HAL_Init();
 800060c:	f000 f922 	bl	8000854 <HAL_Init>
    SystemClock_Config(); // Configure the system clock
 8000610:	f000 f806 	bl	8000620 <SystemClock_Config>
    SysTick_Init(); // Initialize SysTick for delay
 8000614:	f7ff ffc4 	bl	80005a0 <SysTick_Init>
    MX_GPIO_Init(); // Initialize GPIOs
 8000618:	f000 f862 	bl	80006e0 <MX_GPIO_Init>

    // The while loop is intentionally left empty
    while (1) {
 800061c:	e7fe      	b.n	800061c <main+0x14>
	...

08000620 <SystemClock_Config>:
        // No code here
    }
}

void SystemClock_Config(void) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f9ec 	bl	8001a1c <memset>

    __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xb8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a22      	ldr	r2, [pc, #136]	; (80006d8 <SystemClock_Config+0xb8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemClock_Config+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <SystemClock_Config+0xbc>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	60bb      	str	r3, [r7, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLQ = 7;
 800069e:	2307      	movs	r3, #7
 80006a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80006a2:	f107 0308 	add.w	r3, r7, #8
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fef6 	bl	8001498 <HAL_RCC_OscConfig>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006ac:	230f      	movs	r3, #15
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80006c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006c8:	2105      	movs	r1, #5
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fbce 	bl	8000e6c <HAL_RCC_ClockConfig>
}
 80006d0:	bf00      	nop
 80006d2:	3750      	adds	r7, #80	; 0x50
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_GPIO_Init+0x5c>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_GPIO_Init+0x5c>)
 80006fe:	f043 0301 	orr.w	r3, r3, #1
 8000702:	6313      	str	r3, [r2, #48]	; 0x30
 8000704:	4b0d      	ldr	r3, [pc, #52]	; (800073c <MX_GPIO_Init+0x5c>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

    // Configure GPIO pin for LED
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Initial LED state (off)
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <MX_GPIO_Init+0x60>)
 8000716:	f000 fb75 	bl	8000e04 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800071a:	2320      	movs	r3, #32
 800071c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <MX_GPIO_Init+0x60>)
 8000730:	f000 f9d4 	bl	8000adc <HAL_GPIO_Init>
}
 8000734:	bf00      	nop
 8000736:	3718      	adds	r7, #24
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40020000 	.word	0x40020000

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <HAL_MspInit+0x4c>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x4c>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	6413      	str	r3, [r2, #64]	; 0x40
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000782:	2007      	movs	r0, #7
 8000784:	f000 f976 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000788:	bf00      	nop
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800

08000794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <NMI_Handler+0x4>

0800079a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079e:	e7fe      	b.n	800079e <HardFault_Handler+0x4>

080007a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <MemManage_Handler+0x4>

080007a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000838 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000806:	490e      	ldr	r1, [pc, #56]	; (8000840 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800081c:	4c0b      	ldr	r4, [pc, #44]	; (800084c <LoopFillZerobss+0x26>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800082a:	f7ff ffd7 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082e:	f001 f8d1 	bl	80019d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000832:	f7ff fee9 	bl	8000608 <main>
  bx  lr    
 8000836:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000838:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000844:	08001a64 	.word	0x08001a64
  ldr r2, =_sbss
 8000848:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800084c:	20000030 	.word	0x20000030

08000850 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_Init+0x40>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <HAL_Init+0x40>)
 800085e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000862:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_Init+0x40>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_Init+0x40>)
 800086a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a07      	ldr	r2, [pc, #28]	; (8000894 <HAL_Init+0x40>)
 8000876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800087a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087c:	2003      	movs	r0, #3
 800087e:	f000 f8f9 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000882:	2000      	movs	r0, #0
 8000884:	f000 f808 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000888:	f7ff ff5c 	bl	8000744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023c00 	.word	0x40023c00

08000898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x54>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_InitTick+0x58>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	4619      	mov	r1, r3
 80008aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80008b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f903 	bl	8000ac2 <HAL_SYSTICK_Config>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
 80008c4:	e00e      	b.n	80008e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	d80a      	bhi.n	80008e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008cc:	2200      	movs	r2, #0
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008d4:	f000 f8d9 	bl	8000a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <HAL_InitTick+0x5c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008de:	2300      	movs	r3, #0
 80008e0:	e000      	b.n	80008e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000008 	.word	0x20000008
 80008f4:	20000004 	.word	0x20000004

080008f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;
 80008fc:	4b03      	ldr	r3, [pc, #12]	; (800090c <HAL_GetTick+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	2000002c 	.word	0x2000002c

08000910 <__NVIC_SetPriorityGrouping>:
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	; (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_SetPriority>:
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Config>:
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	f7ff ff8e 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff47 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff5c 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff8e 	bl	80009c8 <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffb0 	bl	8000a30 <SysTick_Config>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	; 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	e165      	b.n	8000dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000af8:	2201      	movs	r2, #1
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	f040 8154 	bne.w	8000dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d005      	beq.n	8000b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d130      	bne.n	8000b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	005b      	lsls	r3, r3, #1
 8000b38:	2203      	movs	r2, #3
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	43db      	mvns	r3, r3
 8000b40:	69ba      	ldr	r2, [r7, #24]
 8000b42:	4013      	ands	r3, r2
 8000b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b64:	2201      	movs	r2, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	091b      	lsrs	r3, r3, #4
 8000b7a:	f003 0201 	and.w	r2, r3, #1
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	69ba      	ldr	r2, [r7, #24]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d017      	beq.n	8000bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d123      	bne.n	8000c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	08da      	lsrs	r2, r3, #3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3208      	adds	r2, #8
 8000be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	f003 0307 	and.w	r3, r3, #7
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	220f      	movs	r2, #15
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	08da      	lsrs	r2, r3, #3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3208      	adds	r2, #8
 8000c1a:	69b9      	ldr	r1, [r7, #24]
 8000c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0203 	and.w	r2, r3, #3
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	f000 80ae 	beq.w	8000dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b5d      	ldr	r3, [pc, #372]	; (8000ddc <HAL_GPIO_Init+0x300>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a5c      	ldr	r2, [pc, #368]	; (8000ddc <HAL_GPIO_Init+0x300>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b5a      	ldr	r3, [pc, #360]	; (8000ddc <HAL_GPIO_Init+0x300>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c7e:	4a58      	ldr	r2, [pc, #352]	; (8000de0 <HAL_GPIO_Init+0x304>)
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a4f      	ldr	r2, [pc, #316]	; (8000de4 <HAL_GPIO_Init+0x308>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d025      	beq.n	8000cf6 <HAL_GPIO_Init+0x21a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a4e      	ldr	r2, [pc, #312]	; (8000de8 <HAL_GPIO_Init+0x30c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d01f      	beq.n	8000cf2 <HAL_GPIO_Init+0x216>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a4d      	ldr	r2, [pc, #308]	; (8000dec <HAL_GPIO_Init+0x310>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d019      	beq.n	8000cee <HAL_GPIO_Init+0x212>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4c      	ldr	r2, [pc, #304]	; (8000df0 <HAL_GPIO_Init+0x314>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0x20e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4b      	ldr	r2, [pc, #300]	; (8000df4 <HAL_GPIO_Init+0x318>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_GPIO_Init+0x20a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a4a      	ldr	r2, [pc, #296]	; (8000df8 <HAL_GPIO_Init+0x31c>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d007      	beq.n	8000ce2 <HAL_GPIO_Init+0x206>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <HAL_GPIO_Init+0x320>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d101      	bne.n	8000cde <HAL_GPIO_Init+0x202>
 8000cda:	2306      	movs	r3, #6
 8000cdc:	e00c      	b.n	8000cf8 <HAL_GPIO_Init+0x21c>
 8000cde:	2307      	movs	r3, #7
 8000ce0:	e00a      	b.n	8000cf8 <HAL_GPIO_Init+0x21c>
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	e008      	b.n	8000cf8 <HAL_GPIO_Init+0x21c>
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	e006      	b.n	8000cf8 <HAL_GPIO_Init+0x21c>
 8000cea:	2303      	movs	r3, #3
 8000cec:	e004      	b.n	8000cf8 <HAL_GPIO_Init+0x21c>
 8000cee:	2302      	movs	r3, #2
 8000cf0:	e002      	b.n	8000cf8 <HAL_GPIO_Init+0x21c>
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e000      	b.n	8000cf8 <HAL_GPIO_Init+0x21c>
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	69fa      	ldr	r2, [r7, #28]
 8000cfa:	f002 0203 	and.w	r2, r2, #3
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	4093      	lsls	r3, r2
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d08:	4935      	ldr	r1, [pc, #212]	; (8000de0 <HAL_GPIO_Init+0x304>)
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d16:	4b3a      	ldr	r3, [pc, #232]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d3a:	4a31      	ldr	r2, [pc, #196]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d64:	4a26      	ldr	r2, [pc, #152]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d6a:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000db8:	4a11      	ldr	r2, [pc, #68]	; (8000e00 <HAL_GPIO_Init+0x324>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	61fb      	str	r3, [r7, #28]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	2b0f      	cmp	r3, #15
 8000dc8:	f67f ae96 	bls.w	8000af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3724      	adds	r7, #36	; 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40013800 	.word	0x40013800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020400 	.word	0x40020400
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40021400 	.word	0x40021400
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	40013c00 	.word	0x40013c00

08000e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
 8000e10:	4613      	mov	r3, r2
 8000e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e14:	787b      	ldrb	r3, [r7, #1]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e1a:	887a      	ldrh	r2, [r7, #2]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e20:	e003      	b.n	8000e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	041a      	lsls	r2, r3, #16
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	619a      	str	r2, [r3, #24]
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695b      	ldr	r3, [r3, #20]
 8000e46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e48:	887a      	ldrh	r2, [r7, #2]
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	041a      	lsls	r2, r3, #16
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	400b      	ands	r3, r1
 8000e58:	431a      	orrs	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	619a      	str	r2, [r3, #24]
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d101      	bne.n	8000e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e0cc      	b.n	800101a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000e80:	4b68      	ldr	r3, [pc, #416]	; (8001024 <HAL_RCC_ClockConfig+0x1b8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 030f 	and.w	r3, r3, #15
 8000e88:	683a      	ldr	r2, [r7, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d90c      	bls.n	8000ea8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e8e:	4b65      	ldr	r3, [pc, #404]	; (8001024 <HAL_RCC_ClockConfig+0x1b8>)
 8000e90:	683a      	ldr	r2, [r7, #0]
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e96:	4b63      	ldr	r3, [pc, #396]	; (8001024 <HAL_RCC_ClockConfig+0x1b8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d001      	beq.n	8000ea8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e0b8      	b.n	800101a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d020      	beq.n	8000ef6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d005      	beq.n	8000ecc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ec0:	4b59      	ldr	r3, [pc, #356]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	4a58      	ldr	r2, [pc, #352]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000eca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d005      	beq.n	8000ee4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ed8:	4b53      	ldr	r3, [pc, #332]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	4a52      	ldr	r2, [pc, #328]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ee2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ee4:	4b50      	ldr	r3, [pc, #320]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	494d      	ldr	r1, [pc, #308]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d044      	beq.n	8000f8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d107      	bne.n	8000f1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0a:	4b47      	ldr	r3, [pc, #284]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d119      	bne.n	8000f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e07f      	b.n	800101a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d003      	beq.n	8000f2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d107      	bne.n	8000f3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f2a:	4b3f      	ldr	r3, [pc, #252]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d109      	bne.n	8000f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e06f      	b.n	800101a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e067      	b.n	800101a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f4a:	4b37      	ldr	r3, [pc, #220]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f023 0203 	bic.w	r2, r3, #3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	4934      	ldr	r1, [pc, #208]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f5c:	f7ff fccc 	bl	80008f8 <HAL_GetTick>
 8000f60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f62:	e00a      	b.n	8000f7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f64:	f7ff fcc8 	bl	80008f8 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e04f      	b.n	800101a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f7a:	4b2b      	ldr	r3, [pc, #172]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 020c 	and.w	r2, r3, #12
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d1eb      	bne.n	8000f64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <HAL_RCC_ClockConfig+0x1b8>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 030f 	and.w	r3, r3, #15
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d20c      	bcs.n	8000fb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_RCC_ClockConfig+0x1b8>)
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa2:	4b20      	ldr	r3, [pc, #128]	; (8001024 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	683a      	ldr	r2, [r7, #0]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d001      	beq.n	8000fb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e032      	b.n	800101a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d008      	beq.n	8000fd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	4916      	ldr	r1, [pc, #88]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d009      	beq.n	8000ff2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000fde:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	490e      	ldr	r1, [pc, #56]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ff2:	f000 f821 	bl	8001038 <HAL_RCC_GetSysClockFreq>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	490a      	ldr	r1, [pc, #40]	; (800102c <HAL_RCC_ClockConfig+0x1c0>)
 8001004:	5ccb      	ldrb	r3, [r1, r3]
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	4a09      	ldr	r2, [pc, #36]	; (8001030 <HAL_RCC_ClockConfig+0x1c4>)
 800100c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_RCC_ClockConfig+0x1c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fc40 	bl	8000898 <HAL_InitTick>

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023c00 	.word	0x40023c00
 8001028:	40023800 	.word	0x40023800
 800102c:	08001a44 	.word	0x08001a44
 8001030:	20000000 	.word	0x20000000
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800103c:	b0ae      	sub	sp, #184	; 0xb8
 800103e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800105e:	4bcb      	ldr	r3, [pc, #812]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b0c      	cmp	r3, #12
 8001068:	f200 8206 	bhi.w	8001478 <HAL_RCC_GetSysClockFreq+0x440>
 800106c:	a201      	add	r2, pc, #4	; (adr r2, 8001074 <HAL_RCC_GetSysClockFreq+0x3c>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	080010a9 	.word	0x080010a9
 8001078:	08001479 	.word	0x08001479
 800107c:	08001479 	.word	0x08001479
 8001080:	08001479 	.word	0x08001479
 8001084:	080010b1 	.word	0x080010b1
 8001088:	08001479 	.word	0x08001479
 800108c:	08001479 	.word	0x08001479
 8001090:	08001479 	.word	0x08001479
 8001094:	080010b9 	.word	0x080010b9
 8001098:	08001479 	.word	0x08001479
 800109c:	08001479 	.word	0x08001479
 80010a0:	08001479 	.word	0x08001479
 80010a4:	080012a9 	.word	0x080012a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010a8:	4bb9      	ldr	r3, [pc, #740]	; (8001390 <HAL_RCC_GetSysClockFreq+0x358>)
 80010aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80010ae:	e1e7      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010b0:	4bb8      	ldr	r3, [pc, #736]	; (8001394 <HAL_RCC_GetSysClockFreq+0x35c>)
 80010b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80010b6:	e1e3      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010b8:	4bb4      	ldr	r3, [pc, #720]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010c4:	4bb1      	ldr	r3, [pc, #708]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d071      	beq.n	80011b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010d0:	4bae      	ldr	r3, [pc, #696]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	099b      	lsrs	r3, r3, #6
 80010d6:	2200      	movs	r2, #0
 80010d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80010dc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80010e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80010f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80010f6:	4622      	mov	r2, r4
 80010f8:	462b      	mov	r3, r5
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	f04f 0100 	mov.w	r1, #0
 8001102:	0159      	lsls	r1, r3, #5
 8001104:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001108:	0150      	lsls	r0, r2, #5
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4621      	mov	r1, r4
 8001110:	1a51      	subs	r1, r2, r1
 8001112:	6439      	str	r1, [r7, #64]	; 0x40
 8001114:	4629      	mov	r1, r5
 8001116:	eb63 0301 	sbc.w	r3, r3, r1
 800111a:	647b      	str	r3, [r7, #68]	; 0x44
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001128:	4649      	mov	r1, r9
 800112a:	018b      	lsls	r3, r1, #6
 800112c:	4641      	mov	r1, r8
 800112e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001132:	4641      	mov	r1, r8
 8001134:	018a      	lsls	r2, r1, #6
 8001136:	4641      	mov	r1, r8
 8001138:	1a51      	subs	r1, r2, r1
 800113a:	63b9      	str	r1, [r7, #56]	; 0x38
 800113c:	4649      	mov	r1, r9
 800113e:	eb63 0301 	sbc.w	r3, r3, r1
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001150:	4649      	mov	r1, r9
 8001152:	00cb      	lsls	r3, r1, #3
 8001154:	4641      	mov	r1, r8
 8001156:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800115a:	4641      	mov	r1, r8
 800115c:	00ca      	lsls	r2, r1, #3
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	4603      	mov	r3, r0
 8001164:	4622      	mov	r2, r4
 8001166:	189b      	adds	r3, r3, r2
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
 800116a:	462b      	mov	r3, r5
 800116c:	460a      	mov	r2, r1
 800116e:	eb42 0303 	adc.w	r3, r2, r3
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001180:	4629      	mov	r1, r5
 8001182:	024b      	lsls	r3, r1, #9
 8001184:	4621      	mov	r1, r4
 8001186:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800118a:	4621      	mov	r1, r4
 800118c:	024a      	lsls	r2, r1, #9
 800118e:	4610      	mov	r0, r2
 8001190:	4619      	mov	r1, r3
 8001192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001196:	2200      	movs	r2, #0
 8001198:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800119c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80011a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80011a4:	f7ff f82e 	bl	8000204 <__aeabi_uldivmod>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4613      	mov	r3, r2
 80011ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80011b2:	e067      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011b4:	4b75      	ldr	r3, [pc, #468]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	099b      	lsrs	r3, r3, #6
 80011ba:	2200      	movs	r2, #0
 80011bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80011c0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80011c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80011c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80011ce:	2300      	movs	r3, #0
 80011d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80011d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80011d6:	4622      	mov	r2, r4
 80011d8:	462b      	mov	r3, r5
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	f04f 0100 	mov.w	r1, #0
 80011e2:	0159      	lsls	r1, r3, #5
 80011e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80011e8:	0150      	lsls	r0, r2, #5
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4621      	mov	r1, r4
 80011f0:	1a51      	subs	r1, r2, r1
 80011f2:	62b9      	str	r1, [r7, #40]	; 0x28
 80011f4:	4629      	mov	r1, r5
 80011f6:	eb63 0301 	sbc.w	r3, r3, r1
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001208:	4649      	mov	r1, r9
 800120a:	018b      	lsls	r3, r1, #6
 800120c:	4641      	mov	r1, r8
 800120e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001212:	4641      	mov	r1, r8
 8001214:	018a      	lsls	r2, r1, #6
 8001216:	4641      	mov	r1, r8
 8001218:	ebb2 0a01 	subs.w	sl, r2, r1
 800121c:	4649      	mov	r1, r9
 800121e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001222:	f04f 0200 	mov.w	r2, #0
 8001226:	f04f 0300 	mov.w	r3, #0
 800122a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800122e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001232:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001236:	4692      	mov	sl, r2
 8001238:	469b      	mov	fp, r3
 800123a:	4623      	mov	r3, r4
 800123c:	eb1a 0303 	adds.w	r3, sl, r3
 8001240:	623b      	str	r3, [r7, #32]
 8001242:	462b      	mov	r3, r5
 8001244:	eb4b 0303 	adc.w	r3, fp, r3
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001256:	4629      	mov	r1, r5
 8001258:	028b      	lsls	r3, r1, #10
 800125a:	4621      	mov	r1, r4
 800125c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001260:	4621      	mov	r1, r4
 8001262:	028a      	lsls	r2, r1, #10
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800126c:	2200      	movs	r2, #0
 800126e:	673b      	str	r3, [r7, #112]	; 0x70
 8001270:	677a      	str	r2, [r7, #116]	; 0x74
 8001272:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001276:	f7fe ffc5 	bl	8000204 <__aeabi_uldivmod>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4613      	mov	r3, r2
 8001280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	0c1b      	lsrs	r3, r3, #16
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	3301      	adds	r3, #1
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800129a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80012a6:	e0eb      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012a8:	4b38      	ldr	r3, [pc, #224]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012b4:	4b35      	ldr	r3, [pc, #212]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d06b      	beq.n	8001398 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c0:	4b32      	ldr	r3, [pc, #200]	; (800138c <HAL_RCC_GetSysClockFreq+0x354>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	2200      	movs	r2, #0
 80012c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80012ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80012cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80012ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012d2:	663b      	str	r3, [r7, #96]	; 0x60
 80012d4:	2300      	movs	r3, #0
 80012d6:	667b      	str	r3, [r7, #100]	; 0x64
 80012d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80012dc:	4622      	mov	r2, r4
 80012de:	462b      	mov	r3, r5
 80012e0:	f04f 0000 	mov.w	r0, #0
 80012e4:	f04f 0100 	mov.w	r1, #0
 80012e8:	0159      	lsls	r1, r3, #5
 80012ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4621      	mov	r1, r4
 80012f6:	1a51      	subs	r1, r2, r1
 80012f8:	61b9      	str	r1, [r7, #24]
 80012fa:	4629      	mov	r1, r5
 80012fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	f04f 0300 	mov.w	r3, #0
 800130a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800130e:	4659      	mov	r1, fp
 8001310:	018b      	lsls	r3, r1, #6
 8001312:	4651      	mov	r1, sl
 8001314:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001318:	4651      	mov	r1, sl
 800131a:	018a      	lsls	r2, r1, #6
 800131c:	4651      	mov	r1, sl
 800131e:	ebb2 0801 	subs.w	r8, r2, r1
 8001322:	4659      	mov	r1, fp
 8001324:	eb63 0901 	sbc.w	r9, r3, r1
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001334:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001338:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800133c:	4690      	mov	r8, r2
 800133e:	4699      	mov	r9, r3
 8001340:	4623      	mov	r3, r4
 8001342:	eb18 0303 	adds.w	r3, r8, r3
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	462b      	mov	r3, r5
 800134a:	eb49 0303 	adc.w	r3, r9, r3
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	f04f 0200 	mov.w	r2, #0
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800135c:	4629      	mov	r1, r5
 800135e:	024b      	lsls	r3, r1, #9
 8001360:	4621      	mov	r1, r4
 8001362:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001366:	4621      	mov	r1, r4
 8001368:	024a      	lsls	r2, r1, #9
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001372:	2200      	movs	r2, #0
 8001374:	65bb      	str	r3, [r7, #88]	; 0x58
 8001376:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001378:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800137c:	f7fe ff42 	bl	8000204 <__aeabi_uldivmod>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4613      	mov	r3, r2
 8001386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800138a:	e065      	b.n	8001458 <HAL_RCC_GetSysClockFreq+0x420>
 800138c:	40023800 	.word	0x40023800
 8001390:	00f42400 	.word	0x00f42400
 8001394:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <HAL_RCC_GetSysClockFreq+0x458>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	099b      	lsrs	r3, r3, #6
 800139e:	2200      	movs	r2, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	4611      	mov	r1, r2
 80013a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80013a8:	653b      	str	r3, [r7, #80]	; 0x50
 80013aa:	2300      	movs	r3, #0
 80013ac:	657b      	str	r3, [r7, #84]	; 0x54
 80013ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80013b2:	4642      	mov	r2, r8
 80013b4:	464b      	mov	r3, r9
 80013b6:	f04f 0000 	mov.w	r0, #0
 80013ba:	f04f 0100 	mov.w	r1, #0
 80013be:	0159      	lsls	r1, r3, #5
 80013c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013c4:	0150      	lsls	r0, r2, #5
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4641      	mov	r1, r8
 80013cc:	1a51      	subs	r1, r2, r1
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	4649      	mov	r1, r9
 80013d2:	eb63 0301 	sbc.w	r3, r3, r1
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80013e4:	4659      	mov	r1, fp
 80013e6:	018b      	lsls	r3, r1, #6
 80013e8:	4651      	mov	r1, sl
 80013ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013ee:	4651      	mov	r1, sl
 80013f0:	018a      	lsls	r2, r1, #6
 80013f2:	4651      	mov	r1, sl
 80013f4:	1a54      	subs	r4, r2, r1
 80013f6:	4659      	mov	r1, fp
 80013f8:	eb63 0501 	sbc.w	r5, r3, r1
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	00eb      	lsls	r3, r5, #3
 8001406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800140a:	00e2      	lsls	r2, r4, #3
 800140c:	4614      	mov	r4, r2
 800140e:	461d      	mov	r5, r3
 8001410:	4643      	mov	r3, r8
 8001412:	18e3      	adds	r3, r4, r3
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	464b      	mov	r3, r9
 8001418:	eb45 0303 	adc.w	r3, r5, r3
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800142a:	4629      	mov	r1, r5
 800142c:	028b      	lsls	r3, r1, #10
 800142e:	4621      	mov	r1, r4
 8001430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001434:	4621      	mov	r1, r4
 8001436:	028a      	lsls	r2, r1, #10
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001440:	2200      	movs	r2, #0
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
 8001444:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001446:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800144a:	f7fe fedb 	bl	8000204 <__aeabi_uldivmod>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4613      	mov	r3, r2
 8001454:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <HAL_RCC_GetSysClockFreq+0x458>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	0f1b      	lsrs	r3, r3, #28
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800146a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001476:	e003      	b.n	8001480 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_RCC_GetSysClockFreq+0x45c>)
 800147a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800147e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001480:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001484:	4618      	mov	r0, r3
 8001486:	37b8      	adds	r7, #184	; 0xb8
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	00f42400 	.word	0x00f42400

08001498 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e28d      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8083 	beq.w	80015be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014b8:	4b94      	ldr	r3, [pc, #592]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d019      	beq.n	80014f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014c4:	4b91      	ldr	r3, [pc, #580]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014d0:	4b8e      	ldr	r3, [pc, #568]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014dc:	d00c      	beq.n	80014f8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014de:	4b8b      	ldr	r3, [pc, #556]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014e6:	2b0c      	cmp	r3, #12
 80014e8:	d112      	bne.n	8001510 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ea:	4b88      	ldr	r3, [pc, #544]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014f6:	d10b      	bne.n	8001510 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f8:	4b84      	ldr	r3, [pc, #528]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05b      	beq.n	80015bc <HAL_RCC_OscConfig+0x124>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d157      	bne.n	80015bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e25a      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x90>
 800151a:	4b7c      	ldr	r3, [pc, #496]	; (800170c <HAL_RCC_OscConfig+0x274>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7b      	ldr	r2, [pc, #492]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xcc>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0xb4>
 8001532:	4b76      	ldr	r3, [pc, #472]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a75      	ldr	r2, [pc, #468]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b73      	ldr	r3, [pc, #460]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a72      	ldr	r2, [pc, #456]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xcc>
 800154c:	4b6f      	ldr	r3, [pc, #444]	; (800170c <HAL_RCC_OscConfig+0x274>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a6e      	ldr	r2, [pc, #440]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <HAL_RCC_OscConfig+0x274>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a6b      	ldr	r2, [pc, #428]	; (800170c <HAL_RCC_OscConfig+0x274>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff f9c4 	bl	80008f8 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff f9c0 	bl	80008f8 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e21f      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b61      	ldr	r3, [pc, #388]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xdc>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001594:	f7ff f9b0 	bl	80008f8 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff f9ac 	bl	80008f8 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	; 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e20b      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x104>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d06f      	beq.n	80016aa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d017      	beq.n	8001606 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d105      	bne.n	80015ee <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015e2:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d11c      	bne.n	8001634 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d116      	bne.n	8001634 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x186>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d001      	beq.n	800161e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e1d3      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4937      	ldr	r1, [pc, #220]	; (800170c <HAL_RCC_OscConfig+0x274>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	e03a      	b.n	80016aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163c:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_OscConfig+0x278>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff f959 	bl	80008f8 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff f955 	bl	80008f8 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1b4      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165c:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b28      	ldr	r3, [pc, #160]	; (800170c <HAL_RCC_OscConfig+0x274>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4925      	ldr	r1, [pc, #148]	; (800170c <HAL_RCC_OscConfig+0x274>)
 8001678:	4313      	orrs	r3, r2
 800167a:	600b      	str	r3, [r1, #0]
 800167c:	e015      	b.n	80016aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_OscConfig+0x278>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff f938 	bl	80008f8 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff f934 	bl	80008f8 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e193      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d036      	beq.n	8001724 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d016      	beq.n	80016ec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_RCC_OscConfig+0x27c>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff f918 	bl	80008f8 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff f914 	bl	80008f8 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e173      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_OscConfig+0x274>)
 80016e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0x234>
 80016ea:	e01b      	b.n	8001724 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x27c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff f901 	bl	80008f8 <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f8:	e00e      	b.n	8001718 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016fa:	f7ff f8fd 	bl	80008f8 <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d907      	bls.n	8001718 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e15c      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
 800170c:	40023800 	.word	0x40023800
 8001710:	42470000 	.word	0x42470000
 8001714:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b8a      	ldr	r3, [pc, #552]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ea      	bne.n	80016fa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8097 	beq.w	8001860 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b83      	ldr	r3, [pc, #524]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b7f      	ldr	r3, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a7e      	ldr	r2, [pc, #504]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b7c      	ldr	r3, [pc, #496]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b79      	ldr	r3, [pc, #484]	; (8001948 <HAL_RCC_OscConfig+0x4b0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d118      	bne.n	80017a0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b76      	ldr	r3, [pc, #472]	; (8001948 <HAL_RCC_OscConfig+0x4b0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a75      	ldr	r2, [pc, #468]	; (8001948 <HAL_RCC_OscConfig+0x4b0>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff f8bd 	bl	80008f8 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001782:	f7ff f8b9 	bl	80008f8 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e118      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	4b6c      	ldr	r3, [pc, #432]	; (8001948 <HAL_RCC_OscConfig+0x4b0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d106      	bne.n	80017b6 <HAL_RCC_OscConfig+0x31e>
 80017a8:	4b66      	ldr	r3, [pc, #408]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ac:	4a65      	ldr	r2, [pc, #404]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6713      	str	r3, [r2, #112]	; 0x70
 80017b4:	e01c      	b.n	80017f0 <HAL_RCC_OscConfig+0x358>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d10c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x340>
 80017be:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c2:	4a60      	ldr	r2, [pc, #384]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6713      	str	r3, [r2, #112]	; 0x70
 80017ca:	4b5e      	ldr	r3, [pc, #376]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	4a5d      	ldr	r2, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6713      	str	r3, [r2, #112]	; 0x70
 80017d6:	e00b      	b.n	80017f0 <HAL_RCC_OscConfig+0x358>
 80017d8:	4b5a      	ldr	r3, [pc, #360]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017dc:	4a59      	ldr	r2, [pc, #356]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6713      	str	r3, [r2, #112]	; 0x70
 80017e4:	4b57      	ldr	r3, [pc, #348]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a56      	ldr	r2, [pc, #344]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80017ea:	f023 0304 	bic.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff f87e 	bl	80008f8 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff f87a 	bl	80008f8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0d7      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001816:	4b4b      	ldr	r3, [pc, #300]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0ee      	beq.n	8001800 <HAL_RCC_OscConfig+0x368>
 8001822:	e014      	b.n	800184e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f868 	bl	80008f8 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff f864 	bl	80008f8 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e0c1      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001842:	4b40      	ldr	r3, [pc, #256]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1ee      	bne.n	800182c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184e:	7dfb      	ldrb	r3, [r7, #23]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d105      	bne.n	8001860 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001854:	4b3b      	ldr	r3, [pc, #236]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	4a3a      	ldr	r2, [pc, #232]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 800185a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80ad 	beq.w	80019c4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	2b08      	cmp	r3, #8
 8001874:	d060      	beq.n	8001938 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d145      	bne.n	800190a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187e:	4b33      	ldr	r3, [pc, #204]	; (800194c <HAL_RCC_OscConfig+0x4b4>)
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f838 	bl	80008f8 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188c:	f7ff f834 	bl	80008f8 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e093      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189e:	4b29      	ldr	r3, [pc, #164]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	085b      	lsrs	r3, r3, #1
 80018c2:	3b01      	subs	r3, #1
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	431a      	orrs	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	071b      	lsls	r3, r3, #28
 80018d6:	491b      	ldr	r1, [pc, #108]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <HAL_RCC_OscConfig+0x4b4>)
 80018de:	2201      	movs	r2, #1
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff f809 	bl	80008f8 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f805 	bl	80008f8 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e064      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d0f0      	beq.n	80018ea <HAL_RCC_OscConfig+0x452>
 8001908:	e05c      	b.n	80019c4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_OscConfig+0x4b4>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7fe fff2 	bl	80008f8 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7fe ffee 	bl	80008f8 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e04d      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x480>
 8001936:	e045      	b.n	80019c4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d107      	bne.n	8001950 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e040      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000
 800194c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_RCC_OscConfig+0x538>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d030      	beq.n	80019c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d129      	bne.n	80019c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001976:	429a      	cmp	r2, r3
 8001978:	d122      	bne.n	80019c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001980:	4013      	ands	r3, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001986:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001988:	4293      	cmp	r3, r2
 800198a:	d119      	bne.n	80019c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d10f      	bne.n	80019c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d107      	bne.n	80019c0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <__libc_init_array>:
 80019d4:	b570      	push	{r4, r5, r6, lr}
 80019d6:	4d0d      	ldr	r5, [pc, #52]	; (8001a0c <__libc_init_array+0x38>)
 80019d8:	4c0d      	ldr	r4, [pc, #52]	; (8001a10 <__libc_init_array+0x3c>)
 80019da:	1b64      	subs	r4, r4, r5
 80019dc:	10a4      	asrs	r4, r4, #2
 80019de:	2600      	movs	r6, #0
 80019e0:	42a6      	cmp	r6, r4
 80019e2:	d109      	bne.n	80019f8 <__libc_init_array+0x24>
 80019e4:	4d0b      	ldr	r5, [pc, #44]	; (8001a14 <__libc_init_array+0x40>)
 80019e6:	4c0c      	ldr	r4, [pc, #48]	; (8001a18 <__libc_init_array+0x44>)
 80019e8:	f000 f820 	bl	8001a2c <_init>
 80019ec:	1b64      	subs	r4, r4, r5
 80019ee:	10a4      	asrs	r4, r4, #2
 80019f0:	2600      	movs	r6, #0
 80019f2:	42a6      	cmp	r6, r4
 80019f4:	d105      	bne.n	8001a02 <__libc_init_array+0x2e>
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
 80019f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019fc:	4798      	blx	r3
 80019fe:	3601      	adds	r6, #1
 8001a00:	e7ee      	b.n	80019e0 <__libc_init_array+0xc>
 8001a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a06:	4798      	blx	r3
 8001a08:	3601      	adds	r6, #1
 8001a0a:	e7f2      	b.n	80019f2 <__libc_init_array+0x1e>
 8001a0c:	08001a5c 	.word	0x08001a5c
 8001a10:	08001a5c 	.word	0x08001a5c
 8001a14:	08001a5c 	.word	0x08001a5c
 8001a18:	08001a60 	.word	0x08001a60

08001a1c <memset>:
 8001a1c:	4402      	add	r2, r0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d100      	bne.n	8001a26 <memset+0xa>
 8001a24:	4770      	bx	lr
 8001a26:	f803 1b01 	strb.w	r1, [r3], #1
 8001a2a:	e7f9      	b.n	8001a20 <memset+0x4>

08001a2c <_init>:
 8001a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2e:	bf00      	nop
 8001a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a32:	bc08      	pop	{r3}
 8001a34:	469e      	mov	lr, r3
 8001a36:	4770      	bx	lr

08001a38 <_fini>:
 8001a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3a:	bf00      	nop
 8001a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a3e:	bc08      	pop	{r3}
 8001a40:	469e      	mov	lr, r3
 8001a42:	4770      	bx	lr
